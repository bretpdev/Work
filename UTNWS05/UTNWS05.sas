/*%LET RPTLIB = %SYSGET(reportdir);*/
%LET RPTLIB = T:\SAS;
FILENAME REPORTZ "&RPTLIB/UNWS05.NWS05RZ";
FILENAME REPORT2 "&RPTLIB/UNWS05.NWS05R2";
FILENAME REPORT3 "&RPTLIB/UNWS05.NWS05R3";
FILENAME REPORT4 "&RPTLIB/UNWS05.NWS05R4";
FILENAME REPORT5 "&RPTLIB/UNWS05.NWS05R5";
FILENAME REPORT9 "&RPTLIB/UNWS05.NWS05R9";
FILENAME REPORT10 "&RPTLIB/UNWS05.NWS05R10";
FILENAME REPORT11 "&RPTLIB/UNWS05.NWS05R11";
FILENAME REPORT12 "&RPTLIB/UNWS05.NWS05R12";
FILENAME REPORT13 "&RPTLIB/UNWS05.NWS05R13";
FILENAME REPORT15 "&RPTLIB/UNWS05.NWS05R15";
FILENAME REPORT16 "&RPTLIB/UNWS05.NWS05R16";
FILENAME REPORT17 "&RPTLIB/UNWS05.NWS05R17";
FILENAME REPORT20 "&RPTLIB/UNWS05.NWS05R20";
FILENAME REPORT21 "&RPTLIB/UNWS05.NWS05R21";
FILENAME REPORT22 "&RPTLIB/UNWS05.NWS05R22"; *Borrower Paid Ahead;
FILENAME REPORT23 "&RPTLIB/UNWS05.NWS05R23"; *Endorser Paid Ahead;

LIBNAME  LEGEND  REMOTE  SERVER=LEGEND SLIBREF=work  ;
RSUBMIT LEGEND;
/*%let DB = DNFPRQUT;  *This is test;*/
/*%let DB = DNFPRUUT;  *This is VUK3 test;*/
%let DB = DNFPUTDL;  *This is live;
LIBNAME PROGREVW '/sas/whse/progrevw';

DATA _NULL_;
	SET PROGREVW.LASTRUN_JOBS;
	WHERE JOB = 'UTNWS05';
	CALL SYMPUTX('_8DAYSAGO',"'"||PUT(TODAY()-8,MMDDYY10.)||"'" );
RUN;

%MACRO SQLCHECK ;
  %IF  &SQLXRC NE 0  %THEN  %DO  ;
    DATA _NULL_  ;
            FILE REPORTZ NOTITLES  ;
            PUT @01 " ********************************************************************* "
              / @01 " ****  THE SQL CODE ABOVE HAS EXPERIENCED AN ERROR.               **** "
              / @01 " ****  THE SAS SHOULD BE REVIEWED.                                **** "       
              / @01 " ********************************************************************* "
              / @01 " ****  THE SQL ERROR CODE IS  &SQLXRC  AND THE SQL ERROR MESSAGE  **** "
              / @01 " ****  &SQLXMSG   **** "
              / @01 " ********************************************************************* "
            ;
         RUN  ;
  %END  ;
%MEND  ;

PROC SQL;
CONNECT TO DB2 (DATABASE=&DB);
CREATE TABLE BIL AS
	SELECT 
		*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT
			BL10.BF_SSN,
			BL10.LD_BIL_CRT,
			BL10.LN_SEQ_BIL_WI_DTE,
			LN10.LN_SEQ,
			LN10.IC_LON_PGM,
			LN16.LN_DLQ_MAX,
			LN10.LD_LON_1_DSB,
			COALESCE(LN10.LA_CUR_PRI,0) AS LA_CUR_PRN_BIL,
			COALESCE(LN80.LA_NSI_BIL,0) AS LA_NSI_BIL,
			COALESCE(LN10.LA_LTE_FEE_OTS,0) AS LA_LTE_FEE_OTS_PRT,
			LN80.LR_INT_BIL AS LR_INT_BIL,
			BL10.LD_BIL_DU,
			COALESCE(BIL_TOT.LA_BIL_DU_PRT,0) + COALESCE(BIL_TOT.LA_BIL_PAS_DU,0) AS LA_BIL_DU_PRT,
			COALESCE(BIL_TOT.LA_BIL_DU_PRT,0) AS LA_CUR_INT_DU,
			LN15.ORG_PRI,
			COALESCE(BIL_TOT.LA_BIL_PAS_DU,0) AS LA_BIL_PAS_DU,
			COALESCE(BIL_TOT.LA_BIL_PAS_DU,0) + COALESCE(BIL_TOT.LA_BIL_DU_PRT,0) + COALESCE(BIL_TOT.LA_LTE_FEE_OTS_PRT,0) AS LA_TOT_INT_DU,
			COALESCE(LN80.LA_BIL_PAS_DU,0) AS LA_BIL_PAS_DU_LN,
    		COALESCE(LN80.LA_BIL_PAS_DU,0) + COALESCE(LN80.LA_BIL_DU_PRT,0) + COALESCE(LN80.LA_LTE_FEE_OTS_PRT,0) AS LA_TOT_INT_DU_LN,
			COALESCE(LN80.LA_BIL_DU_PRT,0) AS LA_CUR_INT_DU_LN,
			LN10.LD_LON_ACL_ADD,
			BL10.LC_BIL_TYP,
			BL10.LC_IND_BIL_SNT,
			PD10.DF_SPE_ACC_ID AS BOR_ACC_ID,
			LN10.LC_LON_SND_CHC,
			COALESCE(DW01.WA_TOT_BRI_OTS, DW01.LA_NSI_OTS, 0) AS WA_TOT_BRI_OTS,
			PAID_AHEAD.NEXT_PMT_DUE,
			PAID_AHEAD.NEXT_PMT_DUE_DATE,
			CASE
				WHEN BR30.BF_SSN IS NOT NULL 
				THEN 1
				ELSE 0
			END AS ON_ACH
		FROM 
			PKUB.BL10_BR_BIL BL10
			INNER JOIN PKUB.LN80_LON_BIL_CRF LN80
				ON BL10.BF_SSN = LN80.BF_SSN
				AND BL10.LD_BIL_CRT = LN80.LD_BIL_CRT
				AND BL10.LN_SEQ_BIL_WI_DTE = LN80.LN_SEQ_BIL_WI_DTE
			INNER JOIN PKUB.LN10_LON LN10
				ON LN80.BF_SSN = LN10.BF_SSN
				AND LN80.LN_SEQ = LN10.LN_SEQ
			INNER JOIN PKUB.DW01_DW_CLC_CLU DW01
				ON DW01.BF_SSN = LN10.BF_SSN
				AND DW01.LN_SEQ = LN10.LN_SEQ
			INNER JOIN PKUB.PD10_PRS_NME PD10
				ON BL10.BF_SSN = PD10.DF_PRS_ID
			INNER JOIN 
			(
				SELECT	
					DF_PRS_ID
				FROM
					PKUB.PD30_PRS_ADR
				WHERE
					DI_VLD_ADR = 'Y'

				UNION

				SELECT
					LN20I.BF_SSN AS DF_PRS_ID
				FROM
					PKUB.PD30_PRS_ADR AE /*endorser address*/
					INNER JOIN 	PKUB.LN20_EDS LN20I
						ON AE.DF_PRS_ID = LN20I.LF_EDS 	/*notice join is from pd30 ssn to endorser id (ssn)*/
						AND LN20I.LC_STA_LON20 = 'A'
				WHERE
					AE.DI_VLD_ADR = 'Y'
			) PD30
				ON BL10.BF_SSN = PD30.DF_PRS_ID
			LEFT JOIN 
			(
				SELECT 
					LN80.BF_SSN,
					LN80.LD_BIL_CRT,
					LN80.LN_SEQ_BIL_WI_DTE,
					SUM(LN80.LA_BIL_DU_PRT) AS LA_BIL_DU_PRT,
					SUM(LN80.LA_BIL_PAS_DU) AS LA_BIL_PAS_DU,
					SUM(LN80.LA_LTE_FEE_OTS_PRT) AS LA_LTE_FEE_OTS_PRT
				FROM 
					PKUB.LN80_LON_BIL_CRF LN80
				GROUP BY 
					LN80.BF_SSN,
					LN80.LD_BIL_CRT,
					LN80.LN_SEQ_BIL_WI_DTE
			) BIL_TOT
				ON BL10.BF_SSN = BIL_TOT.BF_SSN
				AND BL10.LD_BIL_CRT = BIL_TOT.LD_BIL_CRT
				AND BL10.LN_SEQ_BIL_WI_DTE = BIL_TOT.LN_SEQ_BIL_WI_DTE
			LEFT JOIN 
			(
				SELECT
					BF_SSN,
					MAX(LD_ATY_REQ_RCV) AS LD_ATY_REQ_RCV
				FROM
					PKUB.AY10_BR_LON_ATY 
				WHERE 
					PF_REQ_ACT IN ('BILLS','BILLC')
					AND LC_STA_ACTY10 = 'A'
				GROUP BY 
					BF_SSN
			) MAX_BARC
				ON BL10.BF_SSN = MAX_BARC.BF_SSN
				 	/*filtering for valid addresses for either borrowers or endorsers, actual address information gathered later*/	
			LEFT JOIN PKUB.LN16_LON_DLQ_HST LN16
				ON LN10.BF_SSN = LN16.BF_SSN
				AND LN10.LN_SEQ = LN16.LN_SEQ
				AND LN16.LC_STA_LON16 = '1'
			LEFT JOIN 
			(
				SELECT
					BF_SSN,
					LN_SEQ,
					SUM(LA_DSB) - SUM(COALESCE(LA_DSB_CAN,0)) AS ORG_PRI
				FROM
					PKUB.LN15_DSB 
				GROUP BY
					BF_SSN,
					LN_SEQ
			) LN15
				ON LN10.BF_SSN = LN15.BF_SSN
				AND LN10.LN_SEQ = LN15.LN_SEQ
			LEFT JOIN 
			(
				SELECT
					BL10.BF_SSN,
					SUM(LA_BIL_CUR_DU)- SUM(COALESCE(LA_TOT_BIL_STS,0)) AS NEXT_PMT_DUE,
					MAX(LD_BIL_DU_LON) AS NEXT_PMT_DUE_DATE
				FROM
					PKUB.BL10_BR_BIL BL10
					INNER JOIN 
					(
						SELECT 
							MAX_DTE.BF_SSN,
							MIN(MAX_DTE.LD_BIL_DU) AS LD_BIL_DU
						FROM 
						(
							SELECT
								BL10.BF_SSN,
								MAX(BL10.LD_BIL_DU) AS LD_BIL_DU
							FROM
								PKUB.BL10_BR_BIL BL10
								INNER JOIN PKUB.LN80_LON_BIL_CRF LN80
									ON BL10.BF_SSN = LN80.BF_SSN
									AND BL10.LD_BIL_CRT = LN80.LD_BIL_CRT
									AND BL10.LN_SEQ_BIL_WI_DTE = LN80.LN_SEQ_BIL_WI_DTE
									AND LN80.LC_STA_LON80 = 'A'
								INNER JOIN PKUB.LN10_LON LN10
									ON LN80.BF_SSN = LN10.BF_SSN
									AND LN80.LN_SEQ = LN10.LN_SEQ
									AND LN10.LA_CUR_PRI > 0
							WHERE
								LC_IND_BIL_SNT = '5' 
								AND LC_STA_BIL10 = 'A'
							GROUP BY
								BL10.BF_SSN
						)MAX_DTE
						GROUP BY 
							MAX_DTE.BF_SSN
					) MIN_MAX_DTE
						ON MIN_MAX_DTE.BF_SSN = BL10.BF_SSN
						AND MIN_MAX_DTE.LD_BIL_DU = BL10.LD_BIL_DU
					INNER JOIN PKUB.LN80_LON_BIL_CRF LN80
						ON LN80.BF_SSN = BL10.BF_SSN
						AND LN80.LD_BIL_CRT = BL10.LD_BIL_CRT
						AND LN80.LN_SEQ_BIL_WI_DTE = BL10.LN_SEQ_BIL_WI_DTE
					INNER JOIN PKUB.LN10_LON LN10
						ON LN80.BF_SSN = LN10.BF_SSN
						AND LN80.LN_SEQ = LN10.LN_SEQ
						AND LN10.LA_CUR_PRI > 0
				WHERE
					DAYS(MIN_MAX_DTE.LD_BIL_DU) > (DAYS(CURRENT_DATE) + 23)
					AND LN80.LC_STA_LON80 = 'A'
					AND BL10.LC_IND_BIL_SNT = '5'
				GROUP BY
					BL10.BF_SSN
			)PAID_AHEAD
				ON PAID_AHEAD.BF_SSN = BL10.BF_SSN
			LEFT JOIN
			(
				SELECT
					BR30.BF_SSN,
					LN83.LN_SEQ,
					MAX(BR30.BN_EFT_SEQ) AS BN_EFT_SEQ
				FROM
					PKUB.BR30_BR_EFT BR30
					INNER JOIN PKUB.LN83_EFT_TO_LON LN83
						ON LN83.BF_SSN = BR30.BF_SSN 
						AND LN83.BN_EFT_SEQ = BR30.BN_EFT_SEQ
				WHERE
					BR30.BC_EFT_STA = 'A'
				GROUP BY
					BR30.BF_SSN,
					LN83.LN_SEQ
			)BR30
				ON BR30.BF_SSN = LN80.BF_SSN
				AND BR30.LN_SEQ = LN80.LN_SEQ
		WHERE 
			BL10.LC_STA_BIL10 = 'A'
			AND LN80.LC_STA_LON80 = 'A'
			AND LN10.LA_CUR_PRI > 0
			AND LN10.LC_STA_LON10 = 'R'
			AND BL10.LD_BIL_CRT >= &_8DAYSAGO
			AND COALESCE(MAX_BARC.LD_ATY_REQ_RCV,&_8DAYSAGO) < BL10.LD_BIL_CRT
			AND BL10.LC_IND_BIL_SNT NOT IN ('N','9','0','5','6','')

		FOR READ ONLY WITH UR
		)
;

 /*retrieve endorser addresses*/
CREATE TABLE EDR AS
	SELECT DISTINCT 
		BIL.BOR_ACC_ID,
		ENDORSERS.*
	FROM 
		BIL 
		INNER JOIN CONNECTION TO DB2 
		(
			SELECT	
				LN20.BF_SSN,
				LN20.LN_SEQ,
				LN20.LF_EDS,
				PD10.DF_SPE_ACC_ID,
				PD10.DM_PRS_1,
				PD10.DM_PRS_MID,
				PD10.DM_PRS_LST,
				PD30.DX_STR_ADR_1,
				PD30.DX_STR_ADR_2,
				PD30.DM_CT,
				PD30.DC_DOM_ST,
				PD30.DF_ZIP_CDE,
				PD30.DM_FGN_CNY,
				PD30.DC_ADR,
				'1' AS EDS_IND,
				CASE
					WHEN PD30.DC_ADR = 'B' THEN 1
					WHEN PD30.DC_ADR = 'L' THEN 2
					ELSE 3
				END AS ADR_SEQ
			FROM	
				PKUB.LN20_EDS LN20
				INNER JOIN PKUB.PD10_PRS_NME PD10
					ON LN20.LF_EDS = PD10.DF_PRS_ID
				INNER JOIN PKUB.PD30_PRS_ADR PD30
					ON LN20.LF_EDS = PD30.DF_PRS_ID
			WHERE	
				PD30.DI_VLD_ADR = 'Y'
				AND LN20.LC_STA_LON20 = 'A'
		) ENDORSERS
			ON BIL.BF_SSN = ENDORSERS.BF_SSN
			AND BIL.LN_SEQ = ENDORSERS.LN_SEQ
	ORDER BY 
		BF_SSN,
		LN_SEQ,
		LF_EDS,
		ADR_SEQ
;

CREATE TABLE BOR AS
	SELECT DISTINCT 
		BIL.BOR_ACC_ID,
		BORROWERS.*
	FROM 
		BIL 
		INNER JOIN CONNECTION TO DB2 
		(
			SELECT	
				PD10.DF_PRS_ID AS BF_SSN,
				PD10.DF_SPE_ACC_ID,
				PD10.DM_PRS_1,
				PD10.DM_PRS_MID,
				PD10.DM_PRS_LST,
				PD30.DX_STR_ADR_1,
				PD30.DX_STR_ADR_2,
				PD30.DM_CT,
				PD30.DC_DOM_ST,
				PD30.DF_ZIP_CDE,
				PD30.DM_FGN_CNY,
				PD30.DC_ADR,
				'0' AS EDS_IND,
				CASE
					WHEN PD30.DC_ADR = 'B' THEN 1
					WHEN PD30.DC_ADR = 'L' THEN 2
					ELSE 3
				END AS ADR_SEQ
			FROM	
				PKUB.PD10_PRS_NME PD10
				INNER JOIN PKUB.PD30_PRS_ADR PD30
					ON PD10.DF_PRS_ID = PD30.DF_PRS_ID
			WHERE	
				PD30.DI_VLD_ADR = 'Y'
		) BORROWERS
			ON BIL.BF_SSN = BORROWERS.BF_SSN
	ORDER BY 
		BF_SSN,
		ADR_SEQ
;

/*NEW LOGIC FOR LAST PAYMENT AMOUNT*/
CREATE TABLE LastFinancial AS
	SELECT 
		LastPay.*
	FROM 
		BIL Bill
		INNER JOIN CONNECTION TO DB2 
		(
			SELECT 
				LN94.*
			FROM 
				PKUB.LN90_FIN_ATY LN90
				INNER JOIN 
				(
					SELECT 
						BF_SSN,
						MAX(LD_FAT_EFF) AS LD_FAT_EFF
					FROM 
						PKUB.LN90_FIN_ATY 
					WHERE 
						LC_STA_LON90 = 'A'
						AND LC_FAT_REV_REA = ''
						AND PC_FAT_TYP = '10'
						AND PC_FAT_SUB_TYP IN ('10','11','12','35','41')
					GROUP BY 
						BF_SSN
				) MaxEffective
					ON LN90.BF_SSN = MaxEffective.BF_SSN
					AND LN90.LD_FAT_EFF = MaxEffective.LD_FAT_EFF
				INNER JOIN PKUB.LN94_LON_PAY_FAT LN94
					ON LN90.BF_SSN = LN94.BF_SSN
					AND LN90.LN_SEQ = LN94.LN_SEQ
					AND LN90.LN_FAT_SEQ = LN94.LN_FAT_SEQ
			WHERE 
				LC_STA_LON90 = 'A'
				AND LC_FAT_REV_REA = ''
				AND PC_FAT_TYP = '10'
				AND PC_FAT_SUB_TYP IN ('10','11','12','35','41')

				FOR READ ONLY WITH UR
		) LastPay
			ON Bill.BF_SSN = LastPay.BF_SSN
			AND Bill.LN_SEQ = LastPay.LN_SEQ
	ORDER BY 
		LastPay.BF_SSN,
		LastPay.LN_SEQ,
		LastPay.LD_RMT_BCH_INI,
		LastPay.LC_RMT_BCH_SRC_IPT,
		LastPay.LN_RMT_BCH_SEQ,
		LastPay.LN_RMT_SEQ
;
DISCONNECT FROM DB2;

/*add in loan type description from progrevw table*/
CREATE TABLE BilWithLoanType AS
	SELECT DISTINCT
		BIL.*,
		PVW.LN_TYPE_DESC
	FROM 
		BIL
		LEFT JOIN PROGREVW.FED_LOAN_TABLE PVW
			ON BIL.IC_LON_PGM = PVW.LN_TYP
;
QUIT;

/*Get primary key for last payment for a loan*/
DATA LastFinancial;
	SET LastFinancial;
	BY  BF_SSN 
		LN_SEQ 
		LD_RMT_BCH_INI 
		LC_RMT_BCH_SRC_IPT 
		LN_RMT_BCH_SEQ 
		LN_RMT_SEQ;
	IF LAST.LN_SEQ;
RUN;

PROC SQL STIMER ;
CONNECT TO DB2 (DATABASE=&DB);
CREATE TABLE LST_PMT AS
	SELECT 
		LastPayment.*
	FROM 
		LastFinancial LastPay
		INNER JOIN CONNECTION TO DB2 
		(
			SELECT 
				LN94.BF_SSN,
				LN94.LN_SEQ,
				LN94.LN_FAT_SEQ,
				LN94.LD_RMT_BCH_INI,
				LN94.LC_RMT_BCH_SRC_IPT,
				LN94.LN_RMT_BCH_SEQ,
				LN94.LN_RMT_SEQ,
				LN94.LN_RMT_ITM,
				LN94.LN_RMT_ITM_SEQ,
				LN90.LD_FAT_EFF,
				ABS(COALESCE(LN90.LA_FAT_CUR_PRI,0)) AS LA_FAT_CUR_PRI,
				ABS(COALESCE(LN90.LA_FAT_NSI,0)) AS LA_FAT_NSI,
				ABS(COALESCE(LN90.LA_FAT_LTE_FEE,0)) AS LA_FAT_LTE_FEE
			FROM 
				PKUB.LN90_FIN_ATY LN90
				INNER JOIN PKUB.LN94_LON_PAY_FAT LN94
					ON LN90.BF_SSN = LN94.BF_SSN
					AND LN90.LN_SEQ = LN94.LN_SEQ
					AND LN90.LN_FAT_SEQ = LN94.LN_FAT_SEQ

			FOR READ ONLY WITH UR

		) LastPayment
			ON LastPay.BF_SSN = LastPayment.BF_SSN
			AND LastPay.LN_SEQ = LastPayment.LN_SEQ
			AND LastPay.LN_FAT_SEQ = LastPayment.LN_FAT_SEQ
			AND LastPay.LD_RMT_BCH_INI = LastPayment.LD_RMT_BCH_INI
			AND LastPay.LC_RMT_BCH_SRC_IPT = LastPayment.LC_RMT_BCH_SRC_IPT
			AND LastPay.LN_RMT_BCH_SEQ = LastPayment.LN_RMT_BCH_SEQ
			AND LastPay.LN_RMT_SEQ = LastPayment.LN_RMT_SEQ
			AND LastPay.LN_RMT_ITM = LastPayment.LN_RMT_ITM
			AND LastPay.LN_RMT_ITM_SEQ = LastPayment.LN_RMT_ITM_SEQ
	;
	DISCONNECT FROM DB2;
QUIT;

/*get aggregate amounts paid*/
PROC SQL;
CONNECT TO DB2 (DATABASE=&DB);
CREATE TABLE AGGS AS
	SELECT
		LN90.*
	FROM 
		CONNECTION TO DB2 
		(
			SELECT DISTINCT
				LN90.BF_SSN,
				LN90.LN_SEQ,
				SUM(COALESCE(LN90.LA_FAT_CUR_PRI,0)) AS LA_AGG_PRI,
				SUM(COALESCE(LN90.LA_FAT_NSI,0)) AS LA_AGG_INT,
				SUM(COALESCE(LN90.LA_FAT_CUR_PRI,0) + COALESCE(LN90.LA_FAT_NSI,0)) AS LA_AGG_TOT
			FROM
				PKUB.LN90_FIN_ATY LN90
			WHERE
				LN90.PC_FAT_TYP = '10'
				AND LN90.LC_FAT_REV_REA = ''
				AND LN90.LC_STA_LON90 = 'A'
			GROUP BY
				LN90.BF_SSN,
				LN90.LN_SEQ
		) LN90
;
	DISCONNECT FROM DB2;
QUIT;

/*add aggregate amounts paid to main data set*/
PROC SQL;
CREATE TABLE AggregatedBilling AS
	SELECT DISTINCT
		BilWithLoanType.*,
		AGGS.LA_AGG_PRI * -1 AS LA_AGG_PRI,
		AGGS.LA_AGG_INT * -1 AS LA_AGG_INT,
		AGGS.LA_AGG_TOT * -1 AS LA_AGG_TOT
	FROM
		BilWithLoanType
		LEFT JOIN AGGS
			ON BilWithLoanType.BF_SSN = AGGS.BF_SSN
			AND BilWithLoanType.LN_SEQ = AGGS.LN_SEQ
	;
QUIT;

ENDRSUBMIT;
DATA AggregatedBilling; SET LEGEND.AggregatedBilling; RUN;
DATA EDR; SET LEGEND.EDR; RUN;
DATA BOR; SET LEGEND.BOR; RUN;
DATA LST_PMT; SET LEGEND.LST_PMT; RUN;


/*Choosing which address to use 1=B, 2=H, 3=A*/
DATA EDR;	
	SET EDR;
	BY  BF_SSN 
		LN_SEQ 
		LF_EDS;
	IF FIRST.LF_EDS;
RUN;

DATA BOR;
	SET BOR;
	BY BF_SSN;
	IF FIRST.BF_SSN;
RUN;


/*Preparing Borrower/Address Demographic Information*/
PROC SQL;
CREATE TABLE TEMP_BOR_DEMO AS
	SELECT 
		BOR.*,
		BIL.LN_SEQ,
		BIL.LD_BIL_CRT,
		BIL.LN_SEQ_BIL_WI_DTE
	FROM 
		BOR
		INNER JOIN AggregatedBilling BIL
			ON BOR.BF_SSN = BIL.BF_SSN
	;
QUIT;

/*Preparing Endorser/Address Demographic Information*/
PROC SQL;
CREATE TABLE TEMP_EDR_DEMO AS
	SELECT 
		EDA.*,
		BIL.LD_BIL_CRT,
		BIL.LN_SEQ_BIL_WI_DTE
	FROM
		EDR EDA
		INNER JOIN AggregatedBilling BIL
			ON EDA.BF_SSN = BIL.BF_SSN
			AND EDA.LN_SEQ = BIL.LN_SEQ
	;
QUIT;

/*Combine Address Info*/
DATA COMBO_DEMO;
	SET TEMP_BOR_DEMO 
		TEMP_EDR_DEMO;
	IF EDS_IND = 1 
	THEN DF_PRS_ID = LF_EDS;
	ELSE DF_PRS_ID = BF_SSN;
RUN;

/*Keyline Encryption*/
%MACRO KeylineCreation(TBL);
*CALCULATE KEYLINE;
DATA &TBL (DROP = KEYSSN MODAY KEYLINE CHKDIG DIG I 
	CHKDIG CHK1 CHK2 CHK3 CHKDIGIT CHECK);
SET &TBL;
	KEYSSN = TRANSLATE(DF_PRS_ID,'MYLAUGHTER','0987654321');
	MODAY = PUT(DATE(),MMDDYYN4.);
	KEYLINE = "P"||KEYSSN||MODAY||DC_ADR;
	CHKDIG = 0;
	LENGTH DIG $2.;
	DO I = 1 TO LENGTH(KEYLINE);
		IF I/2 NE ROUND(I/2,1) 
			THEN DIG = PUT(INPUT(SUBSTR(KEYLINE,I,1),BITS4.4) * 2, 2.);
		ELSE DIG = PUT(INPUT(SUBSTR(KEYLINE,I,1),BITS4.4), 2.);
		IF SUBSTR(DIG,1,1) = " " 
			THEN CHKDIG = CHKDIG + INPUT(SUBSTR(DIG,2,1),1.);
			ELSE DO;
				CHK1 = INPUT(SUBSTR(DIG,1,1),1.);
				CHK2 = INPUT(SUBSTR(DIG,2,1),1.);
				IF CHK1 + CHK2 >= 10
					THEN DO;
						CHK3 = PUT(CHK1 + CHK2,2.);
						CHK1 = INPUT(SUBSTR(CHK3,1,1),1.);
						CHK2 = INPUT(SUBSTR(CHK3,2,1),1.);
					END;
				CHKDIG = CHKDIG + CHK1 + CHK2;
			END;
	END;
	CHKDIGIT = 10 - INPUT(SUBSTR((RIGHT(PUT(CHKDIG,3.))),3,1),3.);
	IF CHKDIGIT = 10 THEN CHKDIGIT = 0;
	CHECK = PUT(CHKDIGIT,1.);
	ACSKEY = "#"||KEYLINE||CHECK||"#";
RUN;
%MEND KeylineCreation;

%KeylineCreation(COMBO_DEMO);

PROC SQL;
CREATE TABLE FOR_SCAN AS
	SELECT DISTINCT 
		BF_SSN,
		LD_BIL_CRT,
		LN_SEQ_BIL_WI_DTE,
		SUM(COALESCE(LA_BIL_DU_PRT,0) * 100) AS AMTDU,
		BOR_ACC_ID
	FROM 
		AggregatedBilling
	GROUP BY
		BF_SSN,
		LD_BIL_CRT,
		LN_SEQ_BIL_WI_DTE,
		BOR_ACC_ID
	;
QUIT;

DATA SCANLINE/*(KEEP=SCANLINE BF_SSN LD_BIL_CRT LN_SEQ_BIL_WI_DTE)*/;
	SET FOR_SCAN;
	JUL_DT = PUT(TODAY(),JULIAN7.);
	SEQ = PUT(LN_SEQ_BIL_WI_DTE,Z2.);
	ACCT = BOR_ACC_ID;
	TEN = '10';
	AMT = PUT(AMTDU,Z8.);
	P30_45 = '0700000000000000';
	CUMULATIVE_WEIGHT_SUM = 0;
	SCAN = CATT(JUL_DT,SEQ,ACCT,TEN,AMT,P30_45);
	SCAN_RIGHT = STRIP(REVERSE(SCAN));
	DO I = 1 TO LENGTH(SCAN);
		I_DIG = SUBSTR(SCAN_RIGHT,I,1); *GET DIGIT TO WEIGHT;
		WEIGHT = 2 - MOD(I,2); *GET WEIGHT ;
		APPLIED_WEIGHT = I_DIG * WEIGHT; *APPLY WEIGHT;
		IF APPLIED_WEIGHT > 9 THEN APPLIED_WEIGHT = APPLIED_WEIGHT - 9; *ACCOUNT FOR WEIGHT > 9;
		CUMULATIVE_WEIGHT_SUM+APPLIED_WEIGHT;*ACCUMULATE THE APPLIED WIEGHTS FOR FINAL CALC;
	END;
	CKDIG = MOD(CUMULATIVE_WEIGHT_SUM,10);
	IF CKDIG > 0 THEN CKDIG = 10 - CKDIG;
	SCANLINE = CATT(SCAN,CKDIG);
RUN;

/*COMBINE ALL TABLES IN PREPARATION FOR FINAL OUTPUT*/
PROC SQL;
CREATE TABLE BIL_FINAL AS
	SELECT DISTINCT
		CD.ACSKEY,
		CD.BOR_ACC_ID,
		CD.DM_PRS_1,
		CD.DM_PRS_MID,
		CD.DM_PRS_LST,
		CD.DX_STR_ADR_1,
		CD.DX_STR_ADR_2,
		CD.DM_CT,
		CD.DC_DOM_ST,
		CD.DF_ZIP_CDE,
		CD.DM_FGN_CNY,
		BIL.IC_LON_PGM,
		BIL.LN_TYPE_DESC,
		CD.LN_SEQ,
		BIL.LD_LON_1_DSB,
		BIL.LR_INT_BIL,
		BIL.ORG_PRI,
		COALESCE(BIL.LA_CUR_PRN_BIL,0) + COALESCE(BIL.WA_TOT_BRI_OTS,0) + COALESCE(BIL.LA_LTE_FEE_OTS_PRT,0) AS LA_CUR_PRN_BIL,
		BIL.LN_DLQ_MAX,
		CD.LD_BIL_CRT,
		LP.LD_FAT_EFF,
		LP.LA_FAT_CUR_PRI,
		LP.LA_FAT_NSI,
		TA.TAP,
		BIL.LD_BIL_DU,
		BIL.LA_BIL_PAS_DU,
		BIL.LA_TOT_INT_DU,
		BIL.LA_BIL_DU_PRT,
		BIL.LA_CUR_INT_DU,
		BIL.LA_BIL_PAS_DU_LN,
		BIL.LA_TOT_INT_DU_LN,
		BIL.LA_CUR_INT_DU_LN,
		CASE
			WHEN CD.EDS_IND = '1' THEN CD.DF_SPE_ACC_ID
			ELSE ' '
		END AS LF_EDS,
		CD.EDS_IND AS IS_EDR,
		SC.SCANLINE AS SCANLN,
		CD.DC_DOM_ST AS STATE_IND,
		BIL.LC_IND_BIL_SNT,
		BIL.LC_BIL_TYP,
		BIL.LD_LON_ACL_ADD,
		CNT.CNT_PGM,
		CNT.CNT_LN,
		CD.LN_SEQ_BIL_WI_DTE,
		BIL.LC_LON_SND_CHC,
		BIL.LA_AGG_PRI,
		BIL.LA_AGG_INT,
		BIL.LA_AGG_TOT,
		BILL_AGG.WA_TOT_BRI_OTS,
		LP_AGG.ACCT_LA_FAT_CUR_PRI,
		LP_AGG.ACCT_LA_FAT_NSI,
		LP_AGG.ACCT_TAP,
		BILL_AGG.ACCT_LA_AGG_PRI,
		BILL_AGG.ACCT_LA_AGG_INT,
		BILL_AGG.ACCT_LA_AGG_TOT,
		BILL_AGG.AGG_TOT_PRN_BAL,
		LP.LA_FAT_LTE_FEE,
		STRIP(CD.DM_CT)||', '||STRIP(CD.DC_DOM_ST)||' '||STRIP(CD.DF_ZIP_CDE) AS CityStateZip,
		BIL.NEXT_PMT_DUE,
		BIL.NEXT_PMT_DUE_DATE,
		BIL.ON_ACH
	FROM 
		COMBO_DEMO CD
		LEFT JOIN AggregatedBilling BIL
			ON CD.BF_SSN = BIL.BF_SSN
			AND CD.LN_SEQ = BIL.LN_SEQ
			AND CD.LD_BIL_CRT = BIL.LD_BIL_CRT
			AND CD.LN_SEQ_BIL_WI_DTE = BIL.LN_SEQ_BIL_WI_DTE
		LEFT JOIN 
		(
			SELECT /*This is basically doing a window function on everything but we need LN_SEQ for later*/
				BillingAgg.BF_SSN,
				BillingAgg.LN_SEQ,
				BillingAgg.LD_BIL_CRT,
				BillingAgg.LN_SEQ_BIL_WI_DTE,
				SUM(BillingAgg.LA_AGG_PRI) AS ACCT_LA_AGG_PRI,
				SUM(BillingAgg.LA_AGG_INT) AS ACCT_LA_AGG_INT,
				SUM(BillingAgg.LA_AGG_TOT) AS ACCT_LA_AGG_TOT,
				SUM(BillingAgg.LA_CUR_PRN_BIL) AS AGG_TOT_PRN_BAL,
				SUM(BillingAgg.WA_TOT_BRI_OTS) AS WA_TOT_BRI_OTS
			FROM
				AggregatedBilling BillingAgg
			GROUP BY
				BillingAgg.BF_SSN,
				BillingAgg.LD_BIL_CRT,
				BillingAgg.LN_SEQ_BIL_WI_DTE
		) BILL_AGG 
			ON BILL_AGG.BF_SSN = BIL.BF_SSN
			AND BILL_AGG.LN_SEQ = BIL.LN_SEQ
			AND BILL_AGG.LD_BIL_CRT = BIL.LD_BIL_CRT
			AND BILL_AGG.LN_SEQ_BIL_WI_DTE = BIL.LN_SEQ_BIL_WI_DTE
		LEFT JOIN 
		(
			SELECT /*This is basically doing a window function on everything but we need LN_SEQ for later*/
				LPAgg.BF_SSN,
				LPAgg.LN_SEQ,
				SUM(LPAgg.LA_FAT_CUR_PRI) AS ACCT_LA_FAT_CUR_PRI,
				SUM(LPAgg.LA_FAT_NSI) AS ACCT_LA_FAT_NSI,
				SUM(LPAgg.LA_FAT_CUR_PRI + LPAgg.LA_FAT_NSI + LPAgg.LA_FAT_LTE_FEE) AS ACCT_TAP
			FROM
				LST_PMT LPAgg
			GROUP BY
				LPAgg.BF_SSN
		) LP_AGG 
			ON LP_AGG.BF_SSN = BIL.BF_SSN
			AND LP_AGG.LN_SEQ = BIL.LN_SEQ
		LEFT JOIN SCANLINE SC
			ON CD.BF_SSN = SC.BF_SSN
			AND CD.LD_BIL_CRT = SC.LD_BIL_CRT
			AND CD.LN_SEQ_BIL_WI_DTE = SC.LN_SEQ_BIL_WI_DTE
		LEFT JOIN 
		(
			SELECT 
				GP.DF_PRS_ID,
				GP.BF_SSN,
				GP.LD_BIL_CRT,
				GP.LN_SEQ_BIL_WI_DTE,
				COUNT(DISTINCT GP.IC_LON_PGM) AS CNT_PGM,
				COUNT(*) AS CNT_LN
			FROM 
			(
				SELECT DISTINCT
					CD.BF_SSN,
					CD.LN_SEQ,
					CD.LD_BIL_CRT,
					CD.LN_SEQ_BIL_WI_DTE,
					CD.DF_PRS_ID,
					B.IC_LON_PGM
				FROM 
					COMBO_DEMO CD
					INNER JOIN AggregatedBilling B
						ON CD.BF_SSN = B.BF_SSN
						AND CD.LN_SEQ = B.LN_SEQ
			) GP
			GROUP BY 
				GP.DF_PRS_ID,
				GP.BF_SSN,
				GP.LD_BIL_CRT,
				GP.LN_SEQ_BIL_WI_DTE
		) CNT
			ON CD.DF_PRS_ID = CNT.DF_PRS_ID
			AND CD.BF_SSN = CNT.BF_SSN
			AND CD.LD_BIL_CRT = CNT.LD_BIL_CRT
			AND CD.LN_SEQ_BIL_WI_DTE = CNT.LN_SEQ_BIL_WI_DTE
		LEFT JOIN LST_PMT LP
			ON CD.BF_SSN = LP.BF_SSN
			AND CD.LN_SEQ = LP.LN_SEQ
		LEFT JOIN 
		(
			SELECT 
				CD.DF_PRS_ID,
				CD.BF_SSN,
				CD.LD_BIL_CRT,
				CD.LN_SEQ_BIL_WI_DTE,
				CD.LN_SEQ,
				LP.LA_FAT_CUR_PRI + LP.LA_FAT_NSI + LP.LA_FAT_LTE_FEE AS TAP 
			FROM 
				COMBO_DEMO CD
				INNER JOIN LST_PMT LP
					ON CD.BF_SSN = LP.BF_SSN
					AND CD.LN_SEQ = LP.LN_SEQ	
		) TA
			ON CD.DF_PRS_ID = TA.DF_PRS_ID
			AND CD.BF_SSN = TA.BF_SSN
			AND CD.LD_BIL_CRT = TA.LD_BIL_CRT
			AND CD.LN_SEQ_BIL_WI_DTE = TA.LN_SEQ_BIL_WI_DTE
			AND CD.LN_SEQ = TA.LN_SEQ
;
QUIT;

/*assign file*/
DATA BIL_FINAL_WITH_FILE;
	SET BIL_FINAL;
	LENGTH ORIGINAL_FILE ACTUAL_FILE $ 3;

	IF LC_LON_SND_CHC ^= 'Y' THEN
		DO;
			IF LC_IND_BIL_SNT IN ('1','2','4','7','F','R') AND LC_BIL_TYP = 'P' THEN 
				DO; 
					IF ON_ACH = 1 AND  IS_EDR ^= '1' THEN ORIGINAL_FILE = 'R3';
					ELSE IF ON_ACH = 1 AND  IS_EDR = '1' THEN ORIGINAL_FILE = 'R11';
					ELSE IF NEXT_PMT_DUE ^= . AND IS_EDR ^= '1' AND LA_BIL_DU_PRT < .01 THEN ORIGINAL_FILE = 'R22';
					ELSE IF NEXT_PMT_DUE ^= . AND IS_EDR = '1' AND LA_BIL_DU_PRT < .01 THEN ORIGINAL_FILE = 'R23';
					ELSE IF LN_DLQ_MAX < 16 AND IS_EDR ^= '1' THEN ORIGINAL_FILE = 'R2';
					ELSE IF LN_DLQ_MAX < 16 AND IS_EDR = '1' THEN ORIGINAL_FILE = 'R10';
					ELSE IF LN_DLQ_MAX >= 16 AND IS_EDR ^= '1' THEN ORIGINAL_FILE = 'R4';
					ELSE IF LN_DLQ_MAX >= 16 AND IS_EDR = '1' THEN ORIGINAL_FILE = 'R12';
				END;
			ELSE IF LC_IND_BIL_SNT = 'G' AND LC_BIL_TYP = 'P' THEN
				DO;
					IF IS_EDR ^= '1' THEN ORIGINAL_FILE = 'R3';
					ELSE ORIGINAL_FILE = 'R11';
				END;
			ELSE IF LC_IND_BIL_SNT = 'T' AND LC_BIL_TYP = 'C' THEN
				DO;
					IF IS_EDR ^= '1' THEN ORIGINAL_FILE = 'R5';
					ELSE ORIGINAL_FILE = 'R13';
				END;
			ELSE IF LC_BIL_TYP = 'I' THEN
				DO;
					IF IS_EDR ^= '1' THEN ORIGINAL_FILE = 'R16';
					ELSE ORIGINAL_FILE = 'R17';
				END;
			ELSE IF LC_BIL_TYP = 'C' THEN
				DO;
					IF IS_EDR ^= '1' THEN ORIGINAL_FILE = 'R18';
					ELSE ORIGINAL_FILE = 'R19';
				END;
		END;
	ELSE IF LC_LON_SND_CHC = 'Y' THEN
		DO;
			IF IS_EDR ^= '1' THEN ORIGINAL_FILE = 'R20';
			ELSE ORIGINAL_FILE = 'R21';			
		END;

/*	change actual file if load was added the day before*/
	IF LD_LON_ACL_ADD = TODAY() - 1 AND IS_EDR ^= '1' THEN ACTUAL_FILE = 'R9';
	ELSE IF LD_LON_ACL_ADD = TODAY() - 1 AND IS_EDR = '1' THEN ACTUAL_FILE = 'R15';
	ELSE ACTUAL_FILE = ORIGINAL_FILE;
RUN;

PROC SORT DATA=BIL_FINAL_WITH_FILE; 
	BY DC_DOM_ST BOR_ACC_ID; 
RUN;

%MACRO BillCreation(RNUM);
PROC SORT DATA=BIL_FINAL_WITH_FILE OUT=RDS;
	BY DC_DOM_ST BOR_ACC_ID LD_BIL_CRT LN_SEQ_BIL_WI_DTE LN_SEQ;
	WHERE ACTUAL_FILE = "R&RNUM";
RUN;

DATA _NULL_;
	SET WORK.RDS;
 	FILE REPORT&RNUM DELIMITER=',' DSD DROPOVER LRECL=32767;
	RETAIN BOR_CNT 0;
		BY DC_DOM_ST BOR_ACC_ID;
		IF FIRST.BOR_ACC_ID THEN BOR_CNT +1;
	%IF &RNUM = 5 %THEN %DO;
		LA_BIL_DU_PRT = LA_BIL_DU_PRT - LA_BIL_PAS_DU;
		LA_BIL_PAS_DU = 0;
	%END;
 	IF _N_ = 1 THEN        /* WRITE COLUMN NAMES OR LABELS */
		  DO;
		    PUT
			   "BOR_CNT"	
			','
		       "ACSKEY"
		    ','
		       "DF_SPE_ACC_ID"
		    ','
		       "DM_PRS_1"
		    ','
		       "DM_PRS_MID"
		    ','
		       "DM_PRS_LST"
		    ','
		       "DX_STR_ADR_1"
		    ','
		       "DX_STR_ADR_2"
		    ','
		       "DM_CT"
		    ','
		       "DC_DOM_ST"
		    ','
		       "DF_ZIP_CDE"
		    ','
		       "DM_FGN_CNY"
		    ','
		       "IC_LON_PGM"
		    ','
		       "LN_SEQ"
		    ','
		       "LD_LON_1_DSB"
		    ','
		       "LR_INT_BIL"
		    ','
		       "ORG_PRI"
		    ','
		       "LA_CUR_PRN_BIL"
		    ','
		       "LN_DLQ_MAX"
		    ','
		       "LD_BIL_CRT"
		    ','
		       "LD_FAT_EFF"
		    ','
		       "LA_FAT_CUR_PRI"
		    ','
		       "LA_FAT_NSI"
		    ','
		       "TAP"
		    ','
		       "LD_BIL_DU"
		    ','
		       "LA_BIL_PAS_DU"
		    ','
		       "LA_BIL_DU_PRT"
		    ','
		       "LF_EDS"
		    ','
		       "SCANLN"
		    ','
		       "STATE_IND"
			@
			;
			IF &RNUM IN (9,15) THEN PUT ',ORIGINAL_FILE' @;
			PUT
			','
		       "LC_BIL_TYP"
			','
			   "LN_SEQ_BIL_WI_DTE"
		    ','
		       "LA_AGG_PRI"
		    ','
		       "LA_AGG_INT"
		    ','
		       "LA_AGG_TOT"
		    ','
		       "LA_CUR_INT_DU"
			','
			   "WA_TOT_BRI_OTS"
			','
			   "ACCT_LA_FAT_CUR_PRI"
			','
			   "ACCT_LA_FAT_NSI"
			','
			   "ACCT_TAP"
			','
			   "ACCT_LA_AGG_PRI"
			','
			   "ACCT_LA_AGG_INT"
			','
			   "ACCT_LA_AGG_TOT"
			','
		       "AGG_TOT_PRN_BAL"
			','
			   "LA_FAT_LTE_FEE"
			','
				"CityStateZip"
			','
				"NEXT_PMT_DUE"
			','
				"NEXT_PMT_DUE_DATE"
			;
		END;

	FORMAT BOR_CNT BEST12.;
    FORMAT ACSKEY $18. ;
    FORMAT BOR_ACC_ID $10. ;
    FORMAT DM_PRS_1 $13. ;
    FORMAT DM_PRS_MID $13. ;
    FORMAT DM_PRS_LST $23. ;
    FORMAT DX_STR_ADR_1 $30. ;
    FORMAT DX_STR_ADR_2 $30. ;
    FORMAT DM_CT $20. ;
    FORMAT DC_DOM_ST $2. ;
    FORMAT DF_ZIP_CDE $17. ;
    FORMAT DM_FGN_CNY $25. ;
    FORMAT IC_LON_PGM $50. ;
    FORMAT LN_SEQ 6. ;
    FORMAT LD_LON_1_DSB MMDDYY10. ;
    FORMAT LR_INT_BIL 7.3 ;
    FORMAT ORG_PRI DOLLAR10.2 ;
    FORMAT LA_CUR_PRN_BIL DOLLAR10.2 ;
    FORMAT LN_DLQ_MAX 5. ;
    FORMAT LD_BIL_CRT MMDDYY10. ;
    FORMAT LD_FAT_EFF MMDDYY10. ;
    FORMAT LA_FAT_CUR_PRI DOLLAR15.2 ;
    FORMAT LA_FAT_NSI DOLLAR15.2 ;
    FORMAT TAP DOLLAR15.2 ;
    FORMAT LD_BIL_DU MMDDYY10. ;
    FORMAT LA_BIL_PAS_DU DOLLAR9.2 ;
    FORMAT LA_BIL_DU_PRT DOLLAR15.2 ;
    FORMAT LF_EDS $10. ;
    FORMAT SCANLN $200. ;
    FORMAT STATE_IND $2. ;
    FORMAT ORIGINAL_FILE $2. ;
	FORMAT LA_AGG_PRI DOLLAR15.2 ;
	FORMAT LA_AGG_INT DOLLAR15.2 ;
	FORMAT LA_AGG_TOT DOLLAR15.2 ;
	FORMAT LA_CUR_INT_DU DOLLAR15.2 ;
	FORMAT WA_TOT_BRI_OTS DOLLAR15.2 ;
	FORMAT ACCT_LA_FAT_CUR_PRI DOLLAR15.2 ;
	FORMAT ACCT_LA_FAT_NSI DOLLAR15.2 ;
	FORMAT ACCT_TAP DOLLAR15.2 ;
	FORMAT ACCT_LA_AGG_PRI DOLLAR15.2 ;
	FORMAT ACCT_LA_AGG_INT DOLLAR15.2 ;
	FORMAT ACCT_LA_AGG_TOT DOLLAR15.2 ;
	FORMAT AGG_TOT_PRN_BAL DOLLAR15.2 ;
	FORMAT LA_FAT_LTE_FEE DOLLAR15.2 ;
	FORMAT CityStateZip $45. ;
	FORMAT NEXT_PMT_DUE 15.2;
	FORMAT NEXT_PMT_DUE_DATE MMDDYY10.;

  DO;
	PUT BOR_CNT @;
    PUT ACSKEY $ @;
    PUT BOR_ACC_ID $ @;
    PUT DM_PRS_1 $ @;
    PUT DM_PRS_MID $ @;
    PUT DM_PRS_LST $ @;
    PUT DX_STR_ADR_1 $ @;
    PUT DX_STR_ADR_2 $ @;
    PUT DM_CT $ @;
    PUT DC_DOM_ST $ @;
    PUT DF_ZIP_CDE $ @;
    PUT DM_FGN_CNY $ @;
    PUT LN_TYPE_DESC $ @;
    PUT LN_SEQ @;
    PUT LD_LON_1_DSB @;
    PUT LR_INT_BIL @ ;
    PUT ORG_PRI @;
    PUT LA_CUR_PRN_BIL @;
    PUT LN_DLQ_MAX @;
    PUT LD_BIL_CRT @;
    PUT LD_FAT_EFF @;
    PUT LA_FAT_CUR_PRI @;
    PUT LA_FAT_NSI @;
    PUT TAP @;
    PUT LD_BIL_DU @;
    PUT LA_BIL_PAS_DU @;
    PUT LA_BIL_DU_PRT @;
    PUT LF_EDS $ @;
    PUT SCANLN $ @;
    PUT STATE_IND $ @;
	IF &RNUM IN (9,15) THEN PUT ORIGINAL_FILE $ @;
	PUT LC_BIL_TYP $ @;
    PUT LN_SEQ_BIL_WI_DTE $ @;
	PUT LA_AGG_PRI @;
	PUT LA_AGG_INT @;
	PUT LA_AGG_TOT @;
	PUT LA_CUR_INT_DU @;
	PUT WA_TOT_BRI_OTS @;
	PUT ACCT_LA_FAT_CUR_PRI @ ;
	PUT ACCT_LA_FAT_NSI @ ;
	PUT ACCT_TAP @ ;
	PUT ACCT_LA_AGG_PRI @ ;
	PUT ACCT_LA_AGG_INT @ ;
	PUT ACCT_LA_AGG_TOT @ ;
	PUT AGG_TOT_PRN_BAL @ ;
	PUT LA_FAT_LTE_FEE @ ;
	PUT CityStateZip @;
	PUT NEXT_PMT_DUE @;
	PUT NEXT_PMT_DUE_DATE;
  END;
RUN;
%MEND BillCreation;

%BillCreation(2);
%BillCreation(3);
%BillCreation(4);
%BillCreation(5);
%BillCreation(9);
%BillCreation(10);
%BillCreation(11);
%BillCreation(12);
%BillCreation(13);
%BillCreation(15);
%BillCreation(16);
%BillCreation(17);
%BillCreation(20);
%BillCreation(21);
%BillCreation(22);
%BillCreation(23);

