CREATE PROCEDURE [achrirdf].[GetACHPeriods]
	@POP [Population] READONLY,
	@LASTRUN VARCHAR(30)
AS

--Empty the DF_PERIOD processing table before starting
DELETE FROM [achrirdf].[ACH_PERIOD]

--Empty the LN50 processing table before starting
DELETE FROM [achrirdf].[LN83_Population]

--GET A COPY OF LN83 ADJUSTED FOR EFT_SEQ, COALESCING THE PERIODS BY SEQUENCE
INSERT INTO	
	[achrirdf].[LN83_Population]
SELECT
	LN83_MIN_EFT.BF_SSN,
	LN83_MIN_EFT.LN_SEQ,
	LN83_MIN_EFT.BN_EFT_SEQ,
	LN83_MIN_EFT.LD_EFT_EFF_BEG,
	LN83_MAX_END.LD_EFT_EFF_END
FROM
(
	SELECT
		LN83.BF_SSN,
		LN83.LN_SEQ,
		LN83.BN_EFT_SEQ,
		MIN(LN83.LD_EFT_EFF_BEG) AS LD_EFT_EFF_BEG
	FROM
		UDW..LN83_EFT_TO_LON LN83
	WHERE
		--RTRIM(LN83.LC_EFT_SUS_REA) = ''
	    RTRIM(LN83.LC_STA_LN83) IN ('A','I','D')
		AND
		(
			LN83.LD_EFT_EFF_BEG IS NOT NULL
			OR LN83.LD_EFT_EFF_END IS NOT NULL	
		)
		--AND BF_SSN = '005864917'
		--AND LN_SEQ = 1
	GROUP BY
		LN83.BF_SSN,
		LN83.LN_SEQ,
		LN83.BN_EFT_SEQ
) LN83_MIN_EFT
INNER JOIN
(
	SELECT
		LN83.BF_SSN,
		LN83.LN_SEQ,
		LN83.BN_EFT_SEQ,
		MAX(
		CASE WHEN LN83.LC_STA_LN83 = 'A'
		THEN
			COALESCE(LN83.LD_EFT_EFF_END,CAST('2099-12-31' AS DATE))
		ELSE
			LN83.LD_EFT_EFF_END
		END) AS LD_EFT_EFF_END --COALESCE NULL AS FAR IN THE FUTURE TO HANDLE ACTIVE ACH
	FROM
		UDW..LN83_EFT_TO_LON LN83
	WHERE
		--RTRIM(LN83.LC_EFT_SUS_REA) = ''
		RTRIM(LN83.LC_STA_LN83) IN ('A','I','D')
		AND
		(
			LN83.LD_EFT_EFF_BEG IS NOT NULL
			OR LN83.LD_EFT_EFF_END IS NOT NULL	
		)
		--AND BF_SSN = '005864917'
		--AND LN_SEQ = 1 
	GROUP BY
		LN83.BF_SSN,
		LN83.LN_SEQ,
		LN83.BN_EFT_SEQ
) LN83_MAX_END
	ON LN83_MIN_EFT.BF_SSN = LN83_MAX_END.BF_SSN
	AND LN83_MIN_EFT.LN_SEQ = LN83_MAX_END.LN_SEQ
	AND LN83_MIN_EFT.BN_EFT_SEQ = LN83_MAX_END.BN_EFT_SEQ
INNER JOIN @POP POP
	ON LN83_MIN_EFT.BF_SSN = POP.BF_SSN
	
--SELECT
--	BF_SSN
--FROM [achrirdf].[LN83_Population]
--GROUP BY
--	LN_SEQ,
--	BF_SSN
--HAVING
--	COUNT(*) > 4


DECLARE @While_Cond BIGINT = 1
DECLARE @Iter BIGINT = 1
;WITH First_ACH(BEGIN_DATE, END_DATE, BF_SSN, LN_SEQ, MIN_Begin, MAX_End) --First Contiguous ACH Period
AS
(
	SELECT
		*
	FROM
	(
		SELECT
			MIN(MIN_Date.BEGIN_DATE) AS BEGIN_DATE,
			MIN(MIN_Date.END_DATE) AS END_DATE,
			MIN_Date.BF_SSN,
			MIN_Date.LN_SEQ,
			MIN(MIN_Date.MIN_Begin) AS MIN_Begin,
			MIN(MIN_Date.MAX_End) AS MAX_End
		FROM
		(
			SELECT
				LN83.LD_EFT_EFF_BEG AS BEGIN_DATE,
				LN83.LD_EFT_EFF_END AS END_DATE, --COALESCING HANDLED AT A HIGHER LEVEL SEE [achrirdf].[LN83_Population]
				LN83.BF_SSN AS BF_SSN,
				LN83.LN_SEQ AS LN_SEQ,
				MIN_Begin = LN83.LD_EFT_EFF_BEG,
				MAX_End = LN83.LD_EFT_EFF_END
			FROM
				[achrirdf].[LN83_Population] LN83
		) MIN_Date
		GROUP BY
			MIN_Date.BF_SSN,
			MIN_Date.LN_SEQ
	) AS ACH
	WHERE
		ACH.BEGIN_DATE = ACH.MIN_Begin --Starter row
	
	UNION ALL

	SELECT
		ACH.BEGIN_DATE, --TODO Figure out ACH Begin Date
		LN83.LD_EFT_EFF_END AS END_DATE,
		ACH.BF_SSN AS BF_SSN,
		ACH.LN_SEQ AS LN_SEQ,
		ACH.MIN_Begin,
		LN83.LD_EFT_EFF_END AS MAX_End
	FROM
		First_ACH ACH
		INNER JOIN [achrirdf].[LN83_Population] LN83
			ON ACH.BF_SSN = LN83.BF_SSN
			AND ACH.LN_SEQ = LN83.LN_SEQ
			AND 
			(
				CONVERT(DATE,DATEADD(DAY, 1,ACH.END_DATE)) = CONVERT(DATE,LN83.LD_EFT_EFF_BEG) --The previous end date is one day before the next begin date
				--OR CONVERT(DATE,ACH.END_DATE) = CONVERT(DATE,LN83.LD_EFT_EFF_BEG)
			)
)

INSERT INTO [achrirdf].[ACH_PERIOD](BF_SSN, LN_SEQ, Begin_Date, End_Date)
SELECT
	BF_SSN,
	LN_SEQ,
	MIN(MIN_Begin) AS Begin_Date,
	MAX(MAX_End) AS End_Date
FROM
	First_ACH
GROUP BY
	BF_SSN,
	LN_SEQ

--GOOD ABOVE HERE
--SELECT 
--	*
--FROM
--	[achrirdf].[ACH_PERIOD]

WHILE @While_Cond != 0 AND @Iter < 32
BEGIN

	;WITH ACH_FINAL(BEGIN_DATE, END_DATE, BF_SSN, LN_SEQ, MIN_Begin, MAX_End)
	AS
	(
		SELECT
			ACH.*
		FROM
		(
			SELECT
				MIN(MIN_Date.BEGIN_DATE) AS BEGIN_DATE,
				MIN(MIN_Date.END_DATE) AS END_DATE,
				MIN_Date.BF_SSN,
				MIN_Date.LN_SEQ,
				MIN(MIN_Date.MIN_Begin) AS MIN_Begin,
				MIN(MIN_Date.MAX_End) AS MAX_End
			FROM
			(
				SELECT
					LN83.LD_EFT_EFF_BEG AS BEGIN_DATE,
					LN83.LD_EFT_EFF_END AS END_DATE,
					LN83.BF_SSN AS BF_SSN,
					LN83.LN_SEQ AS LN_SEQ,
					MIN_Begin = LN83.LD_EFT_EFF_BEG,
					MAX_End = LN83.LD_EFT_EFF_END
				FROM
					[achrirdf].[LN83_Population] LN83
					INNER JOIN 
					(
						SELECT
							BF_SSN,
							LN_SEQ,
							MAX(ACHP.End_Date) End_Date
						FROM 
							[achrirdf].[ACH_PERIOD] ACHP
						GROUP BY
							ACHP.BF_SSN,
							ACHP.LN_SEQ
					) ACH
						ON LN83.BF_SSN = ACH.BF_SSN
						AND LN83.LN_SEQ = ACH.LN_SEQ
				WHERE
					CONVERT(DATE,DATEADD(DAY, 1, ACH.End_Date)) < CONVERT(DATE,LN83.LD_EFT_EFF_BEG)
			) MIN_Date
			GROUP BY
				MIN_Date.BF_SSN,
				MIN_Date.LN_SEQ
		) AS ACH

		UNION ALL

		SELECT
			ACHF.BEGIN_DATE,
			LN83.LD_EFT_EFF_END AS END_DATE,
			ACHF.BF_SSN AS BF_SSN,
			ACHF.LN_SEQ AS LN_SEQ,
			ACHF.MIN_Begin,
			LN83.LD_EFT_EFF_END AS MAX_End
		FROM
			ACH_FINAL ACHF
			INNER JOIN [achrirdf].[LN83_Population] LN83
				ON ACHF.BF_SSN = LN83.BF_SSN
				AND ACHF.LN_SEQ = LN83.LN_SEQ
				AND 
				(
					CONVERT(DATE,DATEADD(DAY, 1,ACHF.MAX_End)) = CONVERT(DATE,LN83.LD_EFT_EFF_BEG)
					--OR CONVERT(DATE, ACHF.MAX_End) = CONVERT(DATE,LN83.LD_EFT_EFF_BEG)
				)
	)

	INSERT INTO [achrirdf].[ACH_PERIOD](BF_SSN, LN_SEQ, Begin_Date, End_Date)
	SELECT
		ACHF.*
	FROM
	(
		SELECT
			ACHF.BF_SSN,
			ACHF.LN_SEQ,
			MIN(ACHF.MIN_Begin) AS Begin_Date,
			MAX(ACHF.MAX_End) AS End_Date
		FROM
			ACH_FINAL ACHF
		GROUP BY
			ACHF.BF_SSN,
			ACHF.LN_SEQ
	) ACHF
	LEFT JOIN [achrirdf].[ACH_PERIOD] ACHP
		ON ACHF.BF_SSN = ACHP.BF_SSN
		AND ACHF.LN_SEQ = ACHP.LN_SEQ
		AND ACHF.Begin_Date = ACHP.Begin_Date
		AND ACHF.End_Date = ACHP.End_Date
	WHERE
		ACHP.BF_SSN IS NULL

	SET @While_Cond =  (SELECT @@ROWCOUNT)
	SET @Iter = (SELECT @Iter + 1)
	PRINT(@While_Cond)

END

--Return all values accumulated in @DF_PERIOD
SELECT DISTINCT
	BF_SSN,
	LN_SEQ,
	Begin_Date,
	End_Date
FROM
	[achrirdf].[ACH_PERIOD]

GO


