'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class MonthEnd
    Inherits DataSet
    
    Private tableMaster As MasterDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Master")) Is Nothing) Then
                Me.Tables.Add(New MasterDataTable(ds.Tables("Master")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Master As MasterDataTable
        Get
            Return Me.tableMaster
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As MonthEnd = CType(MyBase.Clone,MonthEnd)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Master")) Is Nothing) Then
            Me.Tables.Add(New MasterDataTable(ds.Tables("Master")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMaster = CType(Me.Tables("Master"),MasterDataTable)
        If (Not (Me.tableMaster) Is Nothing) Then
            Me.tableMaster.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "MonthEnd"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/MonthEnd.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMaster = New MasterDataTable
        Me.Tables.Add(Me.tableMaster)
    End Sub
    
    Private Function ShouldSerializeMaster() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MasterRowChangeEventHandler(ByVal sender As Object, ByVal e As MasterRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MasterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCreationTimeDateStamp As DataColumn
        
        Private columnRecipient As DataColumn
        
        Private columnSubject As DataColumn
        
        Private columnT1 As DataColumn
        
        Private columnT2 As DataColumn
        
        Private columnT3 As DataColumn
        
        Friend Sub New()
            MyBase.New("Master")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CreationTimeDateStampColumn As DataColumn
            Get
                Return Me.columnCreationTimeDateStamp
            End Get
        End Property
        
        Friend ReadOnly Property RecipientColumn As DataColumn
            Get
                Return Me.columnRecipient
            End Get
        End Property
        
        Friend ReadOnly Property SubjectColumn As DataColumn
            Get
                Return Me.columnSubject
            End Get
        End Property
        
        Friend ReadOnly Property T1Column As DataColumn
            Get
                Return Me.columnT1
            End Get
        End Property
        
        Friend ReadOnly Property T2Column As DataColumn
            Get
                Return Me.columnT2
            End Get
        End Property
        
        Friend ReadOnly Property T3Column As DataColumn
            Get
                Return Me.columnT3
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MasterRow
            Get
                Return CType(Me.Rows(index),MasterRow)
            End Get
        End Property
        
        Public Event MasterRowChanged As MasterRowChangeEventHandler
        
        Public Event MasterRowChanging As MasterRowChangeEventHandler
        
        Public Event MasterRowDeleted As MasterRowChangeEventHandler
        
        Public Event MasterRowDeleting As MasterRowChangeEventHandler
        
        Public Overloads Sub AddMasterRow(ByVal row As MasterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMasterRow(ByVal CreationTimeDateStamp As Date, ByVal Recipient As String, ByVal Subject As String, ByVal T1 As Date, ByVal T2 As Date, ByVal T3 As Date) As MasterRow
            Dim rowMasterRow As MasterRow = CType(Me.NewRow,MasterRow)
            rowMasterRow.ItemArray = New Object() {CreationTimeDateStamp, Recipient, Subject, T1, T2, T3}
            Me.Rows.Add(rowMasterRow)
            Return rowMasterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MasterDataTable = CType(MyBase.Clone,MasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MasterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCreationTimeDateStamp = Me.Columns("CreationTimeDateStamp")
            Me.columnRecipient = Me.Columns("Recipient")
            Me.columnSubject = Me.Columns("Subject")
            Me.columnT1 = Me.Columns("T1")
            Me.columnT2 = Me.Columns("T2")
            Me.columnT3 = Me.Columns("T3")
        End Sub
        
        Private Sub InitClass()
            Me.columnCreationTimeDateStamp = New DataColumn("CreationTimeDateStamp", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreationTimeDateStamp)
            Me.columnRecipient = New DataColumn("Recipient", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecipient)
            Me.columnSubject = New DataColumn("Subject", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubject)
            Me.columnT1 = New DataColumn("T1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnT1)
            Me.columnT2 = New DataColumn("T2", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnT2)
            Me.columnT3 = New DataColumn("T3", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnT3)
            Me.columnCreationTimeDateStamp.AllowDBNull = false
            Me.columnRecipient.AllowDBNull = false
            Me.columnT1.AllowDBNull = false
            Me.columnT2.AllowDBNull = false
            Me.columnT3.AllowDBNull = false
        End Sub
        
        Public Function NewMasterRow() As MasterRow
            Return CType(Me.NewRow,MasterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MasterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MasterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MasterRowChangedEvent) Is Nothing) Then
                RaiseEvent MasterRowChanged(Me, New MasterRowChangeEvent(CType(e.Row,MasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MasterRowChangingEvent) Is Nothing) Then
                RaiseEvent MasterRowChanging(Me, New MasterRowChangeEvent(CType(e.Row,MasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent MasterRowDeleted(Me, New MasterRowChangeEvent(CType(e.Row,MasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent MasterRowDeleting(Me, New MasterRowChangeEvent(CType(e.Row,MasterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMasterRow(ByVal row As MasterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MasterRow
        Inherits DataRow
        
        Private tableMaster As MasterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMaster = CType(Me.Table,MasterDataTable)
        End Sub
        
        Public Property CreationTimeDateStamp As Date
            Get
                Return CType(Me(Me.tableMaster.CreationTimeDateStampColumn),Date)
            End Get
            Set
                Me(Me.tableMaster.CreationTimeDateStampColumn) = value
            End Set
        End Property
        
        Public Property Recipient As String
            Get
                Return CType(Me(Me.tableMaster.RecipientColumn),String)
            End Get
            Set
                Me(Me.tableMaster.RecipientColumn) = value
            End Set
        End Property
        
        Public Property Subject As String
            Get
                Try 
                    Return CType(Me(Me.tableMaster.SubjectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaster.SubjectColumn) = value
            End Set
        End Property
        
        Public Property T1 As Date
            Get
                Return CType(Me(Me.tableMaster.T1Column),Date)
            End Get
            Set
                Me(Me.tableMaster.T1Column) = value
            End Set
        End Property
        
        Public Property T2 As Date
            Get
                Return CType(Me(Me.tableMaster.T2Column),Date)
            End Get
            Set
                Me(Me.tableMaster.T2Column) = value
            End Set
        End Property
        
        Public Property T3 As Date
            Get
                Return CType(Me(Me.tableMaster.T3Column),Date)
            End Get
            Set
                Me(Me.tableMaster.T3Column) = value
            End Set
        End Property
        
        Public Function IsSubjectNull() As Boolean
            Return Me.IsNull(Me.tableMaster.SubjectColumn)
        End Function
        
        Public Sub SetSubjectNull()
            Me(Me.tableMaster.SubjectColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MasterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MasterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MasterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
