<<<<<<< HEAD
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Uheaa.Common.Scripts;
using Uheaa.Common.DataAccess;
using Uheaa.Common;
using Uheaa.Common.ProcessLogger;

namespace DASFORBFED
{
    public class DisasterForbearanceAddFed
    {
        private ProcessLogRun plr;
        private DataHelper dh;
        private DataAccess da;
        private Action<string> logMessage;
        public DisasterForbearanceAddFed(ProcessLogRun plr, Action<string> logMessage)
        {
            this.plr = plr;
            this.logMessage = logMessage;
            this.dh = new DataHelper();
            this.da = new DataAccess(new LogDataAccess(DataAccessHelper.CurrentMode, this.plr.ProcessLogId, false, true), DataAccessHelper.CurrentRegion);
        }

        public void LoadWork(List<string> filesToProcess)
        {
            logMessage(string.Format("Loading work from files.  Found {0} file(s)", filesToProcess.Count));
            int workCount = 0;
            foreach (string file in filesToProcess)
            {
                var parseResults = CsvHelper.ParseTo<FileData>(File.ReadAllLines(file));
                List<FileData> fData = dh.ParseFile(file);
                var info = new FileInfo(file);
                bool workAdded = da.AddNewWork(fData);
                if (!workAdded)
                {
                    logMessage("Unable to load work.  Please check Process Log ID #" + plr.ProcessLogId);
                    break;
                }
                workCount += fData.Count;
            }
            logMessage(string.Format("Finished loading work.  {0} new records added.", workCount));
            DataAccessHelper.CloseAllManagedConnections();
        }

        public void ProcessWork(ReflectionInterface ri)
        {
            var fh = new ForbearanceHelper(ri);
            var pendingWork = da.GetPendingWork();
            logMessage(string.Format("Found {0} pending records in database.  Beginning processing.", pendingWork.Count));
            int successCount = 0;
            int errorCount = 0;
            foreach (ProcessQueueData item in pendingWork)
            {
                if (item.ForbearanceAddedAt == null)
                {
                    var forbearanceResults = fh.AddForbearance(item);
                    if (forbearanceResults.ForbearanceAdded)
                    {
                        da.MarkForbearanceAdded(item.ProcessQueueId);
                        if (item.ArcAddProcessingId != null)
                            successCount++;
                    }
                    else
                    {
                        LogError(forbearanceResults.ErrorMessage);
                        var results = AddErrorArc(item, ri.Message);
                        if (results.ArcAdded)
                            da.MarkArcAdded(item.ProcessQueueId, results.ArcAddProcessingId);
                        errorCount++;
                        continue;
                    }
                }
                if (item.ArcAddProcessingId == null)
                {
                    var results = AddArc(item);
                    if (results.ArcAdded)
                    {
                        da.MarkArcAdded(item.ProcessQueueId, results.ArcAddProcessingId);
                        successCount++;
                    }
                    else
                    {
                        errorCount++;
                    }
                }
            }
            logMessage(string.Format("Processing Complete.  {0} successful records, {1} records with errors.", successCount, errorCount));

            DataAccessHelper.CloseAllManagedConnections();
        }

        private void LogError(string message)
        {
            plr.AddNotification(message, NotificationType.ErrorReport, NotificationSeverityType.Critical);
            logMessage(message);
        }

        private ArcAddResults AddArc(FileData item)
        {
            ArcData ad = new ArcData(DataAccessHelper.CurrentRegion)
            {
                AccountNumber = item.AccountNumber,
                Arc = "FBAPV",
                Comment = item.BeginDate.ToShortDateString() + "," + "Disaster Administrative applied for 90 days due to Natural disaster",
                ArcTypeSelected = ArcData.ArcType.Atd22AllLoans,
                ScriptId = "DASFORBFED"
            };
            var results = ad.AddArc();
            return results;
        }

        private ArcAddResults AddErrorArc(FileData item, string message)
        {
            ArcData ad = new ArcData(DataAccessHelper.CurrentRegion)
            {
                AccountNumber = item.AccountNumber,
                Arc = "DASFB",
                Comment = "Disaster Administrative Forbearance," + message + "," + item.BeginDate.ToShortDateString() + "," + item.EndDate.ToShortDateString(),
                ArcTypeSelected = ArcData.ArcType.Atd22AllLoans,
                ScriptId = "DASFORBFED"
            };
            var results = ad.AddArc();
            return results;
        }

    }
}
=======
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Uheaa.Common.Scripts;
using Uheaa.Common.DataAccess;
using Uheaa.Common;
using Uheaa.Common.ProcessLogger;

namespace DASFORBFED
{
    public class DisasterForbearanceAddFed
    {
        private ProcessLogRun plr;
        private DataAccess da;
        private Action<string> logMessage;
        public DisasterForbearanceAddFed(ProcessLogRun plr, Action<string> logMessage)
        {
            this.plr = plr;
            this.logMessage = logMessage;
            this.da = new DataAccess(new LogDataAccess(DataAccessHelper.CurrentMode, this.plr.ProcessLogId, false, true), DataAccessHelper.CurrentRegion);
        }

        public void ProcessWork(ReflectionInterface ri)
        {
            var fh = new ForbearanceHelper(ri);
            var pendingWork = da.GetPendingWork();
            logMessage(string.Format("Found {0} pending records in database.  Beginning processing.", pendingWork.Count));
            int successCount = 0;
            int errorCount = 0;
            foreach (ProcessQueueData item in pendingWork)
            {
                if (item.ForbearanceAddedAt == null)
                {
                    var forbearanceResults = fh.AddForbearance(item);
                    if (forbearanceResults.ForbearanceAdded)
                    {
                        da.MarkForbearanceAdded(item.ProcessQueueId);
                        if (item.ArcAddProcessingId != null)
                            successCount++;
                    }
                    else
                    {
                        LogError(forbearanceResults.ErrorMessage);
                        var reflectionError = ri.Message;
                        if (ri.ScreenCode == "TSX31")
                            reflectionError = ri.GetText(21, 2, 16);
                        var results = AddErrorArc(item, reflectionError);
                        if (results.ArcAdded)
                            da.MarkArcAdded(item.ProcessQueueId, results.ArcAddProcessingId);
                        errorCount++;
                        continue;
                    }
                }
                if (item.ArcAddProcessingId == null)
                {
                    var results = AddArc(item);
                    if (results.ArcAdded)
                    {
                        da.MarkArcAdded(item.ProcessQueueId, results.ArcAddProcessingId);
                        successCount++;
                    }
                    else
                    {
                        errorCount++;
                    }
                }
            }
            logMessage(string.Format("Processing Complete.  {0} successful records, {1} records with errors.", successCount, errorCount));

            DataAccessHelper.CloseAllManagedConnections();
        }

        private void LogError(string message)
        {
            plr.AddNotification(message, NotificationType.ErrorReport, NotificationSeverityType.Critical);
            logMessage(message);
        }

        private ArcAddResults AddArc(ProcessQueueData item)
        {
            ArcData ad = new ArcData(DataAccessHelper.CurrentRegion)
            {
                AccountNumber = item.AccountNumber,
                Arc = "FBAPV",
                Comment = item.BeginDate.ToShortDateString() + "," + item.ActivityComment,
                ArcTypeSelected = ArcData.ArcType.Atd22AllLoans,
                ScriptId = "DASFORBFED"
            };
            var results = ad.AddArc();
            return results;
        }

        private ArcAddResults AddErrorArc(ProcessQueueData item, string message)
        {
            ArcData ad = new ArcData(DataAccessHelper.CurrentRegion)
            {
                AccountNumber = item.AccountNumber,
                Arc = "DASFB",
                Comment = "Disaster Administrative Forbearance," + message + "," + item.BeginDate.ToShortDateString() + "," + item.EndDate.ToShortDateString(),
                ArcTypeSelected = ArcData.ArcType.Atd22AllLoans,
                ScriptId = "DASFORBFED"
            };
            var results = ad.AddArc();
            return results;
        }

    }
}
>>>>>>> SR_4732
