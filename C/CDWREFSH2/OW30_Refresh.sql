USE CDW
GO

--SELECT TOP 1
--	*
--INTO 
--	dbo.OW30_LON_SLE_CTL
--FROM
--	OPENQUERY
--	(
--		LEGEND,
--		'
--			SELECT
--				*
--			FROM
--				PKUB.OW30_LON_SLE_CTL
--		'
--	) 


DECLARE @SQLStatement VARCHAR(MAX) = 
'
	MERGE 
		dbo.OW30_LON_SLE_CTL OW30
	USING
		(
			SELECT
				*
			FROM
				OPENQUERY
				(
					LEGEND,
					''
						SELECT
							OW30.*
						FROM
							PKUB.OW30_LON_SLE_CTL OW30
					''
				) 
		) L ON L.IF_LON_SLE = OW30.IF_LON_SLE 
	WHEN MATCHED THEN 
		UPDATE SET 
			OW30.IC_LON_SLE_STA = L.IC_LON_SLE_STA,
			OW30.IC_LON_SLE_TYP = L.IC_LON_SLE_TYP,
			OW30.ID_LON_SLE = L.ID_LON_SLE,
			OW30.IF_SLL_OWN = L.IF_SLL_OWN,
			OW30.IM_SLL_CNC_1 = L.IM_SLL_CNC_1,
			OW30.IM_SLL_CNC_LST = L.IM_SLL_CNC_LST,
			OW30.IN_SLL_CNC_PHN_ARA = L.IN_SLL_CNC_PHN_ARA,
			OW30.IN_SLL_CNC_PHN_XCH = L.IN_SLL_CNC_PHN_XCH,
			OW30.IN_SLL_CNC_PHN_LCL = L.IN_SLL_CNC_PHN_LCL,
			OW30.IN_SLL_CNC_PHN_XTN = L.IN_SLL_CNC_PHN_XTN,
			OW30.IF_SLL_BND_ISS = L.IF_SLL_BND_ISS,
			OW30.ID_SLL_LON_SLE_APV = L.ID_SLL_LON_SLE_APV,
			OW30.IF_BUY_OWN = L.IF_BUY_OWN,
			OW30.IM_BUY_CNC_1 = L.IM_BUY_CNC_1,
			OW30.IM_BUY_CNC_LST = L.IM_BUY_CNC_LST,
			OW30.IN_BUY_CNC_PHN_ARA = L.IN_BUY_CNC_PHN_ARA,
			OW30.IN_BUY_CNC_PHN_XCH = L.IN_BUY_CNC_PHN_XCH,
			OW30.IN_BUY_CNC_PHN_LCL = L.IN_BUY_CNC_PHN_LCL,
			OW30.IN_BUY_CNC_PHN_XTN = L.IN_BUY_CNC_PHN_XTN,
			OW30.IF_BUY_BND_ISS = L.IF_BUY_BND_ISS,
			OW30.ID_BUY_LON_SLE_APV = L.ID_BUY_LON_SLE_APV,
			OW30.IM_MKT_CNC_1 = L.IM_MKT_CNC_1,
			OW30.IM_MKT_CNC_LST = L.IM_MKT_CNC_LST,
			OW30.IN_MKT_CNC_PHN_ARA = L.IN_MKT_CNC_PHN_ARA,
			OW30.IN_MKT_CNC_PHN_XCH = L.IN_MKT_CNC_PHN_XCH,
			OW30.IN_MKT_CNC_PHN_LCL = L.IN_MKT_CNC_PHN_LCL,
			OW30.IN_MKT_CNC_PHN_XTN = L.IN_MKT_CNC_PHN_XTN,
			OW30.IM_TRF_CNC_1 = L.IM_TRF_CNC_1,
			OW30.IM_TRF_CNC_LST = L.IM_TRF_CNC_LST,
			OW30.IN_TRF_CNC_PHN_ARA = L.IN_TRF_CNC_PHN_ARA,
			OW30.IN_TRF_CNC_PHN_XCH = L.IN_TRF_CNC_PHN_XCH,
			OW30.IN_TRF_CNC_PHN_LCL = L.IN_TRF_CNC_PHN_LCL,
			OW30.IN_TRF_CNC_PHN_XTN = L.IN_TRF_CNC_PHN_XTN,
			OW30.IM_LEG_CNC_1 = L.IM_LEG_CNC_1,
			OW30.IM_LEG_CNC_LST = L.IM_LEG_CNC_LST,
			OW30.IN_LEG_CNC_PHN_ARA = L.IN_LEG_CNC_PHN_ARA,
			OW30.IN_LEG_CNC_PHN_XCH = L.IN_LEG_CNC_PHN_XCH,
			OW30.IN_LEG_CNC_PHN_LCL = L.IN_LEG_CNC_PHN_LCL,
			OW30.IN_LEG_CNC_PHN_XTN = L.IN_LEG_CNC_PHN_XTN,
			OW30.IC_FEE_ORG_RSB = L.IC_FEE_ORG_RSB,
			OW30.II_ACP_NEW_LON_SLE = L.II_ACP_NEW_LON_SLE,
			OW30.IA_LON_TOT_MAX = L.IA_LON_TOT_MAX,
			OW30.II_INT_ICL = L.II_INT_ICL,
			OW30.IN_LON_MAX = L.IN_LON_MAX,
			OW30.II_SLE_LTR_TRG = L.II_SLE_LTR_TRG,
			OW30.IF_SLE_LTR_SPC = L.IF_SLE_LTR_SPC,
			OW30.IF_LST_DTS_OW30 = L.IF_LST_DTS_OW30,
			OW30.IF_BUY_POR = L.IF_BUY_POR,
			OW30.IC_SLL_PNT_LOC = L.IC_SLL_PNT_LOC,
			OW30.IC_BUY_PNT_LOC = L.IC_BUY_PNT_LOC,
			OW30.IC_TIR_PCE_ASN = L.IC_TIR_PCE_ASN,
			OW30.II_LTE_FEE_WOF = L.II_LTE_FEE_WOF,
			OW30.IC_LON_SLE_SEL_TYP = L.IC_LON_SLE_SEL_TYP,
			OW30.II_LTE_FEE_MAX_VAL = L.II_LTE_FEE_MAX_VAL,
			OW30.II_STP_SLE_LON_MAX = L.II_STP_SLE_LON_MAX,
			OW30.II_LEV_BR_LON_ELG = L.II_LEV_BR_LON_ELG,
			OW30.IC_SEL_CRI_USR_APV = L.IC_SEL_CRI_USR_APV,
			OW30.ID_SEL_CRI_USR_APV = L.ID_SEL_CRI_USR_APV,
			OW30.IF_SEL_CRI_USR_APV = L.IF_SEL_CRI_USR_APV,
			OW30.ID_SEL_NXT_PLR = L.ID_SEL_NXT_PLR,
			OW30.ID_LON_SLE_LST_PLR = L.ID_LON_SLE_LST_PLR,
			OW30.IT_SLE_LST_PLR = L.IT_SLE_LST_PLR,
			OW30.IN_LON_SLE_BR_ELG = L.IN_LON_SLE_BR_ELG,
			OW30.IN_LON_SLE_LON_ELG = L.IN_LON_SLE_LON_ELG,
			OW30.IA_CUR_PRI_ELG_LON = L.IA_CUR_PRI_ELG_LON,
			OW30.IA_NSI_ELG_LON = L.IA_NSI_ELG_LON,
			OW30.IA_LTE_FEE_ELG_LON = L.IA_LTE_FEE_ELG_LON,
			OW30.IN_IVL_SCH_NXT_SLE = L.IN_IVL_SCH_NXT_SLE,
			OW30.IC_IVL_SCH_NXT_SLE = L.IC_IVL_SCH_NXT_SLE,
			OW30.IN_IVL_SCH_NXT_PLR = L.IN_IVL_SCH_NXT_PLR,
			OW30.IC_IVL_SCH_NXT_PLR = L.IC_IVL_SCH_NXT_PLR,
			OW30.IX_TRG_FIL_SEL_CRI = L.IX_TRG_FIL_SEL_CRI,
			OW30.IC_RGN_RCV_DCV_LON = L.IC_RGN_RCV_DCV_LON,
			OW30.IX_DSC_BUY_OWN = L.IX_DSC_BUY_OWN,
			OW30.LA_BR_PRI_BAL_SLE = L.LA_BR_PRI_BAL_SLE,
			OW30.LC_BR_PRI_REL_SLE = L.LC_BR_PRI_REL_SLE,
			OW30.II_ORG_RGT_PUR_SLE = L.II_ORG_RGT_PUR_SLE,
			OW30.IF_GRP_SLE_KEY = L.IF_GRP_SLE_KEY,
			OW30.IC_EFT_RIR_RSB = L.IC_EFT_RIR_RSB,
			OW30.IX_LON_SLE_CMT = L.IX_LON_SLE_CMT,
			OW30.IC_BBS_RSB = L.IC_BBS_RSB,
			OW30.IC_LON_SLE_SUB_TYP = L.IC_LON_SLE_SUB_TYP,
			OW30.IA_SLE_LVL_TRF_FEE = L.IA_SLE_LVL_TRF_FEE,
			OW30.IC_TRF_FEE_TYP = L.IC_TRF_FEE_TYP,
			OW30.IR_PRI_PER_FEE_RTE = L.IR_PRI_PER_FEE_RTE,
			OW30.II_ICL_CON_STP_PUR = L.II_ICL_CON_STP_PUR,
			OW30.ID_ECA_DCV_CRT_FIL = L.ID_ECA_DCV_CRT_FIL,
			OW30.II_ECA_PUT_DCV_APV = L.II_ECA_PUT_DCV_APV,
			OW30.ID_ECA_CRT_BIL_SLE = L.ID_ECA_CRT_BIL_SLE,
			OW30.ID_CDU_REM_NTF = L.ID_CDU_REM_NTF,
			OW30.IC_FED_PGM_YR = L.IC_FED_PGM_YR,
			OW30.IF_FLS_DEA = L.IF_FLS_DEA,
			OW30.IF_DEA_IST_LIN_HLD = L.IF_DEA_IST_LIN_HLD,
			OW30.II_LON_SLE_ICL_IDT = L.II_LON_SLE_ICL_IDT,
			OW30.II_ICL_CON_GRP_RLP = L.II_ICL_CON_GRP_RLP,
			OW30.LI_PCV_OWN_EFF_DTE = L.LI_PCV_OWN_EFF_DTE,
			OW30.II_PRE_SLE_LTR = L.II_PRE_SLE_LTR,
			OW30.IC_DLA_CAN_LTR = L.IC_DLA_CAN_LTR,
			OW30.IC_PRE_SLE_LST_PRC = L.IC_PRE_SLE_LST_PRC
	WHEN NOT MATCHED THEN
		INSERT 
		(
			IF_LON_SLE,
			IC_LON_SLE_STA,
			IC_LON_SLE_TYP,
			ID_LON_SLE,
			IF_SLL_OWN,
			IM_SLL_CNC_1,
			IM_SLL_CNC_LST,
			IN_SLL_CNC_PHN_ARA,
			IN_SLL_CNC_PHN_XCH,
			IN_SLL_CNC_PHN_LCL,
			IN_SLL_CNC_PHN_XTN,
			IF_SLL_BND_ISS,
			ID_SLL_LON_SLE_APV,
			IF_BUY_OWN,
			IM_BUY_CNC_1,
			IM_BUY_CNC_LST,
			IN_BUY_CNC_PHN_ARA,
			IN_BUY_CNC_PHN_XCH,
			IN_BUY_CNC_PHN_LCL,
			IN_BUY_CNC_PHN_XTN,
			IF_BUY_BND_ISS,
			ID_BUY_LON_SLE_APV,
			IM_MKT_CNC_1,
			IM_MKT_CNC_LST,
			IN_MKT_CNC_PHN_ARA,
			IN_MKT_CNC_PHN_XCH,
			IN_MKT_CNC_PHN_LCL,
			IN_MKT_CNC_PHN_XTN,
			IM_TRF_CNC_1,
			IM_TRF_CNC_LST,
			IN_TRF_CNC_PHN_ARA,
			IN_TRF_CNC_PHN_XCH,
			IN_TRF_CNC_PHN_LCL,
			IN_TRF_CNC_PHN_XTN,
			IM_LEG_CNC_1,
			IM_LEG_CNC_LST,
			IN_LEG_CNC_PHN_ARA,
			IN_LEG_CNC_PHN_XCH,
			IN_LEG_CNC_PHN_LCL,
			IN_LEG_CNC_PHN_XTN,
			IC_FEE_ORG_RSB,
			II_ACP_NEW_LON_SLE,
			IA_LON_TOT_MAX,
			II_INT_ICL,
			IN_LON_MAX,
			II_SLE_LTR_TRG,
			IF_SLE_LTR_SPC,
			IF_LST_DTS_OW30,
			IF_BUY_POR,
			IC_SLL_PNT_LOC,
			IC_BUY_PNT_LOC,
			IC_TIR_PCE_ASN,
			II_LTE_FEE_WOF,
			IC_LON_SLE_SEL_TYP,
			II_LTE_FEE_MAX_VAL,
			II_STP_SLE_LON_MAX,
			II_LEV_BR_LON_ELG,
			IC_SEL_CRI_USR_APV,
			ID_SEL_CRI_USR_APV,
			IF_SEL_CRI_USR_APV,
			ID_SEL_NXT_PLR,
			ID_LON_SLE_LST_PLR,
			IT_SLE_LST_PLR,
			IN_LON_SLE_BR_ELG,
			IN_LON_SLE_LON_ELG,
			IA_CUR_PRI_ELG_LON,
			IA_NSI_ELG_LON,
			IA_LTE_FEE_ELG_LON,
			IN_IVL_SCH_NXT_SLE,
			IC_IVL_SCH_NXT_SLE,
			IN_IVL_SCH_NXT_PLR,
			IC_IVL_SCH_NXT_PLR,
			IX_TRG_FIL_SEL_CRI,
			IC_RGN_RCV_DCV_LON,
			IX_DSC_BUY_OWN,
			LA_BR_PRI_BAL_SLE,
			LC_BR_PRI_REL_SLE,
			II_ORG_RGT_PUR_SLE,
			IF_GRP_SLE_KEY,
			IC_EFT_RIR_RSB,
			IX_LON_SLE_CMT,
			IC_BBS_RSB,
			IC_LON_SLE_SUB_TYP,
			IA_SLE_LVL_TRF_FEE,
			IC_TRF_FEE_TYP,
			IR_PRI_PER_FEE_RTE,
			II_ICL_CON_STP_PUR,
			ID_ECA_DCV_CRT_FIL,
			II_ECA_PUT_DCV_APV,
			ID_ECA_CRT_BIL_SLE,
			ID_CDU_REM_NTF,
			IC_FED_PGM_YR,
			IF_FLS_DEA,
			IF_DEA_IST_LIN_HLD,
			II_LON_SLE_ICL_IDT,
			II_ICL_CON_GRP_RLP,
			LI_PCV_OWN_EFF_DTE,
			II_PRE_SLE_LTR,
			IC_DLA_CAN_LTR,
			IC_PRE_SLE_LST_PRC
		)
		VALUES 
		(
			L.IF_LON_SLE,
			L.IC_LON_SLE_STA,
			L.IC_LON_SLE_TYP,
			L.ID_LON_SLE,
			L.IF_SLL_OWN,
			L.IM_SLL_CNC_1,
			L.IM_SLL_CNC_LST,
			L.IN_SLL_CNC_PHN_ARA,
			L.IN_SLL_CNC_PHN_XCH,
			L.IN_SLL_CNC_PHN_LCL,
			L.IN_SLL_CNC_PHN_XTN,
			L.IF_SLL_BND_ISS,
			L.ID_SLL_LON_SLE_APV,
			L.IF_BUY_OWN,
			L.IM_BUY_CNC_1,
			L.IM_BUY_CNC_LST,
			L.IN_BUY_CNC_PHN_ARA,
			L.IN_BUY_CNC_PHN_XCH,
			L.IN_BUY_CNC_PHN_LCL,
			L.IN_BUY_CNC_PHN_XTN,
			L.IF_BUY_BND_ISS,
			L.ID_BUY_LON_SLE_APV,
			L.IM_MKT_CNC_1,
			L.IM_MKT_CNC_LST,
			L.IN_MKT_CNC_PHN_ARA,
			L.IN_MKT_CNC_PHN_XCH,
			L.IN_MKT_CNC_PHN_LCL,
			L.IN_MKT_CNC_PHN_XTN,
			L.IM_TRF_CNC_1,
			L.IM_TRF_CNC_LST,
			L.IN_TRF_CNC_PHN_ARA,
			L.IN_TRF_CNC_PHN_XCH,
			L.IN_TRF_CNC_PHN_LCL,
			L.IN_TRF_CNC_PHN_XTN,
			L.IM_LEG_CNC_1,
			L.IM_LEG_CNC_LST,
			L.IN_LEG_CNC_PHN_ARA,
			L.IN_LEG_CNC_PHN_XCH,
			L.IN_LEG_CNC_PHN_LCL,
			L.IN_LEG_CNC_PHN_XTN,
			L.IC_FEE_ORG_RSB,
			L.II_ACP_NEW_LON_SLE,
			L.IA_LON_TOT_MAX,
			L.II_INT_ICL,
			L.IN_LON_MAX,
			L.II_SLE_LTR_TRG,
			L.IF_SLE_LTR_SPC,
			L.IF_LST_DTS_OW30,
			L.IF_BUY_POR,
			L.IC_SLL_PNT_LOC,
			L.IC_BUY_PNT_LOC,
			L.IC_TIR_PCE_ASN,
			L.II_LTE_FEE_WOF,
			L.IC_LON_SLE_SEL_TYP,
			L.II_LTE_FEE_MAX_VAL,
			L.II_STP_SLE_LON_MAX,
			L.II_LEV_BR_LON_ELG,
			L.IC_SEL_CRI_USR_APV,
			L.ID_SEL_CRI_USR_APV,
			L.IF_SEL_CRI_USR_APV,
			L.ID_SEL_NXT_PLR,
			L.ID_LON_SLE_LST_PLR,
			L.IT_SLE_LST_PLR,
			L.IN_LON_SLE_BR_ELG,
			L.IN_LON_SLE_LON_ELG,
			L.IA_CUR_PRI_ELG_LON,
			L.IA_NSI_ELG_LON,
			L.IA_LTE_FEE_ELG_LON,
			L.IN_IVL_SCH_NXT_SLE,
			L.IC_IVL_SCH_NXT_SLE,
			L.IN_IVL_SCH_NXT_PLR,
			L.IC_IVL_SCH_NXT_PLR,
			L.IX_TRG_FIL_SEL_CRI,
			L.IC_RGN_RCV_DCV_LON,
			L.IX_DSC_BUY_OWN,
			L.LA_BR_PRI_BAL_SLE,
			L.LC_BR_PRI_REL_SLE,
			L.II_ORG_RGT_PUR_SLE,
			L.IF_GRP_SLE_KEY,
			L.IC_EFT_RIR_RSB,
			L.IX_LON_SLE_CMT,
			L.IC_BBS_RSB,
			L.IC_LON_SLE_SUB_TYP,
			L.IA_SLE_LVL_TRF_FEE,
			L.IC_TRF_FEE_TYP,
			L.IR_PRI_PER_FEE_RTE,
			L.II_ICL_CON_STP_PUR,
			L.ID_ECA_DCV_CRT_FIL,
			L.II_ECA_PUT_DCV_APV,
			L.ID_ECA_CRT_BIL_SLE,
			L.ID_CDU_REM_NTF,
			L.IC_FED_PGM_YR,
			L.IF_FLS_DEA,
			L.IF_DEA_IST_LIN_HLD,
			L.II_LON_SLE_ICL_IDT,
			L.II_ICL_CON_GRP_RLP,
			L.LI_PCV_OWN_EFF_DTE,
			L.II_PRE_SLE_LTR,
			L.IC_DLA_CAN_LTR,
			L.IC_PRE_SLE_LST_PRC
		)
	-- !!! uncomment lines below ONLY when doing a full table refresh 
	WHEN NOT MATCHED BY SOURCE THEN
		DELETE
	;
'

PRINT @SQLStatement
EXEC (@SQLStatement)

-- ###### VALIDATION
DECLARE 
	@CountDifference INT

SELECT
	@CountDifference = L.LocalCount - R.RemoteCount
FROM
	OPENQUERY
	(
		LEGEND,
		'
			SELECT
				COUNT(*) AS "RemoteCount"
			FROM
				PKUB.OW30_LON_SLE_CTL
		'	
	) R
	FULL OUTER JOIN
	(
		SELECT
			COUNT(*) [LocalCount]
		FROM
			OW30_LON_SLE_CTL
	) L ON 1 = 1
	
IF @CountDifference != 0
BEGIN
	RAISERROR('OW30_LON_SLE_CTL - The remote and local record counts do not match.  The local count is off by %i records.  A full refresh of the table is required.', 16, 11, @CountDifference)
END