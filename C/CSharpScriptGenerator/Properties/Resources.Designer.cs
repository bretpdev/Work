//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CSharpScriptGenerator.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CSharpScriptGenerator.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Data.Linq;
        ///using System.Linq;
        ///using Q;
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    class DataAccess : DataAccessBase
        ///    {
        ///		private DataContext CLS { get { return ClsDataContext(_testMode); } }
        ///		private readonly bool _testMode;
        ///		
        ///		public DataAccess(bool testMode)
        ///		{
        ///			_testMode = testMode;
        ///		}
        ///    }
        ///}.
        /// </summary>
        internal static string DataAccess {
            get {
                return ResourceManager.GetString("DataAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Data.Linq;
        ///using System.Linq;
        ///using Uheaa.Common.DataAccess;
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    class DataAccess : DataAccessBase
        ///    {
        ///		private readonly bool _testMode;
        ///		
        ///		public DataAccess(bool testMode)
        ///			:base(testMode)
        ///		{
        ///			_testMode = testMode;
        ///		}
        ///    }
        ///}.
        /// </summary>
        internal static string DataAccessCSharp {
            get {
                return ResourceManager.GetString("DataAccessCSharp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;Project ToolsVersion=&quot;3.5&quot; DefaultTargets=&quot;Build&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;
        ///  &lt;PropertyGroup&gt;
        ///    &lt;Configuration Condition=&quot; &apos;$(Configuration)&apos; == &apos;&apos; &quot;&gt;Debug&lt;/Configuration&gt;
        ///    &lt;Platform Condition=&quot; &apos;$(Platform)&apos; == &apos;&apos; &quot;&gt;AnyCPU&lt;/Platform&gt;
        ///    &lt;ProductVersion&gt;9.0.30729&lt;/ProductVersion&gt;
        ///    &lt;SchemaVersion&gt;2.0&lt;/SchemaVersion&gt;
        ///    &lt;ProjectGuid&gt;{INSERT GUID HERE, BETWEEN BRACES}&lt;/ProjectGuid&gt;
        ///    &lt;OutputType&gt;Library&lt;/OutputType&gt;        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PROJECT {
            get {
                return ResourceManager.GetString("PROJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;Project ToolsVersion=&quot;3.5&quot; DefaultTargets=&quot;Build&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;
        ///  &lt;PropertyGroup&gt;
        ///    &lt;Configuration Condition=&quot; &apos;$(Configuration)&apos; == &apos;&apos; &quot;&gt;Debug&lt;/Configuration&gt;
        ///    &lt;Platform Condition=&quot; &apos;$(Platform)&apos; == &apos;&apos; &quot;&gt;AnyCPU&lt;/Platform&gt;
        ///    &lt;ProductVersion&gt;9.0.30729&lt;/ProductVersion&gt;
        ///    &lt;SchemaVersion&gt;2.0&lt;/SchemaVersion&gt;
        ///    &lt;ProjectGuid&gt;{INSERT GUID HERE, BETWEEN BRACES}&lt;/ProjectGuid&gt;
        ///    &lt;OutputType&gt;Library&lt;/OutputType&gt;        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PROJECTCSHARP {
            get {
                return ResourceManager.GetString("PROJECTCSHARP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Microsoft Visual Studio Solution File, Format Version 10.00
        ///# Visual Studio 2008
        ///Project(&quot;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&quot;) = &quot;&lt;&lt;NAMESPACE&gt;&gt;&quot;, &quot;&lt;&lt;NAMESPACE&gt;&gt;\&lt;&lt;NAMESPACE&gt;&gt;.csproj&quot;, &quot;{&lt;&lt;GUID&gt;&gt;}&quot;
        ///EndProject
        ///Project(&quot;{F184B08F-C81C-45F6-A57F-5ABD9991F28F}&quot;) = &quot;Q&quot;, &quot;..\..\Q\Q.vbproj&quot;, &quot;{5DB905EB-0BF7-4E95-8A46-0B7E76EE807D}&quot;
        ///EndProject
        ///Project(&quot;{F184B08F-C81C-45F6-A57F-5ABD9991F28F}&quot;) = &quot;DLL Session Tester&quot;, &quot;..\..\DLL Session Tester\DLL Session Tester.vbproj&quot;, &quot;{A076E1F8-799F-4848-AE31-127D1D829 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SOLUTION {
            get {
                return ResourceManager.GetString("SOLUTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///Microsoft Visual Studio Solution File, Format Version 10.00
        ///# Visual Studio 2008
        ///Project(&quot;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&quot;) = &quot;&lt;&lt;NAMESPACE&gt;&gt;&quot;, &quot;&lt;&lt;NAMESPACE&gt;&gt;\&lt;&lt;NAMESPACE&gt;&gt;.csproj&quot;, &quot;{&lt;&lt;GUID&gt;&gt;}&quot;
        ///EndProject
        ///Project(&quot;{F184B08F-C81C-45F6-A57F-5ABD9991F28F}&quot;) = &quot;Uheaa.Common.Scripts&quot;, &quot;C:\Users\jryan\Desktop\Uheaa\Common\Scripts\BaseClasses\Uheaa.Common.Scripts\Uheaa.Common.Scripts.csproj&quot;, &quot;{6426EA60-C183-4E45-A62A-378645A60F9E}&quot;
        ///EndProject
        ///Project(&quot;{F184B08F-C81C-45F6-A57F-5ABD9991F28F}&quot;) = &quot;Uhe [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SOLUTIONCSHARP {
            get {
                return ResourceManager.GetString("SOLUTIONCSHARP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using Q;
        ///using Key = Q.ReflectionInterface.Key;
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    public class &lt;&lt;STARTING_CLASS&gt;&gt; : BatchScriptBase
        ///    {
        ///		//TODO: Modify the following comment to reflect the recovery value(s) being used.
        ///		//Recovery value is the row index from the SAS DataTable.
        ///
        ///		private readonly DataAccess _dataAccess;
        ///		
        ///        public &lt;&lt;STARTING_CLASS&gt;&gt;(ReflectionInterface ri)
        ///            : base(ri, &quot;&lt;&lt;SCRIPT_ID&gt;&gt;&quot;)
        ///        {
        ///			_dataAccess = new DataAccess(ri.TestMode);
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StartingClassBatch {
            get {
                return ResourceManager.GetString("StartingClassBatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using Uheaa.Common.DataAccess;
        ///using Uheaa.Common.Scripts;
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    public class &lt;&lt;STARTING_CLASS&gt;&gt; : BatchScript
        ///    {
        ///		//TODO: Modify the following comment to reflect the recovery value(s) being used.
        ///		//Recovery value is the row index from the SAS DataTable.
        ///		
        ///        public &lt;&lt;STARTING_CLASS&gt;&gt;(ReflectionInterface ri)
        ///	    : base(ri, DataAccessBase.Region.Uheaa, &quot;&lt;&lt;SCRIPT_ID&gt;&gt;&quot;)
        ///        {
        ///			
        ///        }
        ///
        ///        public override void Main()
        ///        {        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StartingClassBatchCSharp {
            get {
                return ResourceManager.GetString("StartingClassBatchCSharp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Windows.Forms;
        ///using Q;
        ///using Key = Q.ReflectionInterface.Key;
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    public class &lt;&lt;STARTING_CLASS&gt;&gt; : ScriptBase
        ///    {
        ///		private readonly DataAccess _dataAccess;
        ///		
        ///        public &lt;&lt;STARTING_CLASS&gt;&gt;(ReflectionInterface ri)
        ///            : base(ri, &quot;&lt;&lt;SCRIPT_ID&gt;&gt;&quot;)
        ///        {
        ///			_dataAccess = new DataAccess(ri.TestMode);
        ///        }
        ///
        ///        public &lt;&lt;STARTING_CLASS&gt;&gt;(ReflectionInterface ri, MDBorrower borrower, int runNumber)
        ///            : bas [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StartingClassDude {
            get {
                return ResourceManager.GetString("StartingClassDude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using Q;
        ///using Key = Q.ReflectionInterface.Key;
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    public class &lt;&lt;STARTING_CLASS&gt;&gt; : FedBatchScriptBase
        ///    {
        ///		//TODO: Modify the following comment to reflect the recovery value(s) being used.
        ///		//Recovery value is the row index from the SAS DataTable.
        ///
        ///		//End-of-job fields are used as both array initializers and dictionary keys, so define them in consts.
        ///		//TODO: Update the fields to match the spec.
        ///		private const string EOJ_TOTAL_FROM_SAS = &quot;Total [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StartingClassFedBatch {
            get {
                return ResourceManager.GetString("StartingClassFedBatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using Uheaa.Common.DataAccess;
        ///using Uheaa.Common.Scripts;
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    public class &lt;&lt;STARTING_CLASS&gt;&gt; : FedBatchScript
        ///    {
        ///		//TODO: Modify the following comment to reflect the recovery value(s) being used.
        ///		//Recovery value is the row index from the SAS DataTable.
        ///
        ///		//End-of-job fields are used as both array initializers and dictionary keys, so define them in consts.
        ///		//TODO: Update the fields to match the spec.
        ///		private const string EojTotalFromSas = &quot;T [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StartingClassFedBatchCSharp {
            get {
                return ResourceManager.GetString("StartingClassFedBatchCSharp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Windows.Forms;
        ///using Q;
        ///using Key = Q.ReflectionInterface.Key;
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    public class &lt;&lt;STARTING_CLASS&gt;&gt; : FedScriptBase
        ///    {
        ///		private readonly DataAccess _dataAccess;
        ///		
        ///        public &lt;&lt;STARTING_CLASS&gt;&gt;(ReflectionInterface ri)
        ///            : base(ri, &quot;&lt;&lt;SCRIPT_ID&gt;&gt;&quot;, Region.CornerStone)
        ///        {
        ///			_dataAccess = new DataAccess(ri.TestMode);
        ///        }
        ///
        ///        public &lt;&lt;STARTING_CLASS&gt;&gt;(ReflectionInterface ri, MDBorrower borrower, int runNum [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StartingClassFedDude {
            get {
                return ResourceManager.GetString("StartingClassFedDude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Windows.Forms;
        ///using Q;
        ///using Key = Q.ReflectionInterface.Key;
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    public class &lt;&lt;STARTING_CLASS&gt;&gt; : FedScriptBase
        ///    {
        ///		private readonly DataAccess _dataAccess;
        ///		
        ///        public &lt;&lt;STARTING_CLASS&gt;&gt;(ReflectionInterface ri)
        ///            : base(ri, &quot;&lt;&lt;SCRIPT_ID&gt;&gt;&quot;, Region.CornerStone)
        ///        {
        ///			_dataAccess = new DataAccess(ri.TestMode);
        ///        }
        ///
        ///        public override void Main()
        ///        {
        ///			//TODO: Modify the startup message to  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StartingClassFedScript {
            get {
                return ResourceManager.GetString("StartingClassFedScript", resourceCulture);
            }
        }
        
        internal static string StartingClassScript {
            get {
                
                return ResourceManager.GetString("StartingClassScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Windows.Forms;
        ///using Uheaa.Common.DataAccess;
        ///using Uheaa.Common.Scripts;
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    public class &lt;&lt;STARTING_CLASS&gt;&gt; : ScriptBase
        ///    {
        ///		private readonly DataAccess _dataAccess;
        ///		
        ///        public &lt;&lt;STARTING_CLASS&gt;&gt;(ReflectionInterface ri)
        ///            : base(ri,DataAccessBase.Region.CornerStone ,&quot;&lt;&lt;SCRIPT_ID&gt;&gt;&quot;)
        ///        {
        ///			_dataAccess = new DataAccess(ri.TestMode);
        ///        }
        ///
        ///        public override void Main()
        ///        {
        ///			//TODO: Modify t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StartingClassScriptCharpFed {
            get {
                return ResourceManager.GetString("StartingClassScriptCharpFed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Windows.Forms;
        ///using Uheaa.Common.DataAccess;
        ///using Uheaa.Common.Scripts;
        ///
        ///
        ///namespace &lt;&lt;NAMESPACE&gt;&gt;
        ///{
        ///    public class &lt;&lt;STARTING_CLASS&gt;&gt; : ScriptBase
        ///    {
        ///		private readonly DataAccess _dataAccess;
        ///		
        ///        public &lt;&lt;STARTING_CLASS&gt;&gt;(ReflectionInterface ri)
        ///            : base(ri,DataAccessBase.Region.Uheaa, &quot;&lt;&lt;SCRIPT_ID&gt;&gt;&quot;)
        ///        {
        ///			_dataAccess = new DataAccess(ri.TestMode);
        ///        }
        ///
        ///        public override void Main()
        ///        {
        ///			//TODO: Modify the s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StartingClassScriptCSharp {
            get {
                return ResourceManager.GetString("StartingClassScriptCSharp", resourceCulture);
            }
        }
    }
}
