/**************************************************************************
* UTLWA08 ORIG FEE DISCOUNT INFO FOR LOANS SOLD 
* FOR PRODUCTION: 
* 1. COMMENT CODE - BLOCK1
* 2. UNCOMMENT CODE - BLOCK2 
*************************************************************************** 
! READ ALL COMMENTS AND MAKE SURE CODE IS UNDERSTOOD BEFORE IT IS MODIFIED!
*************************************************************************** 
* PROGRAMMER NOTE1: THIS JOB USES A DATA SET (UTLW02_R80) CREATED BY THE 
* LOAN SALE JOB (UTLWO02). IF THERE IS NO SALE FOR A GIVEN RUN DAY THIS JOB 
* WILL NOT RUN PLEASE NOTE THE RELATIONSHIP BETWEEN THESE TWO JOBS AND 
* TAKE APPROPRIATE ACTIONS TO ENSURE THE RELATIONAL INTEGRITY AND BE 
* EXTREAMELY CAUTIOUS IF RUNNING THIS LOCALLY FOR PRODUCTION DATA!
***************************************************************************
* PROGRAMMER NOTE2: WHEN MODIFING THIS JOB AND RUNNING IT LOCALLY NOTE THAT 
* THE UTLWO02_R80 IS BEING PUT ONTO DUSTER FROM A LOCAL DIRECTORY.
***************************************************************************
* PROGRAMMER NOTE3: THIS JOB USES TWO STORED DATA SETS WHEN CALCUALTING 
* ACCUMULATED TOTALS. USE CAUTION WHEN DEVELOPING OR TESTING THIS JOB TO
* MAKE SURE THAT PRODUCTION DATA WILL BE LOST! MOVE ALL STORED DATA TO THE 
* LOCAL UHEAA NETWORK FOR DEVELOPMENT. STORED DATA SETS ARE AS FOLLOWS:
* 	UTLWO02_R80 - THE LIST OF APPLICABLE INFORMATION FROM THE LOAN SALE JOB
* 	A08_BORS - RUNNING TOTAL OF BORROWERS FOR ACCUMULATED TOTALS
* 	A08_BORS_BKUP - BACK UP OF A08_BORS, THIS GOES BACK ONE MONTH 
* 	A08_PRIN - RUNNING TOTAL OF PRINCIPAL FOR ACCUMULATED TOTALS
* 	A08_PRIN_BKUP - BACK UP OF A08_PRIN, THIS GOES BACK ONE MONTH
* 	UTLWA08_DTLOG - STORES DATES FOR FISCAL YEAR RESET LOGIC
* ALSO NOTE THAT THE DATA SET TRANSFER SHOULD BE DONE THROUGH SAS, NOT 
* THROUGH AN FTP PROCESS TO ACCOUNT FOR THE DIFFERNENCE IN THE PRODUCTION OS
* AND THE DEVEOPMENT OS.
***************************************************************************/
LIBNAME DLGSUTWH DB2 DATABASE=DLGSUTWH OWNER=OLWHRM1;
%LET RPTLIB = %SYSGET(reportdir);
/*%LET RPTLIB = T:\SAS;*/
FILENAME REPORT2 "&RPTLIB/ULWA08.LWA08R2";
FILENAME REPORT3 "&RPTLIB/ULWA08.LWA08R3";
FILENAME REPORT4 "&RPTLIB/ULWA08.LWA08R4";
FILENAME REPORT5 "&RPTLIB/ULWA08.LWA08R5";
FILENAME REPORT6 "&RPTLIB/ULWA08.LWA08R6";
FILENAME REPORT7 "&RPTLIB/ULWA08.LWA08R7";
FILENAME REPORT8 "&RPTLIB/ULWA08.LWA08R8";
FILENAME REPORT9 "&RPTLIB/ULWA08.LWA08R9";
FILENAME REPORT10 "&RPTLIB/ULWA08.LWA08R10";
FILENAME REPORT11 "&RPTLIB/ULWA08.LWA08R11";
FILENAME REPORT12 "&RPTLIB/ULWA08.LWA08R12";
FILENAME REPORT13 "&RPTLIB/ULWA08.LWA08R13";
FILENAME REPORT14 "&RPTLIB/ULWA08.LWA08R14";
FILENAME REPORT15 "&RPTLIB/ULWA08.LWA08R15";
FILENAME REPORT16 "&RPTLIB/ULWA08.LWA08R16";
FILENAME REPORT17 "&RPTLIB/ULWA08.LWA08R17";
FILENAME REPORT18 "&RPTLIB/ULWA08.LWA08R18";
FILENAME REPORT19 "&RPTLIB/ULWA08.LWA08R19";
FILENAME REPORT20 "&RPTLIB/ULWA08.LWA08R20";
FILENAME REPORT21 "&RPTLIB/ULWA08.LWA08R21";
FILENAME REPORT22 "&RPTLIB/ULWA08.LWA08R22";
FILENAME REPORT23 "&RPTLIB/ULWA08.LWA08R23";
FILENAME REPORT24 "&RPTLIB/ULWA08.LWA08R24";
FILENAME REPORT25 "&RPTLIB/ULWA08.LWA08R25";
FILENAME REPORTZ "&RPTLIB/ULWA08.LWA08RZ";
DATA _NULL_;
	CALL SYMPUT('RUNDT',PUT(INTNX('DAY',TODAY(),0,'BEGINNING'), MMDDYYS10.));
RUN;
/*******************************************************
* BLOCK1: COMMENT FOR PRODUCTION
********************************************************/
/*LIBNAME SAS_TAB V8 'X:\PADU\SAS\devLnSale'; *LOCAL ASSIGNMENT FOR TESTING ONLY;*/
/*LIBNAME  WORKLOCL  REMOTE  SERVER=CYPRUS  SLIBREF=WORK;*/
/*DATA WORKLOCL.UTLWO02_R80;*/
/*	SET SAS_TAB.UTLWO02_R80;*/
/*RUN;*/
/*RSUBMIT;*/
/*******************************************************
* END BLOCK1
********************************************************/
LIBNAME SAS_TAB V8 '/sas/whse/progrevw'; *THIS LIB ASSIGNMENT TAKES PLACE ON DUSTER IT SHOULD BE LEFT ALONE;
/*******************************************************
* BLOCK2: UNCOMMENT FOR PRODUCTION
********************************************************/
DATA UTLWO02_R80 R80_OBS(WHERE=(SALE_DATE = TODAY()));
	SET SAS_TAB.UTLWO02_R80;
RUN;
%MACRO HALT_PROC;
%LET DSID=%SYSFUNC(OPEN(R80_OBS));
%LET HASOBS=%SYSFUNC(ATTRN(&DSID,ANY));
%LET RC=%SYSFUNC(CLOSE(&DSID));
%IF &HASOBS=0 %THEN	%DO;
	DATA _NULL_;
		PUT '****************************';
		PUT 'NO SALES SCHEDULED FOR TODAY';
		PUT '****************************';
		ABORT ABEND 99;
	RUN;
%END;
%MEND HALT_PROC;
%HALT_PROC;
/*******************************************************
* END BLOCK2
********************************************************/
PROC SQL NOPRINT;
	SELECT "'"||TRIM(LENDER_ID)||"'"
		INTO :UHEAA_LIST SEPARATED BY ","
	FROM SAS_TAB.LDR_AFF
	WHERE AFFILIATION = 'UHEAA';
QUIT;

%MACRO SQLCHECK (SQLRPT= );
%IF &SQLXRC NE 0 %THEN %DO;
	FILENAME REPORTZ "&RPTLIB/&SQLRPT";
	DATA _NULL_;
    FILE REPORTZ NOTITLES;
    PUT @01 " ********************************************************************* "
      / @01 " ****  THE SQL CODE ABOVE HAS EXPERIENCED AN ERROR.               **** "
      / @01 " ****  THE SAS LOG IN &SQLRPT SHOULD BE REVIEWED.          **** "       
      / @01 " ********************************************************************* "
      / @01 " ****  THE SQL ERROR CODE IS  &SQLXRC  AND THE SQL ERROR MESSAGE  **** "
      / @01 " ****  &SQLXMSG   **** "
      / @01 " ********************************************************************* ";
	RUN;
%END;
%MEND;
PROC SQL;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE OFD AS
SELECT A.*
	,B.OCT1_IND
	,B.DM_PRS_LST
	,B.DM_PRS_1
	,B.IC_LON_PGM
	,B.LD_LON_1_DSB
	,B.TRX
	,B.TRX_AMT
	,B.LD_FAT_EFF
	,B.IF_TIR_PCE
	,B.LF_RGL_CAT_LP20
	,B.DSB_IND
	,B.FAT_CUR_PRI
	,C.IF_SLL_OWN_SLD
	,C.IM_IST_FUL
	,D.BUYER
FROM UTLWO02_R80 A
INNER JOIN CONNECTION TO DB2 (
	SELECT DISTINCT LN10.BF_SSN
		,PD10.DM_PRS_LST
		,PD10.DM_PRS_1
		,LN10.LN_SEQ
		,LN10.IC_LON_PGM
		,LN10.LD_LON_1_DSB
		,LN10.LA_CUR_PRI AS FAT_CUR_PRI
		,LN90B.TRX
		,LN90B.TRX_AMT
		,LN90B.LD_FAT_EFF
		,CASE 
			WHEN LN10.IF_TIR_PCE = '' THEN 'NONE'
			ELSE LN10.IF_TIR_PCE
		 END AS IF_TIR_PCE
		,LN10.LF_RGL_CAT_LP20
		,PL_DISB.DSB_IND
		,CASE 
			WHEN LN10.LD_LON_1_DSB < '10/01/2007' THEN 'N'
			ELSE 'Y'
		 END AS OCT1_IND
	FROM OLWHRM1.LN10_LON LN10
	LEFT OUTER JOIN 
		(SELECT BF_SSN
				,LN_SEQ
				,LN_FAT_SEQ
				,LD_FAT_EFF
				,PC_FAT_TYP||PC_FAT_SUB_TYP AS TRX
				,COALESCE(LA_FAT_CUR_PRI,0) AS TRX_AMT
		FROM OLWHRM1.LN90_FIN_ATY 
		WHERE ((PC_FAT_TYP = '10'
			   AND PC_FAT_SUB_TYP IN 
					(
						'10','11','12','35','50','70',
						'80','38','20','21','36','37'
					))
			OR	(PC_FAT_TYP = '70'
				 AND PC_FAT_SUB_TYP = '01')
			OR	(PC_FAT_TYP = '26'
				 AND PC_FAT_SUB_TYP = '01')
				)
		AND LC_FAT_REV_REA = ' '
		AND LC_STA_LON90 = 'A'
		 ) LN90B
		ON LN10.BF_SSN = LN90B.BF_SSN
		AND LN10.LN_SEQ = LN90B.LN_SEQ
	INNER JOIN OLWHRM1.PD10_PRS_NME PD10
		ON LN10.BF_SSN = PD10.DF_PRS_ID
	LEFT OUTER JOIN (
		SELECT BF_SSN 
			,LN_SEQ
			,'X' AS DSB_IND
		FROM OLWHRM1.LN15_DSB
		WHERE DAYS(LD_DSB) BETWEEN DAYS('07/01/2006') AND DAYS('08/07/2006')
		AND IC_LON_PGM IN ('PLUS','PLUSGB')
		AND LC_STA_LON15 IN ('1','3')
		AND LC_DSB_TYP = '2'
		AND LA_DSB <> COALESCE(LA_DSB_CAN,0)
		) PL_DISB
		ON LN10.BF_SSN = PL_DISB.BF_SSN
		AND LN10.LN_SEQ = PL_DISB.LN_SEQ
	FOR READ ONLY WITH UR
	) B
	ON A.BF_SSN = B.BF_SSN 
	AND A.LN_SEQ = B.LN_SEQ
LEFT OUTER JOIN CONNECTION TO DB2 (
	SELECT IF_DOE_LDR
		,IM_LDR_FUL AS IM_IST_FUL
		,CASE 
			WHEN IF_DOE_LDR = '813760UT' THEN '813760'
			ELSE IF_DOE_LDR
	 	 END AS IF_SLL_OWN_SLD
	FROM OLWHRM1.LR10_LDR_DMO
	FOR READ ONLY WITH UR
	) C
	ON A.IF_SLL_OWN = C.IF_DOE_LDR
LEFT OUTER JOIN CONNECTION TO DB2 (
	SELECT IF_DOE_LDR
		,CASE 
			WHEN IF_DOE_LDR IN (&UHEAA_LIST) THEN 'UHEAA'
			ELSE 'NELNET'
		END AS BUYER
	FROM OLWHRM1.LR10_LDR_DMO
	FOR READ ONLY WITH UR
	) D
	ON A.IF_BUY_OWN = D.IF_DOE_LDR
;

CREATE TABLE LDAT AS
SELECT A.IF_SLL_OWN_SLD
	,B.IM_LDR_FUL
FROM SAS_TAB.A08_LENDERS A
INNER JOIN CONNECTION TO DB2 (
	SELECT IF_DOE_LDR
		,IM_LDR_FUL
	FROM OLWHRM1.LR10_LDR_DMO
	FOR READ ONLY WITH UR
	) B
	ON A.IF_SLL_OWN_SLD = B.IF_DOE_LDR
;
DISCONNECT FROM DB2;
%PUT  SQLXRC= >>> &SQLXRC <<< ||| SQLXMSG= >>> &SQLXMSG >>>  ;  * INCLUDES ERROR MESSAGES TO SAS LOG  ;
%SQLCHECK (SQLRPT=ULWA08.LWA08RZ);
QUIT;
/*ENDRSUBMIT;*/
/*DATA OFD;*/
/*	SET WORKLOCL.OFD;*/
/*RUN;*/
/*DATA LDAT;*/
/*	SET WORKLOCL.LDAT;*/
/*RUN;*/
/******************************************************************
* CALCULATE ORIGINATION FEE
*******************************************************************/
DATA OFD;
	SET OFD;
	LENGTH LOC1 $4. LOC2 $ 40.;
	IF INPUT(LF_RGL_CAT_LP20,BEST12.) <= 1999030 THEN DO;
		OFEE = .03;
		LOC1 = '3%';
	END;
	ELSE IF INPUT(LF_RGL_CAT_LP20,BEST12.) = 2006020 AND (
		DSB_IND = 'X' OR IC_LON_PGM NOT IN ('PLUS','PLUSGB')) THEN DO;
		OFEE = .02 ;
		LOC1 = '2%';
	END;
	ELSE IF INPUT(LF_RGL_CAT_LP20,BEST12.) = 2006020 AND DSB_IND = '' AND 
		IC_LON_PGM IN ('PLUS','PLUSGB') THEN DO;
		OFEE = .03 ;
		LOC1 = '3%';
	END;
	ELSE IF INPUT(LF_RGL_CAT_LP20,BEST12.) = 2007020 THEN DO;
		OFEE = .015 ;
		LOC1 = '1.5%';
	END;
	ELSE IF INPUT(LF_RGL_CAT_LP20,BEST12.) = 2008020 THEN DO;
		OFEE = .010 ;
		LOC1 = '1%';
	END;
	ELSE IF INPUT(LF_RGL_CAT_LP20,BEST12.) = 2009020 THEN DO;
		IF IC_LON_PGM IN ('PLUS','PLUSGB') THEN DO;
			OFEE = .03 ;
			LOC1 = '3%';
		END;
		ELSE DO;
			OFEE = .005 ;
			LOC1 = '.05%';
		END;
	END;

	IF IF_TIR_PCE ^= 'NONE' THEN DO;
		IF INPUT(LF_RGL_CAT_LP20,BEST12.) >= 2008020 THEN
			LOC2 = 'UHEAA PAID ORIGINATION FEE LOANS';
		ELSE 
			LOC2 = 'LOAN WITH ZERO ORIGINATION FEE';
	END;
	ELSE IF INPUT(LF_RGL_CAT_LP20,BEST12.) = 2009020 THEN
		LOC2 = 'LOANS WITH ORIG FEES/GUAR FEES .05%/1%';
	ELSE 
		LOC2 = 'LOAN WITH ORIGINATION FEE';
RUN;
PROC SORT DATA=OFD OUT=OFDX(WHERE=(TRX^='') KEEP=BF_SSN LN_SEQ TRX TRX_AMT);
	BY BF_SSN LN_SEQ TRX TRX_AMT;
RUN;
DATA OFDX;
	SET OFDX;
	BY BF_SSN LN_SEQ TRX;
	IF FIRST.TRX THEN 
		X=0;
	X+TRX_AMT;
	IF LAST.TRX THEN 
		OUTPUT;
RUN;
DATA OFDX (DROP=X);
	SET OFDX;
	TRX_AMT = X;
RUN;
PROC TRANSPOSE DATA=OFDX OUT=OFDX (DROP=_NAME_ _LABEL_);
	VAR TRX_AMT;
	BY BF_SSN LN_SEQ;
	ID TRX;
RUN;
PROC SORT DATA=OFD (KEEP=BF_SSN DM_PRS_LST DM_PRS_1 LN_SEQ IC_LON_PGM LD_LON_1_DSB 
	IM_IST_FUL IF_SLL_OWN_SLD IF_TIR_PCE BUYER OFEE LOC1 LOC2 FAT_CUR_PRI JUL1_IND OCT1_IND 
	SALEID LF_RGL_CAT_LP20 CUR_INT TYPE ECASLA_CAT) NODUPKEY;
	BY BF_SSN LN_SEQ;
RUN;
PROC SORT DATA=OFDX;
	BY BF_SSN LN_SEQ;
RUN;
DATA OFD;
	MERGE OFD (IN=A) OFDX (IN=B);
	BY BF_SSN LN_SEQ;
	IF A;
RUN;
%MACRO CALCB(DS,TRX_TYP);
	DATA &DS;
	SET &DS;
	FORMAT &TRX_TYP 10.2;
	IF &TRX_TYP = . THEN &TRX_TYP = 0;
		ELSE &TRX_TYP = ABS(&TRX_TYP);
	RUN;
%MEND CALCB;
%CALCB(OFD,_1010);
%CALCB(OFD,_1011);
%CALCB(OFD,_1012);
%CALCB(OFD,_1020);
%CALCB(OFD,_1021);
%CALCB(OFD,_1035);
%CALCB(OFD,_1036);
%CALCB(OFD,_1038);
%CALCB(OFD,_1037);
%CALCB(OFD,_1050);
%CALCB(OFD,_1070);
%CALCB(OFD,_1080);
%CALCB(OFD,_7001);
%CALCB(OFD,_2601);

DATA OFD;
	SET OFD; 
	FORMAT PAROD CLOF 10.2 ;
	tPAROD = ROUND(FAT_CUR_PRI + (
			_1010 + _1011 + _1012 + _1020 + _1021 + _1035 + 
			_1036 + _1038 + _1037 + _1050 + _1070 + _1080) - 
			_7001 - _2601,.01);
	tCLOF = tPAROD * OFEE;
	IF ECASLA_CAT IN ('ECASLA I','ECASLA II') THEN DO;
		LFPD = ROUND(tPAROD,.01);
		LFEE = ROUND(tPAROD * .01,.01);
		PAROD = 0;
		CLOF = 0;
	END;
	ELSE IF	INPUT(LF_RGL_CAT_LP20,BEST12.) < 2008020 
		AND LOC2 = 'LOAN WITH ZERO ORIGINATION FEE' THEN DO;
			PAROD = ROUND(tPAROD,.01);
			CLOF = ROUND(tCLOF,.01);
			LFPD=0;
			LFEE = 0;
	END;
	ELSE DO;
		PAROD = 0;
		CLOF = 0;
		LFPD = 0;
		LFEE = 0;
	END;
	LOAN_ID = TRIM(BF_SSN)||' '||TRIM(LEFT(PUT(LN_SEQ,6.)));
RUN;

%MACRO COUNTS(BYVAR,COUNTVAR,LVAR);
	PROC SORT DATA=OFD; BY &BYVAR; RUN;
	DATA OFD;
	SET OFD;
	BY &BYVAR;
	IF LAST.&LVAR THEN &COUNTVAR=1;
	ELSE &COUNTVAR = 0;
	RUN;
%MEND COUNTS;
%COUNTS(LOAN_ID,LQ,LOAN_ID);
%COUNTS(IF_SLL_OWN_SLD BUYER BF_SSN,BQ,BF_SSN);
/*REPORT 24 PROCESSING*/
PROC SORT DATA=OFD OUT=DISB_REP (DROP=LQ BQ PAROD CLOF);
	BY SALEID BF_SSN LN_SEQ;
RUN;
DATA DISB_REP (DROP=tPAROD tCLOF);
	SET DISB_REP;
	BY SALEID BF_SSN;
	IF FIRST.BF_SSN THEN 
		BOR_CT_SALE = 1;
	ELSE 
		BOR_CT_SALE = 0;
	LN_CT = 1;
	CHAR_BOR_CT = 'Y';
	PAROD = tPAROD;
	CLOF = tCLOF;
RUN;
PROC SORT DATA=DISB_REP ;
	BY SALEID JUL1_IND BF_SSN;
RUN;
DATA DISB_REP;
SET DISB_REP;
BY SALEID JUL1_IND BF_SSN;
	IF FIRST.BF_SSN THEN 
		BOR_CT = 1;
	ELSE 
		BOR_CT = 0;
RUN;
/*REPORT 25 PROCESSING*/
%MACRO RESET_RPSTRY;
/* CREATE BACK UPS OF CURRENT DATA SETS. THIS DATA ONLY GOES BACK 1 MONTH*/
DATA SAS_TAB.A08_BORS_BKUP;
	SET SAS_TAB.A08_BORS ;
RUN;
DATA SAS_TAB.A08_PRIN_BKUP;
	SET SAS_TAB.A08_PRIN ;
RUN;
DATA _NULL_;
	SET SAS_TAB.UTLWA08_DTLOG;
	CALL SYMPUT('LB_RESET_DATE',MONTH(LAST_RUN));
	CALL SYMPUT('UB_RESET_DATE',MONTH(TODAY()));
RUN;
/*DETERMINE IF THIS IS THE FIRST RUN FOR THE FY AND RESET ACCORDINGLY*/
%IF &LB_RESET_DATE = 6 AND &UB_RESET_DATE = 7 %THEN %DO;
	DATA SAS_TAB.A08_BORS;
		SET SAS_TAB.A08_BORS;
		BORS = 0;
	RUN;
	DATA SAS_TAB.A08_PRIN;
		SET SAS_TAB.A08_PRIN;
		PRIN = 0;
	RUN;
%END;
/*OVERWRITE RUN DATE FOR RESET DATA COMPARISON*/
DATA SAS_TAB.UTLWA08_DTLOG; 
	SET SAS_TAB.UTLWA08_DTLOG;
	FORMAT LAST_RUN MMDDYY10.;
	LAST_RUN = TODAY();
RUN;
%MEND RESET_RPSTRY;
%RESET_RPSTRY;
/*CREATE BOROWER/BUYER DATA SET FOR SELLER/BUYER BORROWER COUNT*/
PROC SORT DATA=OFD OUT=SBBOR (KEEP=BF_SSN IF_SLL_OWN_SLD BUYER) NODUPKEY;
	BY BF_SSN IF_SLL_OWN_SLD BUYER;
RUN;
/*CREATE DATA SET TO USE FOR THE R25 DATA FILE*/
PROC SQL;
CREATE TABLE BDFL (DROP=SELL_ID) AS 
SELECT DISTINCT LD.IF_SLL_OWN_SLD
	,LD.IM_LDR_FUL
	,SD.* 
FROM LDAT LD 
LEFT OUTER JOIN (
	SELECT DISTINCT A.IF_SLL_OWN_SLD AS SELL_ID
		,A.IM_IST_FUL
		,A.TYPE
		,B.TOT_PRIN
		,COALESCE(C1.LT_JUL1_PRIN,0) 	AS LT_JUL1_PRIN
		,COALESCE(C1.LT_JUL1_INT,0) 	AS LT_JUL1_INT
		,J.BOR_SELBUY
		,COALESCE(C1.LT_JUL1_BORS,0) 	AS LT_JUL1_BORS
		,B.TOT_LONS
		,COALESCE(C1.LT_JUL1_LONS,0) 	AS LT_JUL1_LONS
		,COALESCE(COALESCE(C1.LT_JUL1_PRIN,0) /
		 COALESCE(C1.LT_JUL1_BORS,0),0) AS PAVE
		,COALESCE(C1.LT_JUL1_PRIN,0) + I.PRIN AS ACC_PRIN
		,COALESCE(C1.LT_JUL1_BORS,0) + H.BORS AS ACC_BORS
		,COALESCE((COALESCE(C1.LT_JUL1_PRIN,0) + I.PRIN) / (COALESCE(C1.LT_JUL1_BORS,0) + H.BORS),0) AS ACC_AVE
		,B.TOT_LFEE
		,D.CLOF_3 
		,D.CLOF_2
		,D.CLOF_1p5
		,E.ZERO_OF_TOTAL
		,COALESCE(F.LT_OCT1_TOT,0) 					AS LT_OCT1_TOT
		,COALESCE(F.LT_OCT1_CUR_INT,0) 				AS LT_OCT1_CUR_INT
		,COALESCE(F.LT_OCT1_BORS,0) 				AS LT_OCT1_BORS
		,COALESCE(F.LT_OCT1_LONS,0) 				AS LT_OCT1_LONS
		,COALESCE(G.GE_OCT1_TOT,0) 					AS GE_OCT1_TOT
		,COALESCE(G.GE_OCT1_CUR_INT,0) 				AS GE_OCT1_CUR_INT
		,COALESCE(G.GE_OCT1_BORS,0) 				AS GE_OCT1_BORS
		,COALESCE(G.GE_OCT1_LONS,0) 				AS GE_OCT1_LONS

		,COALESCE(PRE_ECASLA.PRE_ECASLA_BORS,0)		AS PRE_ECASLA_BORS
		,COALESCE(PRE_ECASLA.PRE_ECASLA_LONS,0) 	AS PRE_ECASLA_LONS
		,COALESCE(PRE_ECASLA.PRE_ECASLA_PRIN,0) 	AS PRE_ECASLA_PRIN
		,COALESCE(PRE_ECASLA.PRE_ECASLA_INT,0) 		AS PRE_ECASLA_INT
		,COALESCE(ECASLAI.ECASLAI_BORS,0)			AS ECASLAI_BORS
		,COALESCE(ECASLAI.ECASLAI_LONS,0) 			AS ECASLAI_LONS
		,COALESCE(ECASLAI.ECASLAI_PRIN,0) 			AS ECASLAI_PRIN
		,COALESCE(ECASLAI.ECASLAI_INT,0) 			AS ECASLAI_INT
		,COALESCE(ECASLAI.ECASLAI_LFEE,0) 			AS ECASLAI_LFEE
		,COALESCE(ECASLAII.ECASLAII_BORS,0)	 		AS ECASLAII_BORS
		,COALESCE(ECASLAII.ECASLAII_LONS,0)	 		AS ECASLAII_LONS
		,COALESCE(ECASLAII.ECASLAII_PRIN,0)  		AS ECASLAII_PRIN
		,COALESCE(ECASLAII.ECASLAII_INT,0) 	 		AS ECASLAII_INT
		,COALESCE(ECASLAII.ECASLAII_LFEE,0) 		AS ECASLAII_LFEE
		,COALESCE(NON_ECASLA.NON_ECASLA_BORS,0)		AS NON_ECASLA_BORS
		,COALESCE(NON_ECASLA.NON_ECASLA_LONS,0) 	AS NON_ECASLA_LONS
		,COALESCE(NON_ECASLA.NON_ECASLA_PRIN,0) 	AS NON_ECASLA_PRIN
		,COALESCE(NON_ECASLA.NON_ECASLA_INT,0) 		AS NON_ECASLA_INT
		,COALESCE(PRE_ECASLA.PRE_ECASLA_BORS,0) + 
		 COALESCE(NON_ECASLA.NON_ECASLA_BORS,0)		AS PRE_NON_BORS	
		,COALESCE(PRE_ECASLA.PRE_ECASLA_LONS,0) +
		 COALESCE(NON_ECASLA.NON_ECASLA_LONS,0)		AS PRE_NON_LONS
		,COALESCE(PRE_ECASLA.PRE_ECASLA_PRIN,0) +
		 COALESCE(NON_ECASLA.NON_ECASLA_PRIN,0)		AS PRE_NON_PRIN
		,COALESCE(PRE_ECASLA.PRE_ECASLA_INT,0)  +
		 COALESCE(NON_ECASLA.NON_ECASLA_INT,0)		AS PRE_NON_INT
	FROM OFD A
	LEFT OUTER JOIN (  /*LENDER LEVEL TOTALS*/
		SELECT IF_SLL_OWN_SLD
			,SUM(FAT_CUR_PRI) 	AS TOT_PRIN
			,SUM(PAROD) 		AS TOT_PAROD
			,SUM(CLOF) 			AS TOT_CLOF
			,SUM(CUR_INT) 		AS TOT_CUR_INT
			,SUM(LFEE) 			AS TOT_LFEE
			,COUNT(*) 			AS TOT_LONS
			,COUNT(DISTINCT BF_SSN) AS TOT_BORS
		FROM OFD
		GROUP BY IF_SLL_OWN_SLD
		) B
		ON A.IF_SLL_OWN_SLD = B.IF_SLL_OWN_SLD 
	LEFT OUTER JOIN (  /*LT JULY 1 TOTALS*/
		SELECT IF_SLL_OWN_SLD
			,COUNT(DISTINCT BF_SSN) AS LT_JUL1_BORS
			,COUNT(*) 				AS LT_JUL1_LONS
			,SUM(CLOF) 				AS LT_JUL1_CLOF
			,SUM(PAROD) 			AS LT_JUL1_PAROD
			,SUM(FAT_CUR_PRI)		AS LT_JUL1_PRIN
			,SUM(CUR_INT) 			AS LT_JUL1_INT
		FROM OFD
		WHERE JUL1_IND = 'N'
		GROUP BY IF_SLL_OWN_SLD
		) C1
		ON A.IF_SLL_OWN_SLD = C1.IF_SLL_OWN_SLD 
	LEFT OUTER JOIN ( /*PRE ECASLA*/
		SELECT IF_SLL_OWN_SLD
			,COUNT(DISTINCT BF_SSN) AS PRE_ECASLA_BORS
			,COUNT(*) 				AS PRE_ECASLA_LONS
			,SUM(CLOF) 				AS PRE_ECASLA_CLOF
			,SUM(PAROD) 			AS PRE_ECASLA_PAROD
			,SUM(FAT_CUR_PRI)		AS PRE_ECASLA_PRIN
			,SUM(CUR_INT) 			AS PRE_ECASLA_INT
		FROM OFD
		WHERE ECASLA_CAT = 'PRE ECASLA'
		GROUP BY IF_SLL_OWN_SLD
		) PRE_ECASLA
		ON A.IF_SLL_OWN_SLD = PRE_ECASLA.IF_SLL_OWN_SLD 
	LEFT OUTER JOIN ( /*ECASLA I*/
		SELECT IF_SLL_OWN_SLD
			,COUNT(DISTINCT BF_SSN) AS ECASLAI_BORS
			,COUNT(*) 				AS ECASLAI_LONS
			,SUM(CLOF) 				AS ECASLAI_CLOF
			,SUM(PAROD) 			AS ECASLAI_PAROD
			,SUM(FAT_CUR_PRI)		AS ECASLAI_PRIN
			,SUM(CUR_INT) 			AS ECASLAI_INT
			,SUM(LFEE) 				AS ECASLAI_LFEE
		FROM OFD
		WHERE ECASLA_CAT = 'ECASLA I'
		GROUP BY IF_SLL_OWN_SLD
		) ECASLAI
		ON A.IF_SLL_OWN_SLD = ECASLAI.IF_SLL_OWN_SLD 
	LEFT OUTER JOIN ( /*ECASLA II*/
		SELECT IF_SLL_OWN_SLD
			,COUNT(DISTINCT BF_SSN) AS ECASLAII_BORS
			,COUNT(*) 				AS ECASLAII_LONS
			,SUM(CLOF) 				AS ECASLAII_CLOF
			,SUM(PAROD) 			AS ECASLAII_PAROD
			,SUM(FAT_CUR_PRI)		AS ECASLAII_PRIN
			,SUM(CUR_INT) 			AS ECASLAII_INT
			,SUM(LFEE) 				AS ECASLAII_LFEE
		FROM OFD
		WHERE ECASLA_CAT = 'ECASLA II'
		GROUP BY IF_SLL_OWN_SLD
		) ECASLAII
		ON A.IF_SLL_OWN_SLD = ECASLAII.IF_SLL_OWN_SLD 
	LEFT OUTER JOIN ( /*NON ECASLA*/
		SELECT IF_SLL_OWN_SLD
			,COUNT(DISTINCT BF_SSN) AS NON_ECASLA_BORS
			,COUNT(*) 				AS NON_ECASLA_LONS
			,SUM(CLOF) 				AS NON_ECASLA_CLOF
			,SUM(PAROD) 			AS NON_ECASLA_PAROD
			,SUM(FAT_CUR_PRI)		AS NON_ECASLA_PRIN
			,SUM(CUR_INT) 			AS NON_ECASLA_INT
		FROM OFD
		WHERE ECASLA_CAT = 'NON ECASLA'
		GROUP BY IF_SLL_OWN_SLD
		) NON_ECASLA
		ON A.IF_SLL_OWN_SLD = NON_ECASLA.IF_SLL_OWN_SLD 
	LEFT OUTER JOIN ( /*OF % TOTALS*/
		SELECT IF_SLL_OWN_SLD
			,MAX(CLOF_3) AS CLOF_3 
			,MAX(CLOF_2) AS CLOF_2
			,MAX(CLOF_1p5) AS CLOF_1p5
		FROM (
				SELECT IF_SLL_OWN_SLD
					,0 AS CLOF_1p5
					,0 AS CLOF_2
					,SUM(CLOF) AS CLOF_3
				FROM OFD 
				WHERE LOC1 = '3%'
				GROUP BY IF_SLL_OWN_SLD
			UNION
				SELECT IF_SLL_OWN_SLD
					,0 AS CLOF_1p5
					,SUM(CLOF) AS CLOF_2
					,0 AS CLOF_3
				FROM OFD 
				WHERE LOC1 = '2%'
				GROUP BY IF_SLL_OWN_SLD
			UNION
				SELECT IF_SLL_OWN_SLD
					,SUM(CLOF) AS CLOF_1p5
					,0 AS CLOF_2
					,0 AS CLOF_3
				FROM OFD 
				WHERE LOC1 = '1.5%'
				GROUP BY IF_SLL_OWN_SLD
			)
		GROUP BY IF_SLL_OWN_SLD
		) D
		ON A.IF_SLL_OWN_SLD = D.IF_SLL_OWN_SLD 
	LEFT OUTER JOIN ( /*ZERO OF TOTAL*/
		SELECT IF_SLL_OWN_SLD
			,SUM(CLOF)	AS ZERO_OF_TOTAL
		FROM OFD
		WHERE LOC2 = 'LOAN WITH ZERO ORIGINATION FEE'
		GROUP BY IF_SLL_OWN_SLD
		) E
		ON A.IF_SLL_OWN_SLD = E.IF_SLL_OWN_SLD 
	LEFT OUTER JOIN ( /*LT_OCT1 TOTALS*/
		SELECT IF_SLL_OWN_SLD
			,SUM(FAT_CUR_PRI) 		AS LT_OCT1_TOT
			,SUM(CUR_INT) 			AS LT_OCT1_CUR_INT
			,COUNT(DISTINCT BF_SSN) AS LT_OCT1_BORS
			,COUNT(*) 				AS LT_OCT1_LONS
		FROM OFD
		WHERE OCT1_IND = 'N'
		GROUP BY IF_SLL_OWN_SLD
		) F 
		ON A.IF_SLL_OWN_SLD = F.IF_SLL_OWN_SLD 
	LEFT OUTER JOIN ( /*GE_OCT1 TOTALS*/
		SELECT IF_SLL_OWN_SLD
			,SUM(FAT_CUR_PRI) 		AS GE_OCT1_TOT
			,SUM(CUR_INT) 			AS GE_OCT1_CUR_INT
			,COUNT(DISTINCT BF_SSN) AS GE_OCT1_BORS
			,COUNT(*) 				AS GE_OCT1_LONS
		FROM OFD
		WHERE OCT1_IND = 'Y'
		GROUP BY IF_SLL_OWN_SLD
		) G 
		ON A.IF_SLL_OWN_SLD = G.IF_SLL_OWN_SLD 
		LEFT OUTER JOIN ( /*USED FOR ACCUMULATED BORROWERS*/
			SELECT LENDER_ID
				,BORS
			FROM SAS_TAB.A08_BORS 
		) H
		ON A.IF_SLL_OWN_SLD = H.LENDER_ID 
		LEFT OUTER JOIN ( /*USER FOR ACCUMULATED PRINCIPAL*/
			SELECT LENDER_ID
				,PRIN
			FROM SAS_TAB.A08_PRIN 
		) I 
		ON A.IF_SLL_OWN_SLD = I.LENDER_ID
		LEFT OUTER JOIN ( /*BORROWERS BY SELLER/BUYER*/
			SELECT IF_SLL_OWN_SLD
				,COUNT(*) AS BOR_SELBUY
			FROM SBBOR
			GROUP BY IF_SLL_OWN_SLD
		) J
		ON A.IF_SLL_OWN_SLD = J.IF_SLL_OWN_SLD
	) SD
	ON LD.IF_SLL_OWN_SLD = SD.SELL_ID
;
QUIT;
/*CREATE TEMPORARY TABLES WITH NEW TOTALS*/
PROC SQL;
	CREATE TABLE tA08_BORS AS
		SELECT DISTINCT A.LENDER_ID
			,CASE
				WHEN B.TYPE = 'F' AND B.ACC_BORS ^= . THEN B.ACC_BORS
				ELSE A.BORS
			 END AS BORS 
		FROM SAS_TAB.A08_BORS A
		LEFT OUTER JOIN BDFL B
			ON A.LENDER_ID = B.IF_SLL_OWN_SLD
	;
	CREATE TABLE tA08_PRIN AS
		SELECT DISTINCT A.LENDER_ID
			,CASE 
				WHEN B.TYPE = 'F' AND B.ACC_PRIN ^=. THEN B.ACC_PRIN 
				ELSE A.PRIN
			 END AS PRIN
		FROM SAS_TAB.A08_PRIN A
		LEFT OUTER JOIN BDFL B
			ON A.LENDER_ID = B.IF_SLL_OWN_SLD
	;
QUIT;
/*******************************************************
* OVER WRITE REPOSITORY TABLES
********************************************************/
DATA SAS_TAB.A08_BORS;
	SET tA08_BORS ;
RUN;
DATA SAS_TAB.A08_PRIN;
	SET tA08_PRIN ;
RUN;
/*CREATE CUSTOM FORMATS FOR REPORTING*/
PROC FORMAT;
	VALUE $DCAT	
		'Y' = 'FIRST DISB ON OR AFTER 07/01/2008'
		'N' = 'FIRST DISB BEFORE 07/01/2008';
	VALUE $XOUT
		'X' = '    ';
QUIT;
%MACRO CRTDS(DS,NUM,BUY,LEND);
DATA &DS;
	SET OFD;
	WHERE BUYER = "&BUY" AND IF_SLL_OWN_SLD = "&LEND";
RUN;
PROC SQL;
	CREATE TABLE COUNTS&NUM AS 
		SELECT BUYER
			,LOC2
			,COUNT(*) AS LCOUNT
		FROM &DS
		GROUP BY BUYER
			,LOC2
	;
QUIT;
PROC SORT DATA=&DS;
	BY BUYER LOC2;
RUN;
PROC SORT DATA=COUNTS&NUM;
	BY BUYER LOC2;
RUN;
DATA &DS;
	MERGE &DS COUNTS&NUM;
	BY BUYER LOC2;
RUN;
DATA &DS;
	FORMAT LCOUNTX $15.;
	SET &DS;
	LCOUNTX = TRIM(LEFT(PUT(LCOUNT,BEST12.)));
RUN;
%MEND CRTDS;
%MACRO CRT_SUM_DS(LENDER,OPR);
	DATA REPDS3;
		SET OFD;
		WHERE IF_SLL_OWN_SLD &OPR "&LENDER";
	RUN;
	PROC SORT DATA=REPDS3;
		BY IF_SLL_OWN_SLD BF_SSN;
	RUN;
	DATA REPDS3;
		SET REPDS3;
		BY IF_SLL_OWN_SLD BF_SSN;
		IF FIRST.BF_SSN 
			THEN UBI = 1;
		ELSE 
			UBI = 0;
	RUN;
	PROC SQL;
		CREATE TABLE LSR AS
		SELECT *
		FROM (
			SELECT A.IM_IST_FUL
				,A.JUL1_IND AS OCAT
				,CASE 
					WHEN A.JUL1_IND = 'Y' THEN 'FIRST DISB ON OR AFTER 07/01/2008'
					ELSE 'FIRST DISB BEFORE 07/01/2008'
				 END AS DCAT
				,'X' AS SCAT
				,1 AS RGRP
				,COUNT(DISTINCT A.BF_SSN) AS BOR_COUNT 
				,COUNT(*) AS LOAN_COUNT
				,SUM(A.FAT_CUR_PRI) AS PRIN_SUM
				,SUM(A.PAROD) AS PAROD_SUM
				,SUM(A.CLOF) AS CLOF_SUM
				,SUM(A.LFPD) AS LFPD_SUM
				,SUM(A.LFEE) AS LFEE_SUM
				,B.UNQ_BOR_COUNT 
			FROM REPDS3 A
			LEFT OUTER JOIN (
				SELECT IM_IST_FUL
					,SUM(UBI) AS UNQ_BOR_COUNT
				FROM REPDS3
				GROUP BY IM_IST_FUL
				) B
				ON A.IM_IST_FUL = B.IM_IST_FUL
			GROUP BY A.IM_IST_FUL
				,A.JUL1_IND
		UNION
			SELECT IM_IST_FUL
				,'' AS OCAT 
				,LOC2 AS DCAT
				,LOC1 AS SCAT
				,2 AS RGRP
				,COUNT(DISTINCT BF_SSN) AS BOR_COUNT 
				,COUNT(*) AS LOAN_COUNT
				,SUM(FAT_CUR_PRI) AS PRIN_SUM
				,SUM(PAROD) AS PAROD_SUM
				,SUM(CLOF) AS CLOF_SUM
				,SUM(LFPD) AS LFPD_SUM
				,SUM(LFEE) AS LFEE_SUM
				,0 AS UNQ_BOR_COUNT
			FROM REPDS3
			GROUP BY IM_IST_FUL
				,LOC2
				,LOC1
		UNION		
			SELECT IM_IST_FUL
				,OCT1_IND AS OCAT
				,CASE 
					WHEN OCT1_IND = 'Y' THEN 'FIRST DISB ON OR AFTER 10/01/2007'
					ELSE 'FIRST DISB BEFORE 10/01/2007'
				 END AS DCAT 
				,'X' AS SCAT
				,3 AS RGRP
				,COUNT(DISTINCT BF_SSN) AS BOR_COUNT 
				,COUNT(*) AS LOAN_COUNT
				,SUM(FAT_CUR_PRI) AS PRIN_SUM
				,SUM(PAROD) AS PAROD_SUM
				,SUM(CLOF) AS CLOF_SUM
				,SUM(LFPD) AS LFPD_SUM
				,SUM(LFEE) AS LFEE_SUM
				,0 AS UNQ_BOR_COUNT
			FROM REPDS3
			GROUP BY IM_IST_FUL
				,OCT1_IND
		UNION 
			SELECT IM_IST_FUL
				,JUL1_IND AS OCAT
				,ECASLA_CAT AS DCAT 
				,'X' AS SCAT
				,4 AS RGRP
				,COUNT(DISTINCT BF_SSN) AS BOR_COUNT 
				,COUNT(*) AS LOAN_COUNT
				,SUM(FAT_CUR_PRI) AS PRIN_SUM
				,SUM(PAROD) AS PAROD_SUM
				,SUM(CLOF) AS CLOF_SUM
				,SUM(LFPD) AS LFPD_SUM
				,SUM(LFEE) AS LFEE_SUM
				,0 AS UNQ_BOR_COUNT
			FROM REPDS3
			GROUP BY IM_IST_FUL
				,JUL1_IND
				,ECASLA_CAT
		)
		ORDER BY IM_IST_FUL,RGRP;
	QUIT;
%MEND CRT_SUM_DS;
%MACRO REP_INI(DS);
/*DETERMINE ECASLA TOTALS*/
%LET PRE_BORS=0;
%LET PRE_LONS=0;
%LET PRE_PRI=$0.00;
%LET ECASLAI_BORS=0;
%LET ECASLAI_LONS=0;
%LET ECASLAI_PRI=$0.00;
%LET ECASLAII_BORS=0;
%LET ECASLAII_LONS=0;
%LET ECASLAII_PRI=$0.00;
%LET NON_BORS=0;
%LET NON_LONS=0;
%LET NON_PRI=$0.00;
PROC SQL ;
	CREATE TABLE ECASLA_REP_TOTS AS 
		SELECT ECASLA_CAT
			,SUM(BQ) AS BOR 
			,SUM(LQ) AS LON 
			,SUM(FAT_CUR_PRI) AS PRI 
		FROM REPDS1
		GROUP BY ECASLA_CAT;
QUIT;
DATA _NULL_;
	SET ECASLA_REP_TOTS;
	IF ECASLA_CAT = 'PRE ECASLA' THEN DO;
		CALL SYMPUT('PRE_BORS',TRIM(LEFT(PUT(BOR,COMMA5.))));
		CALL SYMPUT('PRE_LONS',TRIM(LEFT(PUT(LON,COMMA5.))));
		CALL SYMPUT('PRE_PRI',TRIM(LEFT(PUT(PRI,DOLLAR20.2))));
	END;
	ELSE IF ECASLA_CAT = 'ECASLA I' THEN DO;
		CALL SYMPUT('ECASLAI_BORS',TRIM(LEFT(PUT(BOR,COMMA5.))));
		CALL SYMPUT('ECASLAI_LONS',TRIM(LEFT(PUT(LON,COMMA5.))));
		CALL SYMPUT('ECASLAI_PRI',TRIM(LEFT(PUT(PRI,DOLLAR20.2))));
	END;
	ELSE IF ECASLA_CAT = 'ECASLA II' THEN DO;
		CALL SYMPUT('ECASLAII_BORS',TRIM(LEFT(PUT(BOR,COMMA5.))));
		CALL SYMPUT('ECASLAII_LONS',TRIM(LEFT(PUT(LON,COMMA5.))));
		CALL SYMPUT('ECASLAII_PRI',TRIM(LEFT(PUT(PRI,DOLLAR20.2))));
	END;
	ELSE IF ECASLA_CAT = 'NON ECASLA' THEN DO;
		CALL SYMPUT('NON_BORS',TRIM(LEFT(PUT(BOR,COMMA5.))));
		CALL SYMPUT('NON_LONS',TRIM(LEFT(PUT(LON,COMMA5.))));
		CALL SYMPUT('NON_PRI',TRIM(LEFT(PUT(PRI,DOLLAR20.2))));
	END;
RUN;
PROC CONTENTS DATA=&DS OUT=EMPTYSET NOPRINT;RUN;
DATA _NULL_;
SET EMPTYSET;
FILE PRINT;
IF  NOBS=0 AND _N_ =1 THEN DO;
	PUT // 127*'-';
	PUT      //////
		@51 '**** NO OBSERVATIONS FOUND ****';
	PUT ////////
		@57 '-- END OF REPORT --';
	PUT /////////////
		@46 "JOB = UTLWA08     REPORT = ULWA08.LWA08R&REPNO";
	END;
RETURN;
RUN;
PROC REPORT DATA=&DS NOWD HEADSKIP SPLIT='/' SPACING=1;
	COLUMN BUYER LOC1 LOC2 LCOUNTX BF_SSN DM_PRS_LST LN_SEQ IC_LON_PGM LD_LON_1_DSB FAT_CUR_PRI 
		   PAROD CLOF LFPD LFEE BQ LQ;
	DEFINE BUYER / GROUP NOPRINT ;
	DEFINE LOC2 / GROUP NOPRINT;
	DEFINE LCOUNTX / GROUP NOPRINT;
	DEFINE LOC1 / group "ORIG/FEE%" WIDTH=4 LEFT;
	DEFINE BF_SSN / display "SSN" WIDTH=9 LEFT;
	DEFINE DM_PRS_LST / display "LAST/NAME" WIDTH=15 LEFT;
	DEFINE LN_SEQ/ display "LN/SEQ" FORMAT=3. WIDTH=3 LEFT;
	DEFINE IC_LON_PGM/ display "LOAN/TYPE" WIDTH=7 LEFT;
	DEFINE LD_LON_1_DSB /display "FIRST DISB DATE" WIDTH=8 FORMAT = MMDDYY8. LEFT;
	DEFINE FAT_CUR_PRI/ ANALYSIS "PRINCIPAL AMT SOLD" WIDTH=14 FORMAT=12.2 RIGHT;
	DEFINE PAROD/ANALYSIS "OF PRINCIPAL/DISCOUNT" WIDTH=14 FORMAT=12.2 RIGHT;
	DEFINE CLOF /ANALYSIS  "CALCULATED/LENDER/ORIG FEE" WIDTH=14 FORMAT=12.2 RIGHT;
	DEFINE LFPD/ANALYSIS "LF PRINCIPAL/DISCOUNT" WIDTH=14 FORMAT=12.2 RIGHT;
	DEFINE LFEE /ANALYSIS  "LENDER/FEE" WIDTH=14 FORMAT=12.2 RIGHT;
	DEFINE LQ / ANALYSIS NOPRINT;
	DEFINE BQ / ANALYSIS NOPRINT;
	COMPUTE BEFORE _PAGE_ ;
		LINE @1 'BUYER:  ' BUYER $10.;
		LINE @1 LOC2 $31.;
		LINE @1 'LOAN COUNT:  ' LCOUNTX $15.;
		LINE ' ';
	ENDCOMP;
	BREAK AFTER LOC2 / OL SUMMARIZE SUPPRESS PAGE;
	COMPUTE AFTER;
		LINE ' ';
		LINE @1 'SUMMARY INFORMATION';
		LINE @1 127*'*';
		LINE @1 'TOTAL NUMBER OF BORROWERS FOR BUYER' @55 BQ.SUM COMMA5.;
		LINE @1 'TOTAL NUMBER OF LOANS FOR BUYER' @55 LQ.SUM COMMA5.;
		LINE @1 'TOTAL PRINCIPAL AMOUNT SOLD FOR BUYER' @55 FAT_CUR_PRI.SUM DOLLAR20.2;
		LINE @1 'TOTAL PRINCIPAL AMOUNT RECD OF DISCOUNT FOR BUYER' @55 PAROD.SUM DOLLAR20.2;
		LINE @1 'TOTAL LENDER ORIGINATION FEE FOR BUYER' @55 CLOF.SUM DOLLAR20.2;
		LINE @1 'TOTAL LENDER FEE PRINCIPAL DISCOUNT FOR BUYER' @55 LFPD.SUM DOLLAR20.2;
		LINE @1 'TOTAL LENDER FEE FOR BUYER' @55 LFEE.SUM DOLLAR20.2;
		LINE @1 100*'=';
		LINE @1 "PRE ECALSA: BORROWERS: &PRE_BORS | LOANS: &PRE_LONS | PRINCIPAL SOLD: &PRE_PRI";
		LINE @1 "ECALSA I:   BORROWERS: &ECASLAI_BORS | LOANS: &ECASLAI_LONS | PRINCIPAL SOLD: &ECASLAI_PRI";
		LINE @1 "ECALSA II:  BORROWERS: &ECASLAII_BORS | LOANS: &ECASLAII_LONS | PRINCIPAL SOLD: &ECASLAII_PRI";
		LINE @1 "NON ECALSA: BORROWERS: &NON_BORS | LOANS: &NON_LONS | PRINCIPAL SOLD: &NON_PRI";
	ENDCOMP;
RUN;
%MEND REP_INI;
%MACRO SUMREP_INI;
TITLE "LOAN SALE SUMMARY - FEES INFORMATION REPORT";
TITLE2 "RUN DATE: &RUNDT";
TITLE3;
PROC REPORT DATA=LSR NOWD HEADSKIP SPLIT='~' SPACING=1 ;
	COLUMN IM_IST_FUL RGRP DCAT SCAT BOR_COUNT LOAN_COUNT PRIN_SUM PAROD_SUM CLOF_SUM LFPD_SUM LFEE_SUM UNQ_BOR_COUNT;
	DEFINE IM_IST_FUL / GROUP NOPRINT;
	DEFINE RGRP / GROUP NOPRINT;
	DEFINE DCAT / GROUP " ~ " WIDTH=40; 
	DEFINE SCAT / GROUP " ~ " FORMAT=$XOUT. WIDTH=4;
	DEFINE UNQ_BOR_COUNT / GROUP NOPRINT;
	DEFINE BOR_COUNT / ANALYSIS "TOTAL#~BORRS" FORMAT=COMMA6. WIDTH=6 RIGHT;
	DEFINE LOAN_COUNT / ANALYSIS "TOTAL #~OF LOANS" FORMAT=COMMA6. WIDTH=8 RIGHT;
	DEFINE PRIN_SUM  / ANALYSIS "TOTAL~PRINCIPAL~AMOUNT~SOLD" WIDTH=16 FORMAT=COMMA16.2 RIGHT;
	DEFINE PAROD_SUM / ANALYSIS "TOTAL~OF PRINCIPAL~DISCOUNT" WIDTH=16 FORMAT=COMMA16.2 RIGHT;
	DEFINE CLOF_SUM  / ANALYSIS "TOTAL~CALCULATED~LENDER~ORIG FEE" WIDTH=10 FORMAT=COMMA10.2 RIGHT;
	DEFINE LFPD_SUM  / ANALYSIS "TOTAL~LF PRINCIPAL~DISCOUNT" WIDTH=10 FORMAT=COMMA10.2 RIGHT;
	DEFINE LFEE_SUM / ANALYSIS "TOTAL~LENDER~FEE" WIDTH=10 FORMAT=COMMA10.2 RIGHT;
	BREAK AFTER RGRP / SKIP SUPPRESS SUMMARIZE OL ;
	BREAK AFTER IM_IST_FUL / PAGE;
	COMPUTE AFTER RGRP;
		LINE 131*'=';
	ENDCOMP;
	COMPUTE BEFORE _PAGE_ ;
		LINE @1 'LENDER: ' IM_IST_FUL $40.;
		LINE @1 'TOTAL UNIQUE BORROWERS: ' UNQ_BOR_COUNT COMMA6. ;
	ENDCOMP;
RUN;
%MEND SUMREP_INI;
%MACRO REP(LENDER,LENDER_NAME,BUYER1,BUYER2,REPNO);
%LET TTL = ;
/*CREATE DATA SETS FOR REPORTING SEE CRTDS MACRO DEFINITION FOR DETAILS*/
%CRTDS(REPDS1,1,&BUYER1,&LENDER);
%CRT_SUM_DS(&LENDER,EQ);

DATA _NULL_;
	SET REPDS1;
	CALL SYMPUT('TTL',TRIM(IM_IST_FUL));
RUN;
%PUT &TTL;
PROC PRINTTO PRINT=REPORT&REPNO NEW;
RUN;
OPTIONS ORIENTATION = LANDSCAPE;
OPTIONS CENTER NODATE NUMBER PAGENO=1 PS=39 LS=132;
TITLE "LOAN SALE SUMMARY - FEES INFORMATION REPORT";
TITLE2 "LENDER: &LENDER &TTL";
TITLE3 "RUN DATE: &RUNDT";
FOOTNOTE1  	"This document may contain borrowers' sensitive information that UHEAA has pledged to protect.";
FOOTNOTE2	"Please take appropriate precautions to safeguard this information.";
FOOTNOTE3	;
FOOTNOTE4 "JOB = UTLWA08     REPORT = ULWA08.LWA08R&REPNO";
/*CREATE REPORT FOR UHEAA*/
%REP_INI(REPDS1);
/*CREATE SUMMARY REPORT*/
OPTIONS ORIENTATION = LANDSCAPE;
OPTIONS CENTER NODATE NUMBER PS=39 LS=132 NOBYLINE;
%SUMREP_INI;
PROC PRINTTO;
RUN;
%MEND REP;
%REP(813894,WELLS FARGO BANK,UHEAA,NELNET,2);
%REP(819628,BANK ONE EFC - CHASE,UHEAA,NELNET,3);
%REP(811698,US BANK,UHEAA,NELNET,4);
%REP(813760,KEY BANK,UHEAA,NELNET,5);
%REP(817440,FAMILY FIRST,UHEAA,NELNET,6);
%REP(817545,GRANITE,UHEAA,NELNET,7);
%REP(817546,MOUNTAIN AMERICA,UHEAA,NELNET,8);
%REP(820200,TOOELE,UHEAA,NELNET,9);
%REP(822373,AMERICA FIRST,UHEAA,NELNET,10);
%REP(829123,UTAH CCU,UHEAA,NELNET,11);
%REP(829158,WEBER CU,UHEAA,NELNET,12);
%REP(830132,UNIV U CU,UHEAA,NELNET,13);
%REP(830146,USU COMMUNITY,UHEAA,NELNET,14);
%REP(830791,JORDAN,UHEAA,NELNET,15);
%REP(832241,SALT LAKE CITY,UHEAA,NELNET,16);
%REP(833828,DESERET FIRST,UHEAA,NELNET,17);
%REP(817455,ZIONS BANK,UHEAA,NELNET,18);
%REP(817575,ALLIANCE CU,UHEAA,NELNET,19);
%REP(834122,MOUNTAIN HIGH,UHEAA,NELNET,20);
%REP(833577,VAMCU,UHEAA,NELNET,21);
%REP(834265,INTERMOUNTAIN CU,UHEAA,NELNET,22);
%REP(834370,LIBERTY BANK,UHEAA,NELNET,23);
PROC PRINTTO PRINT=REPORT24 NEW;
RUN;
OPTIONS ORIENTATION = LANDSCAPE;
OPTIONS CENTER NODATE NUMBER PS=39 LS=132 PAGENO=1 NOBYLINE;
TITLE 'LOANS DISBURSED ON/AFTER 07/01/2008 SUMMARY';
FOOTNOTE 'JOB = UTLWA08     REPORT = ULWA08.LWA08R24';
PROC REPORT DATA=DISB_REP NOWD SPLIT='/' HEADSKIP HEADLINE ;
	COLUMN IF_SLL_OWN_SLD JUL1_IND BOR_CT BOR_CT_SALE LN_CT FAT_CUR_PRI PAROD;
	DEFINE IF_SLL_OWN_SLD / GROUP 'LENDER ID' WIDTH=9 ;
	DEFINE JUL1_IND / GROUP ' ' WIDTH=35 FORMAT=$DCAT.;
	DEFINE BOR_CT / ANALYSIS 'BORROWER/COUNT' WIDTH=8 FORMAT=COMMA6. RIGHT;
	DEFINE BOR_CT_SALE / NOPRINT;
	DEFINE LN_CT / ANALYSIS 'LOAN/COUNT' WIDTH=10 FORMAT=COMMA8. RIGHT;
	DEFINE FAT_CUR_PRI /ANALYSIS 'TOTAL/PRINCIPAL' WIDTH=20 FORMAT=DOLLAR18.2 RIGHT;
	DEFINE PAROD / ANALYSIS 'TOTAL/CALCULATED/PRINCIPAL' WIDTH=20 FORMAT=DOLLAR18.2 RIGHT;
	COMPUTE AFTER IF_SLL_OWN_SLD;
		LINE @19 104*'_' ;
		LINE @59 BOR_CT_SALE.SUM COMMA8. @71 LN_CT.SUM COMMA8. @83 FAT_CUR_PRI.SUM DOLLAR18.2 
			@105 PAROD.SUM DOLLAR18.2;
		LINE ' ';
		LINE ' ';
	ENDCOMP;
	COMPUTE AFTER;
		LINE '';
		LINE @5 'TOTAL PRINCIPAL FOR ALL LOANS:            ' FAT_CUR_PRI.SUM DOLLAR18.2;
		LINE @5 'TOTAL CALCULATED PRINCIPAL FOR ALL LOANS: ' PAROD.SUM DOLLAR18.2;
	ENDCOMP;
RUN;
%CRT_SUM_DS(BLENDER,NE);
%SUMREP_INI;
PROC PRINTTO;
RUN;
PROC SORT DATA=BDFL;
	BY IM_LDR_FUL;
RUN;
DATA _NULL_;
SET  WORK.BDFL;
FILE REPORT25 DELIMITER=',' DSD DROPOVER LRECL=32767;
	FORMAT IF_SLL_OWN_SLD $8. ;
	FORMAT IM_LDR_FUL $40. ;
	FORMAT TOT_PRIN BEST12. ;
	FORMAT BOR_SELBUY BEST12. ;
	FORMAT TOT_LONS BEST12. ;
	FORMAT PAVE BEST12. ;
	FORMAT ACC_PRIN BEST12. ;
	FORMAT ACC_BORS BEST12. ;
	FORMAT ACC_AVE BEST12. ;
	FORMAT TOT_LFEE BEST12. ;
	FORMAT CLOF_3 BEST12. ;
	FORMAT CLOF_2 BEST12. ;
	FORMAT CLOF_1P5 BEST12. ;
	FORMAT ZERO_OF_TOTAL BEST12. ;
	FORMAT LT_OCT1_TOT BEST12. ;
	FORMAT LT_OCT1_CUR_INT BEST12. ;
	FORMAT LT_OCT1_BORS BEST12. ;
	FORMAT LT_OCT1_LONS BEST12. ;
	FORMAT GE_OCT1_TOT BEST12. ;
	FORMAT GE_OCT1_CUR_INT BEST12. ;
	FORMAT GE_OCT1_BORS BEST12. ;
	FORMAT GE_OCT1_LONS BEST12. ;
	FORMAT PRE_ECASLA_PRIN BEST12.;
	FORMAT NON_ECASLA_PRIN BEST12.;
	FORMAT PRE_NON_PRIN	BEST12.;
	FORMAT ECASLAI_PRIN	BEST12.;
	FORMAT ECASLAII_PRIN BEST12.;
	FORMAT PRE_ECASLA_INT BEST12.;
	FORMAT NON_ECASLA_INT BEST12.;
	FORMAT PRE_NON_INT BEST12.;
	FORMAT ECASLAI_INT BEST12.;
	FORMAT ECASLAII_INT	BEST12.;
	FORMAT PRE_ECASLA_BORS BEST12.;
	FORMAT NON_ECASLA_BORS BEST12.;
	FORMAT PRE_NON_BORS	BEST12.;
	FORMAT ECASLAI_BORS	BEST12.;
	FORMAT ECASLAII_BORS BEST12.;
	FORMAT PRE_ECASLA_LONS BEST12.;
	FORMAT NON_ECASLA_LONS BEST12.;
	FORMAT PRE_NON_LONS	BEST12.;
	FORMAT ECASLAI_LONS	BEST12.;
	FORMAT ECASLAII_LONS BEST12.;
	FORMAT ECASLAI_LFEE	BEST12.;
	FORMAT ECASLAII_LFEE BEST12.;

IF _N_ = 1 THEN DO;
   PUT
		'IF_SLL_OWN_SLD'
		','
		'IM_LDR_FUL'
		','
		'TOT_PRIN'
		','
		'PRE_ECASLA_PRIN'
		',' 
		'NON_ECASLA_PRIN'
		','
		'PRE_NON_PRIN'
		','
		'ECASLAI_PRIN'
		','
		'ECASLAII_PRIN'
		','
		'PRE_ECASLA_INT'
		','
		'NON_ECASLA_INT'
		','
		'PRE_NON_INT'
		','
		'ECASLAI_INT'
		','
		'ECASLAII_INT'
		','
		'BOR_SELBUY'
		','
		'PRE_ECASLA_BORS'
		','
		'NON_ECASLA_BORS'
		','
		'PRE_NON_BORS'
		','
		'ECASLAI_BORS'
		','
		'ECASLAII_BORS'
		','
		'TOT_LONS'
		','
		'PRE_ECASLA_LONS'
		','
		'NON_ECASLA_LONS'
		','
		'PRE_NON_LONS'
		','
		'ECASLAI_LONS'
		','
		'ECASLAII_LONS'
		','
		'PAVE'
		','
		'ACC_PRIN'
		','
		'ACC_BORS'
		','
		'ACC_AVE'
		','
		'TOT_LFEE'
		','
		'ECASLAI_LFEE'
		','
		'ECASLAII_LFEE'
		','
		'CLOF_3'
		','
		'CLOF_2'
		','
		'CLOF_1P5'
		','
		'ZERO_OF_TOTAL'
		','
		'LT_OCT1_TOT'
		','
		'LT_OCT1_CUR_INT'
		','
		'LT_OCT1_BORS'
		','
		'LT_OCT1_LONS'
		','
		'GE_OCT1_TOT'
		','
		'GE_OCT1_CUR_INT'
		','
		'GE_OCT1_BORS'
		','
		'GE_OCT1_LONS'
	   ;
END;
DO;
	PUT IF_SLL_OWN_SLD $ @;
	PUT IM_LDR_FUL $ @;
	PUT TOT_PRIN @;
	PUT PRE_ECASLA_PRIN @;
	PUT NON_ECASLA_PRIN @;
	PUT PRE_NON_PRIN @;
	PUT ECASLAI_PRIN @;
	PUT ECASLAII_PRIN @;
	PUT PRE_ECASLA_INT @;
	PUT NON_ECASLA_INT @;
	PUT PRE_NON_INT @;
	PUT ECASLAI_INT @;
	PUT ECASLAII_INT @;
	PUT BOR_SELBUY @;
	PUT PRE_ECASLA_BORS @;
	PUT NON_ECASLA_BORS @;
	PUT PRE_NON_BORS @;
	PUT ECASLAI_BORS @;
	PUT ECASLAII_BORS @;
	PUT TOT_LONS @;
	PUT PRE_ECASLA_LONS @;
	PUT NON_ECASLA_LONS @;
	PUT PRE_NON_LONS @;
	PUT ECASLAI_LONS @;
	PUT ECASLAII_LONS @;
	PUT PAVE @;
	PUT ACC_PRIN @;
	PUT ACC_BORS @;
	PUT ACC_AVE @;
	PUT TOT_LFEE @;
	PUT ECASLAI_LFEE @;
	PUT ECASLAII_LFEE @;
	PUT CLOF_3 @;
	PUT CLOF_2 @;
	PUT CLOF_1P5 @;
	PUT ZERO_OF_TOTAL @;
	PUT LT_OCT1_TOT @;
	PUT LT_OCT1_CUR_INT @;
	PUT LT_OCT1_BORS @;
	PUT LT_OCT1_LONS @;
	PUT GE_OCT1_TOT @;
	PUT GE_OCT1_CUR_INT @;
	PUT GE_OCT1_BORS @;
	PUT GE_OCT1_LONS ;
END;
RUN;
/*DETAIL FILE*/
/*DATA _NULL_;*/
/*SET  WORK.DISB_REP;*/
/*FILE 'T:\SAS\UTLWA08.R24.Detail.txt' DELIMITER=',' DSD DROPOVER LRECL=32767;*/
/*   FORMAT SALEID $7. ;*/
/*   FORMAT BF_SSN $9. ;*/
/*   FORMAT JUL1_IND $1. ;*/
/*   FORMAT LN_SEQ BEST12. ;*/
/*   FORMAT DM_PRS_LST $23. ;*/
/*   FORMAT DM_PRS_1 $13. ;*/
/*   FORMAT IC_LON_PGM $6. ;*/
/*   FORMAT LD_LON_1_DSB DATE9. ;*/
/*   FORMAT IF_TIR_PCE $4. ;*/
/*   FORMAT FAT_CUR_PRI 10.2 ;*/
/*   FORMAT IF_SLL_OWN_SLD $8. ;*/
/*   FORMAT IM_IST_FUL $40. ;*/
/*   FORMAT BUYER $6. ;*/
/*   FORMAT LOC1 $4. ;*/
/*   FORMAT LOC2 $33. ;*/
/*   FORMAT OFEE BEST12. ;*/
/*   FORMAT PAROD 10.2 ;*/
/*   FORMAT CLOF 10.2 ;*/
/*   FORMAT BOR_CT BEST12. ;*/
/*   FORMAT LN_CT BEST12. ;*/
/*IF _N_ = 1 THEN DO;*/
/*   PUT 'SALEID,BF_SSN,JUL1_IND,LN_SEQ,DM_PRS_LST,DM_PRS_1,IC_LON_PGM,LD_LON_1_DSB,IF_TIR_PCE,FAT_CUR_PRI'*/
/*		',IF_SLL_OWN_SLD,IM_IST_FUL,BUYER,LOC1,LOC2,OFEE,PAROD,CLOF,BOR_CT,LN_CT';*/
/*END;*/
/*DO;*/
/*	PUT SALEID $ @;*/
/*	PUT BF_SSN $ @;*/
/*	PUT JUL1_IND $ @;*/
/*	PUT LN_SEQ @;*/
/*	PUT DM_PRS_LST $ @;*/
/*	PUT DM_PRS_1 $ @;*/
/*	PUT IC_LON_PGM $ @;*/
/*	PUT LD_LON_1_DSB @;*/
/*	PUT IF_TIR_PCE $ @;*/
/*	PUT FAT_CUR_PRI @;*/
/*	PUT IF_SLL_OWN_SLD $ @;*/
/*	PUT IM_IST_FUL $ @;*/
/*	PUT BUYER $ @;*/
/*	PUT LOC1 $ @;*/
/*	PUT LOC2 $ @;*/
/*	PUT OFEE @;*/
/*	PUT PAROD @;*/
/*	PUT CLOF @;*/
/*	PUT BOR_CT @;*/
/*	PUT LN_CT ;*/
/*END;*/
/*RUN;*/
/*LSB BORROWERS - CUT AND PAST FROM THE SAS LOG*/
/*DATA _NULL_;*/
/*	SET DISB_REP;*/
/*	WHERE JUL1_IND = 'Y';*/
/*	PUT BF_SSN ',' LN_SEQ;*/
/*RUN;*/
/*IF_SLL_OWN_SLD*/
/*IM_IST_FUL*/
