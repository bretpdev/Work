*-------------------------------*
|UTLWS24 IVR - BORROWER PROFILE |
*-------------------------------*;
LIBNAME DLGSUTWH DB2 DATABASE=DLGSUTWH OWNER=OLWHRM1;
%LET RPTLIB = %SYSGET(reportdir);
%LET FILEDIR = /sas/whse/progrevw;
/*%LET RPTLIB = T:\SAS;*/
/*%LET FILEDIR = Q:\Process Automation\RefCalDays;*/
FILENAME REPORT2 "&RPTLIB/ULWS24.LWS24R2";
FILENAME REPORT3 "&RPTLIB/ULWS24.LWS24R3";
FILENAME REPORT4 "&RPTLIB/ULWS24.LWS24R4";
FILENAME REPORTZ "&RPTLIB/ULWS24.LWS24RZ";
/*************************************************************************************
* NOTE: THE IVR.txt FILE THAT THIS DATA STEP READS NEEDS TO FOLLOW THIS CONVENTION
* VAL1(IVRDLQ1),VAL2("DLQAGNT1")
* WHERE IVRDLQ1 IS A INTEGER AND DLQAGNT1 IS CHARACTER DATA 
**************************************************************************************/
DATA DYVARS;
INFILE "&FILEDIR/IVR.txt" DLM=',' MISSOVER DSD;
INPUT VAL1 VAL2 $ ;
RUN;
/**************************************************************************************
* NOTE: THE PAY_TRX.txt FILE THAT THIS DATA STEP READS NEEDS TO FOLLOW THIS CONVENTION
* VAL1(PAYMENT TYPE),VAL2(REV_REA),VAL3(PAY_TYP_DESC)
****************************************************************************************/
DATA PAY_TYP;
INFILE "&FILEDIR/PAY_TRX.txt" DLM=',' MISSOVER DSD;
LENGTH PTYP $ 4. REV_REA $ 1. PAY_TYP_DESC $ 100.; 
INPUT PTYP $ REV_REA $ PAY_TYP_DESC $;
RUN;
DATA _NULL_;
     CALL SYMPUT('TODAY',"'"||PUT(INTNX('DAY',TODAY(),0,'BEGINNING'), MMDDYYS10.)||"'");
RUN;
DATA _NULL_;
SET DYVARS;
     CALL SYMPUT('IVRDLQ1',VAL1);
     CALL SYMPUT('DLQAGNT1',VAL2);
RUN;
/*%SYSLPUT TODAY = &TODAY;*/
/*%SYSLPUT IVRDLQ1 = &IVRDLQ1;*/
/*%SYSLPUT DLQAGNT1 = &DLQAGNT1;*/
/*LIBNAME  WORKLOCL  REMOTE  SERVER=CYPRUS  SLIBREF=WORK;*/
/*PUT DATA SET ON DUSTER FOR PROCESSING - COMMENT OUT DATASTEP WHEN PROMOTED*/
/*DATA WORKLOCL.PAY_TYP;*/
/*SET PAY_TYP;*/
/*RUN;*/
/*RSUBMIT;*/
%MACRO AUTONUM(DS);
DATA &DS;
SET &DS;
AUTONUM = _N_;
RUN;
%MEND AUTONUM;
%MACRO SQLCHECK (SQLRPT= );
%IF &SQLXRC NE 0 %THEN %DO;
	DATA _NULL_;
    FILE REPORTZ NOTITLES;
    PUT @01 " ********************************************************************* "
      / @01 " ****  THE SQL CODE ABOVE HAS EXPERIENCED AN ERROR.               **** "
      / @01 " ****  THE SAS LOG IN &SQLRPT SHOULD BE REVIEWED.          **** "       
      / @01 " ********************************************************************* "
      / @01 " ****  THE SQL ERROR CODE IS  &SQLXRC  AND THE SQL ERROR MESSAGE  **** "
      / @01 " ****  &SQLXMSG   **** "
      / @01 " ********************************************************************* ";
	RUN;
%END;
%MEND;
PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
/**********************************************
* LOAN LEVEL DEMOGRAPHIC INFO AND ACCT BALANCE
***********************************************/
CREATE TABLE IVR_A AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT DISTINCT LN10.BF_SSN
	,PD10.DF_SPE_ACC_ID
	,PD10.DD_BRT
	,PD10.DM_PRS_1
	,PD10.DM_PRS_MID
	,PD10.DM_PRS_LST
	,SUBSTR(PD30.DF_ZIP_CDE,1,5) AS DF_ZIP_CDE
	,SUM(
		COALESCE(LN10.LA_CUR_PRI,0) + 
		COALESCE(DW01.WA_TOT_BRI_OTS,0) +
		COALESCE(LN10.LA_LTE_FEE_OTS,0)
		) AS ACCT_BAL
FROM OLWHRM1.LN10_LON LN10
LEFT OUTER JOIN OLWHRM1.PD10_PRS_NME PD10
	ON LN10.BF_SSN = PD10.DF_PRS_ID
LEFT OUTER JOIN OLWHRM1.PD30_PRS_ADR PD30
	ON PD10.DF_PRS_ID = PD30.DF_PRS_ID
	AND PD30.DC_ADR = 'L'
LEFT OUTER JOIN OLWHRM1.DW01_DW_CLC_CLU DW01
	ON LN10.BF_SSN = DW01.BF_SSN
	AND LN10.LN_SEQ = DW01.LN_SEQ
WHERE LN10.LA_CUR_PRI > 0
GROUP BY LN10.BF_SSN
	,PD10.DF_SPE_ACC_ID
	,PD10.DD_BRT
	,PD10.DM_PRS_1
	,PD10.DM_PRS_MID
	,PD10.DM_PRS_LST
	,SUBSTR(PD30.DF_ZIP_CDE,1,5)
FOR READ ONLY WITH UR
);
/**********************************************************
* FINANCIAL TRANSACTION INFORMATION - THIS IS A HUGE QUERY
***********************************************************/
CREATE TABLE LN90_RDAT AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT DISTINCT LN90.BF_SSN
	,LN90.LN_SEQ
	,LN90.LN_FAT_SEQ
	,LN90.PC_FAT_TYP||LN90.PC_FAT_SUB_TYP AS PTYP
	,LN90.LA_FAT_PCL_FEE
	,LN90.LA_FAT_NSI
	,LN90.LA_FAT_LTE_FEE
	,LN90.LA_FAT_ILG_PRI
	,LN90.LA_FAT_CUR_PRI
	,LN90.LA_FAT_NSI_ACR
	,LN90.LD_FAT_EFF
	,LN90.LC_FAT_REV_REA
FROM OLWHRM1.LN90_FIN_ATY LN90
INNER JOIN OLWHRM1.LN10_LON LN10
	ON LN10.BF_SSN = LN90.BF_SSN
WHERE LN90.LC_STA_LON90 = 'A'
AND LN10.LA_CUR_PRI > 0
FOR READ ONLY WITH UR
);
/***********************************************************
* GET BILL INFO FROM REPAYMENT SCHEDULE - ANOTHER BIG QUERY
************************************************************/
CREATE TABLE RPS AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT DISTINCT A.BF_SSN 
	,A.LN_RPS_SEQ
	,B.LN_GRD_RPS_SEQ
	,B.LN_RPS_TRM
	,SUM(B.LA_RPS_ISL) AS AMTDU
	,C.LD_RPS_1_PAY_DU
	,DAY(C.LD_RPS_1_PAY_DU) AS BR_DU_DAY
FROM OLWHRM1.LN65_LON_RPS A
INNER JOIN OLWHRM1.LN66_LON_RPS_SPF B
	ON A.BF_SSN = B.BF_SSN
	AND A.LN_SEQ = B.LN_SEQ
	AND A.LN_RPS_SEQ = B.LN_RPS_SEQ
INNER JOIN OLWHRM1.RS10_BR_RPD C
	ON A.BF_SSN = C.BF_SSN
	AND A.LN_RPS_SEQ = C.LN_RPS_SEQ
WHERE A.LC_STA_LON65 = 'A'
AND C.LC_STA_RPST10 = 'A'
GROUP BY A.BF_SSN 
	,A.LN_RPS_SEQ
	,B.LN_GRD_RPS_SEQ
	,B.LN_RPS_TRM
	,C.LD_RPS_1_PAY_DU
	,DAY(C.LD_RPS_1_PAY_DU)
ORDER BY A.BF_SSN 
	,A.LN_RPS_SEQ
	,B.LN_GRD_RPS_SEQ
FOR READ ONLY WITH UR
);
/*****************
* GET SKIP STATUS
******************/
CREATE TABLE SKIP AS
SELECT DISTINCT DF_PRS_ID AS BF_SSN
	,SKP_STA
FROM CONNECTION TO DB2 (
	SELECT DF_PRS_ID
		,'SKIP' AS SKP_STA
	FROM OLWHRM1.PD30_PRS_ADR
	WHERE DI_VLD_ADR = 'N'
	AND DC_ADR = 'L'
UNION
	SELECT DF_PRS_ID
		,'SKIP' AS SKP_STA
	FROM OLWHRM1.PD42_PRS_PHN
	WHERE DI_PHN_VLD = 'N'
	AND DC_PHN = 'H'
FOR READ ONLY WITH UR
);
/***********************
* GET BANKRUPTCY STATUS
************************/
CREATE TABLE BKRPTY AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT DF_PRS_ID AS BF_SSN
	,'BANKRUPTCY' AS BK_STA
FROM OLWHRM1.PD24_PRS_BKR
WHERE DC_BKR_STA = '06'
FOR READ ONLY WITH UR
);
/***********************
* GET # DAYS DELINQUENT
************************/
CREATE TABLE LN16 AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT BF_SSN
	,LN_DLQ_MAX
FROM OLWHRM1.LN16_LON_DLQ_HST
WHERE LN_DLQ_MAX > &IVRDLQ1
AND LC_STA_LON16 = '1'
FOR READ ONLY WITH UR
);
/***********************
* HOME EMAIL VALIDITY
************************/
CREATE TABLE EMAIL AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT DF_PRS_ID AS BF_SSN
	,DI_VLD_ADR_EML
FROM OLWHRM1.PD32_PRS_ADR_EML
WHERE DC_ADR_EML = 'H'
AND DC_STA_PD32 = 'A'
FOR READ ONLY WITH UR
);
/***********************
* BORROWER STATUS
************************/
CREATE TABLE BR_STA AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT DISTINCT BF_SSN
	,CASE 
		WHEN WC_DW_LON_STA IN ('06') THEN 'CURE'
		ELSE ''
	 END AS C1_STA
	,CASE
		WHEN WC_DW_LON_STA IN ('16','17') THEN 'DEATH'
		ELSE ''
	 END AS D1_STA
	,CASE
		WHEN WC_DW_LON_STA IN ('18','19') THEN 'DISABILITY'
	 	ELSE ''
	 END AS D2_STA
FROM OLWHRM1.DW01_DW_CLC_CLU
WHERE WC_DW_LON_STA IN (
	'06','16','17','18','19'
	)
FOR READ ONLY WITH UR
);
/***********************
* INTEREST INFO
************************/
CREATE TABLE MR64_A AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT BF_SSN 
	,SUM(COALESCE(LA_BR_CAP_INT_PD,0)) AS LA_BR_CAP_INT_PD
	,SUM(COALESCE(LA_BR_OID_PD,0)) AS LA_BR_OID_PD
	,SUM(COALESCE(LA_BR_INT_PD_YR,0)) AS LA_BR_INT_PD_YR
/*	,YEAR(LD_INT_PD_RPT_IRS) AS LD_INT_PD_RPT_IRS*/
FROM OLWHRM1.MR64_BR_TAX 
WHERE LC_STA_MR64 = 'A'
AND YEAR(LD_STA_MR64) = YEAR(CURRENT DATE) 
GROUP BY BF_SSN
/*,YEAR(LD_INT_PD_RPT_IRS)*/
FOR READ ONLY WITH UR
);
/********************************************************************************
* LOAN LEVEL INCLUSION EDITS FOR MULTIPLE REPAYMENT WCHEDULES AND MULTIPLE BILLS
*********************************************************************************/
CREATE TABLE LNLVED AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT DISTINCT A.BF_SSN	
FROM OLWHRM1.DW01_DW_CLC_CLU A
INNER JOIN OLWHRM1.LN10_LON B
	ON A.BF_SSN = B.BF_SSN
	AND A.LN_SEQ = B.LN_SEQ
WHERE A.WC_DW_LON_STA IN (
	'03','07','08','09','10',
	'11','13','14','15'
	)
AND A.WD_LON_RPD_SR <= &TODAY
AND B.LA_CUR_PRI > 0
FOR READ ONLY WITH UR
);
/*----------------------------------------------------------------------------
| MULTIPLE REPAYMENT SCHEDULE INFO - APPLY LOAN LEVEL EDITS IN TABLE CREATION
------------------------------------------------------------------------------*/
CREATE TABLE RS10 AS
SELECT DISTINCT A.*
FROM CONNECTION TO DB2 (
SELECT BF_SSN	
	,'BSV' AS MLT_RPS
	,COUNT(*) AS COUNT
FROM OLWHRM1.RS10_BR_RPD
WHERE LC_STA_RPST10 = 'A'
GROUP BY BF_SSN	
HAVING COUNT(*) > 1
FOR READ ONLY WITH UR
) A
INNER JOIN LNLVED B
	ON A.BF_SSN = B.BF_SSN
;
/*------------------------------------------------------------------
| MULTIPLE BILL DUE DAYS - APPLY LOAN LEVEL EDITS IN TABLE CREATION
--------------------------------------------------------------------*/
CREATE TABLE MT1_BILL AS
SELECT DISTINCT A.*
FROM CONNECTION TO DB2 (
SELECT DISTINCT A.BF_SSN	
	,'BSV' AS MLT_BIL
FROM OLWHRM1.RS10_BR_RPD A
INNER JOIN OLWHRM1.RS10_BR_RPD B
	ON A.BF_SSN = B.BF_SSN
	AND A.LC_STA_RPST10 = B.LC_STA_RPST10
WHERE A.LC_STA_RPST10 = 'A'
AND DAY(A.LD_RPS_1_PAY_DU) <> DAY(B.LD_RPS_1_PAY_DU)
ORDER BY A.BF_SSN
FOR READ ONLY WITH UR
) A
INNER JOIN LNLVED B
	ON A.BF_SSN = B.BF_SSN
;
DISCONNECT FROM DB2;
/*%PUT  SQLXRC= >>> &SQLXRC <<< ||| SQLXMSG= >>> &SQLXMSG >>>  ;  * INCLUDES ERROR MESSAGES TO SAS LOG  ;*/
/*%SQLCHECK (SQLRPT=ULWS24.LWS24RZ);*/
/*QUIT;*/
/***************************************************************
* FINANCIAL TRANSACTION PROCESSING - THIS PROCESSES TONS OF DATA
****************************************************************/
PROC SQL;
CREATE TABLE LN90 AS 
SELECT C.DF_SPE_ACC_ID
	,A.PTYP
	,A.LD_FAT_EFF
	,A.LC_FAT_REV_REA
	,B.PAY_TYP_DESC
	,SUM(
		COALESCE(A.LA_FAT_PCL_FEE,0) +
		COALESCE(A.LA_FAT_LTE_FEE,0) +
		COALESCE(A.LA_FAT_ILG_PRI,0) +
		COALESCE(A.LA_FAT_CUR_PRI,0) +
		COALESCE(A.LA_FAT_NSI,0)
		) AS TRX_AMT 
FROM LN90_RDAT A
INNER JOIN PAY_TYP B
	ON A.PTYP = B.PTYP
	AND A.LC_FAT_REV_REA = B.REV_REA
INNER JOIN IVR_A C
	ON A.BF_SSN = C.BF_SSN
GROUP BY C.DF_SPE_ACC_ID
	,A.PTYP
	,A.LD_FAT_EFF
	,A.LC_FAT_REV_REA
	,B.PAY_TYP_DESC
ORDER BY C.DF_SPE_ACC_ID
	,A.LD_FAT_EFF DESC
	,A.PTYP DESC
;
QUIT;
DATA LN90 (DROP=I);
SET LN90;
BY DF_SPE_ACC_ID;
IF FIRST.DF_SPE_ACC_ID THEN 
	I=1;
ELSE I+1;
IF I <= 3 THEN 
	OUTPUT;
ELSE DELETE;
RUN;
%AUTONUM(LN90);
/*************************************
* BILL PROCESSING ANOTHER TON OF DATA
**************************************/
PROC SORT DATA=RPS; BY BF_SSN LN_RPS_SEQ LN_GRD_RPS_SEQ;RUN;
DATA RPS (DROP=LD_RPS_1_PAY_DU);
FORMAT GRD_BEG_DT GRD_END_DT MMDDYY10.;
SET RPS;
BY BF_SSN LN_RPS_SEQ;
RETAIN GRD_END_DT;
IF FIRST.LN_RPS_SEQ THEN DO;
	GRD_BEG_DT = LD_RPS_1_PAY_DU;
	GRD_END_DT = INTNX('MONTH',LD_RPS_1_PAY_DU,+LN_RPS_TRM,'S');
	END;
ELSE DO;
	GRD_BEG_DT = GRD_END_DT;
	GRD_END_DT = INTNX('MONTH',GRD_BEG_DT,+LN_RPS_TRM,'S');
	END;
RUN;
DATA RPS;
SET RPS;
IF DATE() >= GRD_BEG_DT AND DATE() <= GRD_END_DT THEN OUTPUT;
	ELSE DELETE;
RUN;
/*SUM REPAYMENT AMOUNTS AND SELECT MIN DUE DAY*/
PROC SQL;
CREATE TABLE RPSU AS 
SELECT BF_SSN
	,MIN(BR_DU_DAY) AS BR_DU_DAY
	,SUM(AMTDU) AS 	AMTDU
FROM RPS
GROUP BY BF_SSN
;
QUIT;
/*************************************
* DAYS DELINQUENT PROCESSING
**************************************/
PROC SQL;
CREATE TABLE LN16U AS
SELECT BF_SSN
	,MAX(LN_DLQ_MAX) AS LN_DLQ_MAX
FROM LN16
GROUP BY BF_SSN
;
QUIT;
/****************************
* BORROWER STATUS PROCESSING
*****************************/
DATA BR_STA;
SET BR_STA;
BOR_STA = LEFT(TRIM(C1_STA))||' '||LEFT(TRIM(D1_STA))||' '||LEFT(TRIM(D2_STA));
RUN;
/**************************
* INTEREST FILE PROCESSING
***************************/
PROC SQL;
CREATE TABLE MR64 AS
SELECT B.DF_SPE_ACC_ID
	,A.LA_BR_CAP_INT_PD
	,A.LA_BR_OID_PD
	,A.LA_BR_INT_PD_YR
FROM MR64_A A
INNER JOIN IVR_A B
	ON A.BF_SSN = B.BF_SSN
;
QUIT;
%AUTONUM(MR64);
/****************************
* PUT EVERYTHING TOGETHER
*****************************/
*RSUBMIT;
PROC SQL;
CREATE TABLE IVR AS 
SELECT DISTINCT A.BF_SSN
	,A.DF_SPE_ACC_ID
	,A.DD_BRT
	,A.DM_PRS_1
	,A.DM_PRS_MID
	,A.DM_PRS_LST
	,A.ACCT_BAL
	,C.BR_DU_DAY
	,C.AMTDU
	,D.SKP_STA
	,E.BK_STA
	,F.LN_DLQ_MAX
	,G.DI_VLD_ADR_EML
	,H.BOR_STA
	,"&IVRDLQ1" AS IVRDLQ1
	,CASE
		WHEN LN_DLQ_MAX IS NOT NULL THEN "&DLQAGNT1" 
		ELSE ''
	 END AS DLQAGNT1
	,A.DF_ZIP_CDE
	,I.MLT_RPS
	,J.MLT_BIL
FROM IVR_A A
LEFT OUTER JOIN RPSU C
	ON A.BF_SSN = C.BF_SSN
LEFT OUTER JOIN SKIP D
	ON A.BF_SSN = D.BF_SSN
LEFT OUTER JOIN BKRPTY E
	ON A.BF_SSN = E.BF_SSN
LEFT OUTER JOIN LN16U F
	ON A.BF_SSN = F.BF_SSN
LEFT OUTER JOIN EMAIL G
	ON A.BF_SSN = G.BF_SSN
LEFT OUTER JOIN BR_STA H
	ON A.BF_SSN = H.BF_SSN
LEFT OUTER JOIN RS10 I
	ON A.BF_SSN = I.BF_SSN
LEFT OUTER JOIN MT1_BILL J
	ON A.BF_SSN = J.BF_SSN
;
QUIT;
/*ENDRSUBMIT;*/
/***************************************************
* USE IN TESTING ONLY
***************************************************/
/*RSUBMIT;*/
/*PROC SQL;*/
/*CREATE TABLE X AS */
/*SELECT BF_SSN*/
/*	,COUNT(*) AS COUNT*/
/*FROM IVR*/
/*GROUP BY BF_SSN*/
/*HAVING COUNT(*) > 1;*/
/*QUIT;*/
/*PROC SQL;*/
/*CREATE TABLE MTO AS */
/*SELECT A.**/
/*FROM IVR A*/
/*INNER JOIN X*/
/*	ON A.BF_SSN = X.BF_SSN*/
/*ORDER BY A.BF_SSN*/
/*;*/
/*QUIT;*/
/*ENDRSUBMIT;*/
/*DATA MTO;*/
/*SET WORKLOCL.MTO;*/
/*RUN;*/
/*PROC EXPORT DATA=MTO*/
/*            OUTFILE= "T:\SAS\IVR Dups.xls" */
/*            DBMS=EXCEL2000 REPLACE;*/
/*RUN;*/
/*DATA IVR;SET WORKLOCL.IVR;RUN;*/
/*DATA LN90;SET WORKLOCL.LN90;RUN;*/
/*DATA MR64;SET WORKLOCL.MR64;RUN;*/
PROC SORT DATA=IVR;
BY BF_SSN;
RUN;
/*******************************
* BORROWER LEVEL IVR FILE
*******************************/
DATA _NULL_;
SET  WORK.IVR;
FILE REPORT2 DELIMITER=',' DSD DROPOVER LRECL=32767;
	FORMAT DF_SPE_ACC_ID $10. ;
	FORMAT DD_BRT MMDDYY10. ;
	FORMAT DM_PRS_1 $13. ;
	FORMAT DM_PRS_MID $13. ;
	FORMAT DM_PRS_LST $23. ;
	FORMAT ACCT_BAL BEST12. ;
	FORMAT BR_DU_DAY BEST12. ;
	FORMAT AMTDU BEST12. ;
	FORMAT SKP_STA $4. ;
	FORMAT BK_STA $10. ;
	FORMAT LN_DLQ_MAX BEST12. ;
	FORMAT DI_VLD_ADR_EML $1. ;
	FORMAT BOR_STA $21. ;
	FORMAT DLQAGNT1 $3. ;
    FORMAT DF_ZIP_CDE $5. ;
	FORMAT MLT_BIL $3. ;
	FORMAT MLT_RPS $3. ;
DO;
	PUT DF_SPE_ACC_ID $ @;
   	PUT DD_BRT @;
	PUT DM_PRS_1 $ @;
   	PUT DM_PRS_MID $ @;
   	PUT DM_PRS_LST $ @;
   	PUT ACCT_BAL @;
   	PUT AMTDU @;
	PUT BR_DU_DAY @;
	PUT LN_DLQ_MAX @;
   	PUT DI_VLD_ADR_EML $ @;
	PUT SKP_STA $ @;
   	PUT BK_STA $ @;
    PUT BOR_STA $ @;
   	PUT DLQAGNT1 $ @;
	PUT DF_ZIP_CDE $ @;
	PUT MLT_BIL $ @;
	PUT MLT_RPS $ ;
END;
RUN;
/*******************************
* FINANCIAL IVR FILE
*******************************/
DATA _NULL_;
SET  WORK.LN90;
FILE REPORT3 DELIMITER=',' DSD DROPOVER LRECL=32767;
	FORMAT DF_SPE_ACC_ID $10. ;
	FORMAT PTYP $4. ;
	FORMAT LD_FAT_EFF MMDDYY10. ;
	FORMAT LC_FAT_REV_REA $1. ;
	FORMAT TRX_AMT 10.2 ;
	FORMAT AUTONUM BEST12. ;
	FORMAT PAY_TYP_DESC $100.;
DO;
	PUT AUTONUM @;
	PUT DF_SPE_ACC_ID $ @;
	PUT PTYP $ @;
	PUT PAY_TYP_DESC $ @;
	PUT LD_FAT_EFF @;
	PUT LC_FAT_REV_REA $ @;
	PUT TRX_AMT ;
END;
RUN;
/*******************************
* INTEREST IVR FILE
*******************************/
DATA _NULL_;
SET  WORK.MR64;
FILE REPORT4 DELIMITER=',' DSD DROPOVER LRECL=32767;
	FORMAT DF_SPE_ACC_ID $10. ;
	FORMAT AUTONUM BEST12. ;
	FORMAT LA_BR_CAP_INT_PD 8.;
	FORMAT LA_BR_OID_PD 8.;
	FORMAT LA_BR_INT_PD_YR 8.;
DO;
	PUT AUTONUM @;
	PUT DF_SPE_ACC_ID $ @;
	PUT LA_BR_CAP_INT_PD @;
	PUT LA_BR_OID_PD @;
	PUT LA_BR_INT_PD_YR ;
END;
RUN;
