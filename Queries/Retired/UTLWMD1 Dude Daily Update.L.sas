%MACRO UPDATE_DATA(BASE_DS,UPDATE_DS,PRI_KEY);
PROC SORT DATA=&UPDATE_DS; BY &PRI_KEY; RUN;
PROC SORT DATA=&BASE_DS; BY &PRI_KEY; RUN;
DATA &BASE_DS;
MERGE &BASE_DS &UPDATE_DS;
BY &PRI_KEY;
RUN;
%MEND UPDATE_DATA;
%MACRO GOODBYE_NULL(TABLE,COLUMN,BLANK=0);
PROC SQL NOPRINT;
CONNECT TO ODBC AS MD (&MD);
SELECT COUNT(*) 
FROM CONNECTION TO MD (
     UPDATE &TABLE
	 	SET &COLUMN = &BLANK
		WHERE &COLUMN IS NULL);
DISCONNECT FROM MD;
QUIT;
OPTIONS OBS=MAX;
%MEND;
%MACRO GOODBYE_NULLCHAR(TABLE,COLUMN,BLANK='');
PROC SQL NOPRINT;
CONNECT TO ODBC AS MD (&MD);
SELECT COUNT(*) 
FROM CONNECTION TO MD (
     UPDATE &TABLE
	 	SET &COLUMN = &BLANK
		WHERE &COLUMN IS NULL);
DISCONNECT FROM MD;
QUIT;
OPTIONS OBS=MAX;
%MEND;

/*%LET RPTLIB = T:\SAS;*/
%LET RPTLIB = X:\PADD\FTP;

/*This is a fall brack directory to check for files*/
/*%LET RPTLIBX = t\sas;*/
%LET RPTLIBX = X:\archive\sas;

/*%LET UPLIB = C:\Documents and Settings\nowens\Desktop\SAS DEV\Complete\;*/
%LET UPLIB = X:\Sessions\Local SAS Schedule\;

/*%LET MD = %STR(REQUIRED="FILEDSN=X:\PADR\ODBC\OPSDEV.dsn;");*/
%LET MD = %STR(REQUIRED="FILEDSN=X:\PADR\ODBC\MD.dsn;");
LIBNAME DUDE ODBC USER="sqlserver;" PASSWORD="procauto;" &MD ;

/*	Gather the email addresses for error reports*/
PROC SQL NOPRINT;
SELECT EMAIL INTO :TARGET SEPARATED BY '" "'
FROM DUDE.ERROR_MESSAGE
WHERE TYPE = 'TO';
SELECT EMAIL INTO :CC SEPARATED BY '" "'
FROM DUDE.ERROR_MESSAGE
WHERE TYPE = 'CC';
QUIT;

/*FILENAME ERRMESS EMAIL to=("&CC");*/
FILENAME ERRMESS EMAIL to=("&TARGET") cc=("&cc");

data _null_;
	call symput('start',put(time(),time9.));
	call symput('day_of_year',catt('',"#",(today() - intnx('year',today(),-1,'e')),"*"));
run;

%LET R=0;
%MACRO FILECHECK;
%DO I = 2 %TO 22;
	FILENAME REPORT&I "&RPTLIB/ULWMD1.LWMD1R&I..*";
	%IF %SYSFUNC(FEXIST(REPORT&I)) = 0 %THEN %DO;
			%PUT "The file was not in FTP, checking in archive.";
		FILENAME REPORT&I "&RPTLIBX/ULWMD1.LWMD1R&I..&day_of_year";
		%IF %SYSFUNC(FEXIST(REPORT&I)) = 0 %THEN %DO;
			%put "File &i was missing";
			%LET R = %EVAL(&R+1);
			%if &r = 1 %then %let k = &i;
				%else %let k = &k.,&i;
		%END;
	%END;
%END;
	%IF &R > 0 %THEN %DO;
		DATA _NULL_;
		FILE ERRMESS;
			PUT "The MauiDude Update Process was Aborted!";
			PUT "&R file(s) were missing:";
			put "The missing file(s) are: &k";
		RUN;
		run;
	%END;
%MEND;
%FILECHECK;

PROC FORMAT LIBRARY=WORK.FORMATS CNTLIN=DUDE.FORMATTRANSLATION; RUN;
%let error=0;
%let i = 0;
%macro truncat(r);
if eof and df_spe_acc_id ^= '-End-' then do;
	%if &error = 0 %then %do;
		call symput('ERROR',"&r");
		call symput('I',1);
	%END;
	%ELSE %DO;
		CALL SYMPUT('ERROR',"&ERROR" || "," || "&r");
		CALL SYMPUT('I',%EVAL(&I + 1));
	%END;
end;
if df_spe_acc_id = '-End-' then delete;
%MEND;
options nosymbolgen nomprint;
/*nosource nonotes;*/
DATA LN20;
INFILE REPORT2 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LC_STA_LON20 :$1. ;
%TRUNCAT(2);
RUN;
PROC SORT DATA=LN20; BY DF_SPE_ACC_ID LN_SEQ; RUN;
DATA LN20; SET LN20; BY DF_SPE_ACC_ID LN_SEQ; IF LAST.LN_SEQ; RUN;

DATA BR03;
INFILE REPORT3 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
INPUT DF_SPE_ACC_ID :$10. DF_PRS_ID_RFR :$9. BC_STA_BR03 :$1. BI_ATH_3_PTY :$1. BC_RFR_REL_BR :$2.
	BM_RFR_1 :$12. BM_RFR_LST :$35. LST_CNC :$10. LST_ATT :$10. ;
	RFR_REL_BR = PUT(BC_RFR_REL_BR, $RFRTYP.);
 %TRUNCAT(3);
RUN;
PROC SORT DATA=BR03; BY DF_SPE_ACC_ID DF_PRS_ID_RFR; RUN;
DATA BR03; SET BR03; BY DF_SPE_ACC_ID DF_PRS_ID_RFR; IF LAST.DF_PRS_ID_RFR; RUN;

DATA LN80;
	INFILE REPORT4 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LD_BIL_CRT :$10. LN_SEQ_BIL_WI_DTE :3. 
		LD_BIL_STS_RIR_TOL :$10. LD_BIL_DU_LON :$10. LC_STA_LON80 :$1. 
		LA_BIL_CUR_DU :9.2 LA_BIL_PAS_DU :9.2 LC_BIL_MTD :$1. 
		LC_IND_BIL_SNT :$1. LC_STA_BIL10 :$1. LA_TOT_BIL_STS :9.2;
	BIL_MTD = PUT(LC_BIL_MTD,$BILMTD.);
	IF LC_IND_BIL_SNT = 'N' AND INPUT(LD_BIL_DU_LON,MMDDYY10.) > TODAY() THEN PAID_AHEAD = 'Y';
		ELSE PAID_AHEAD = 'N';
	IF LA_BIL_CUR_DU = 0 THEN LD_BIL_STS_RIR_TOL = '0.00 PFH'; 
	IF PAID_AHEAD = 'Y' THEN LD_BIL_STS_RIR_TOL = LD_BIL_CRT;
	IF LA_BIL_CUR_DU = LA_TOT_BIL_STS  THEN BIL_SAT = 'Y';
		ELSE IF LA_TOT_BIL_STS > 0 THEN BIL_SAT = 'P';
		ELSE BIL_SAT = 'N';
%TRUNCAT(4);
RUN;
PROC SORT DATA=LN80; BY DF_SPE_ACC_ID LN_SEQ LD_BIL_CRT LN_SEQ_BIL_WI_DTE; RUN;
DATA LN80; SET LN80; BY DF_SPE_ACC_ID LN_SEQ LD_BIL_CRT LN_SEQ_BIL_WI_DTE; IF LAST.LN_SEQ_BIL_WI_DTE; RUN;

DATA LN90;
INFILE REPORT5 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LN_FAT_SEQ :6. LD_FAT_PST :$10. 
	LD_FAT_EFF :$10. LC_STA_LON90 :$1. LA_FAT_CUR_PRI :10.2 LA_FAT_LTE_FEE :9.2 
	TRAN_AMT :10.2 PC_FAT_TYP :$2. PC_FAT_SUB_TYP :$2. LA_FAT_NSI_ACR :7.2
	LC_FAT_REV_REA :$1. ;
	FAT_REV_REA = PUT(LC_FAT_REV_REA,$REVREA.);
%TRUNCAT(5);
RUN;
PROC SORT DATA=LN90; BY DF_SPE_ACC_ID LN_SEQ LN_FAT_SEQ ; RUN;
DATA LN90; SET LN90; BY DF_SPE_ACC_ID LN_SEQ LN_FAT_SEQ; IF LAST.LN_FAT_SEQ; RUN;

DATA DF10;
INFILE REPORT6 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LF_DFR_CTL_NUM :$3. LN_DFR_OCC_SEQ :6. LC_DFR_TYP :$2. 
	LD_DFR_INF_CER :$10. LD_DFR_BEG :$10. LD_DFR_END :$10. LI_CAP_DFR_INT_REQ :$1. 
	LC_STA_LON50 :$1. LC_DFR_STA :$1. LC_STA_DFR10 :$1. ;
	DFR_TYP = PUT(LC_DFR_TYP,$DEFSTA.);
	MONTHS_USED = ROUND((INPUT(LD_DFR_END,MMDDYY10.) - INPUT(LD_DFR_BEG,MMDDYY10.)+1)/365 * 12,.1);
 %TRUNCAT(6);
RUN;
PROC SORT DATA=DF10; BY DF_SPE_ACC_ID LN_SEQ LF_DFR_CTL_NUM LN_DFR_OCC_SEQ ; RUN;
DATA DF10; SET DF10; BY DF_SPE_ACC_ID LN_SEQ LF_DFR_CTL_NUM LN_DFR_OCC_SEQ; IF LAST.LN_DFR_OCC_SEQ; RUN;

DATA FB10;
INFILE REPORT7 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LF_FOR_CTL_NUM :$3. LN_FOR_OCC_SEQ :6. LC_FOR_TYP :$2. 
	LD_FOR_INF_CER :$10. LD_FOR_BEG :$10. LD_FOR_END :$10. LI_CAP_FOR_INT_REQ :$1. 
	LC_STA_LON60 :$1. LC_FOR_STA :$1. LC_STA_FOR10 :$1. LA_REQ_RDC_PAY :9.2 ;
	LA_REQ_RDC_PAY = COALESCE(LA_REQ_RDC_PAY,0);
	FOR_TYP = PUT(LC_FOR_TYP,$FORSTA.);
	MONTHS_USED = ROUND((INPUT(LD_FOR_END,MMDDYY10.) - INPUT(LD_FOR_BEG,MMDDYY10.)+1)/365 * 12,.1);
 %TRUNCAT(7);
RUN;
PROC SORT DATA=FB10; BY DF_SPE_ACC_ID LN_SEQ LF_FOR_CTL_NUM LN_FOR_OCC_SEQ ; RUN;
DATA FB10; SET FB10; BY DF_SPE_ACC_ID LN_SEQ LF_FOR_CTL_NUM LN_FOR_OCC_SEQ; IF LAST.LN_FOR_OCC_SEQ; RUN;

DATA PD10 ;
	INFILE REPORT8 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. BF_SSN :$9. ;
%TRUNCAT(8);
RUN;
PROC SORT DATA=PD10 ; BY DF_SPE_ACC_ID; RUN;
DATA PD10; SET PD10; BY DF_SPE_ACC_ID; IF LAST.DF_SPE_ACC_ID; RUN;

DATA DL200;
	INFILE REPORT9 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. LAST_DL200 :$10. DL200 :6. ;
%TRUNCAT(9);
RUN;
PROC SORT DATA=DL200 ; BY DF_SPE_ACC_ID; RUN;
DATA DL200; SET DL200; BY DF_SPE_ACC_ID; IF LAST.DF_SPE_ACC_ID; RUN;

DATA DRLFA;
	INFILE REPORT10 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. FEE_WAV_DOL :8. FEE_WAV_CT :8. ;
%TRUNCAT(10);
RUN;
PROC SORT DATA=DRLFA ; BY DF_SPE_ACC_ID; RUN;
DATA DRLFA; SET DRLFA; BY DF_SPE_ACC_ID; IF LAST.DF_SPE_ACC_ID; RUN;

DATA LN10(DROP= B WX_OVR_DW_LON_STA);
	INFILE REPORT11 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LA_CUR_PRI :10.2 LA_LON_AMT_GTR :10.2 
		LD_END_GRC_PRD :$10. IC_LON_PGM :$6. B :MMDDYY10. 
	    WC_DW_LON_STA :$2. WD_LON_RPD_SR :$10. WA_TOT_BRI_OTS :14.2 
		LD_PIF_RPT :$10. WX_OVR_DW_LON_STA :$20. ;
	FORMAT RIR_INT $14. DW_LON_STA $20. RIR_TYP $27.;
	LD_LON_1_DSB = PUT(B,MMDDYY10.);
	if wx_ovr_dw_lon_sta = '' then DW_LON_STA = PUT(WC_DW_LON_STA,$LONSTA.);
	else DW_LON_STA = WX_OVR_DW_LON_STA; 
	IF B < MDY(5,1,2006) THEN DO;
		HEP = 'Y';
	END;
	ELSE HEP = 'N';
	IF IC_LON_PGM IN ('UNCNS','SUBCNS','SUBSPC','UNSPC') THEN DO;
		IF B <= MDY(4,30,2006) THEN DO;
			ACH_RATE = 1.25;
			RIR_INT = "1.00% RDC";
			RIR_TYP = 'INTEREST RATE';
		END;
		ELSE IF B < MDY(1,1,2008) THEN DO;
			ACH_RATE = 0.5;
			RIR_INT =  "1.00% RDC";
			RIR_TYP = 'INTEREST RATE';
		END;
		ELSE DO;
			RIR_INT = 'N/A';
			RIR_TYP = '';

			IF B < MDY(5,1,2008) THEN ACH_RATE = 0.25;
			ELSE ACH_RATE = 0.0;
		END;
	END;
	ELSE DO;
		IF B <= MDY(4,30,2006) THEN DO;
			ACH_RATE = 1.25;
			RIR_INT = "2.00% RDC";
			RIR_TYP = 'INTEREST RATE';
		END;
		ELSE IF B < MDY(1,1,2008) THEN DO;
			ACH_RATE = 1.25;
			RIR_INT = "2.00% RDC";
			RIR_TYP = 'INTEREST RATE';
		END;
		ELSE IF B < MDY(7,1,2008) THEN DO;
				ACH_RATE = 0.5;
				IF B < MDY(5,1,2008) THEN DO;
					RIR_INT = "2.00% RBT";
					RIR_TYP = 'REBATE OF BALANCE';
				END;
				ELSE RIR_INT = "No RIR Program";
		END;
		ELSE ACH_RATE = 0.25;
		IF IC_LON_PGM = 'TILP' THEN ACH_RATE = 1.0;
	END;
%TRUNCAT(11);
RUN;
PROC SORT DATA=LN10; BY DF_SPE_ACC_ID LN_SEQ; RUN;
DATA LN10; SET LN10; BY DF_SPE_ACC_ID LN_SEQ; IF LAST.LN_SEQ; RUN;

DATA LN83;
      INFILE REPORT12 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
      INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. BN_EFT_SEQ :6. LC_STA_LN83 :$1. 	;
%TRUNCAT(12);
RUN;
PROC SORT DATA=LN83; BY DF_SPE_ACC_ID LN_SEQ BN_EFT_SEQ; RUN;
DATA LN83; SET LN83(drop=bn_eft_seq); BY DF_SPE_ACC_ID LN_SEQ; IF LAST.LN_SEQ; RUN;

DATA DC01;
      INFILE REPORT13 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
      INPUT DF_SPE_ACC_ID :$10. LN_SEQ:6. LD_RHB :$10.  ;
%TRUNCAT(13);
RUN;
PROC SORT DATA=DC01; BY DF_SPE_ACC_ID LN_SEQ; RUN;
DATA DC01; SET DC01; BY DF_SPE_ACC_ID LN_SEQ; IF LAST.LN_SEQ; RUN;

DATA GA10;
      INFILE REPORT14 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
      INPUT DF_SPE_ACC_ID :$10. BF_SSN :$9. CLUID :$19. 
		LN_SEQ :6. FORWARDING :$2.  ;
ln_seq = coalesce(ln_seq,0);
%TRUNCAT(14);
RUN; 	
PROC SORT DATA=GA10; BY DF_SPE_ACC_ID CLUID LN_SEQ; RUN;
DATA GA10; SET GA10; BY DF_SPE_ACC_ID CLUID LN_SEQ; IF LAST.LN_SEQ; RUN;

DATA LN54;
      INFILE REPORT15 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
      INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LD_BBS_DSQ :$10. 
		LC_BBS_ELG :$1. ;
%TRUNCAT(15);
RUN;
PROC SORT DATA=LN54 ; BY DF_SPE_ACC_ID LN_SEQ; RUN;
DATA LN54; SET LN54; BY DF_SPE_ACC_ID LN_SEQ; IF LAST.LN_SEQ ; RUN;

DATA LN55;
	INFILE REPORT16 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LN_LON_BBT_PAY :4. 	
		PN_BBT_PAY_ICV : ;
	RIR_CT = TRIM(LEFT(PUT(COALESCE(LN_LON_BBT_PAY,0),2.0))) || '/' || 
		LEFT(PUT(PN_BBT_PAY_ICV,2.));
%TRUNCAT(16);
RUN;
PROC SORT DATA=LN55 ; BY DF_SPE_ACC_ID LN_SEQ; RUN;
DATA LN55;SET LN55;BY DF_SPE_ACC_ID LN_SEQ;IF LAST.LN_SEQ ;RUN;

DATA LN65(drop=LC_TYP_SCH_DIS);
	INFILE REPORT17 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LD_CRT_LON65 :$10. LC_TYP_SCH_DIS :$2. 
		LD_SNT_RPD_DIS :$10. LA_RPS_ISL :9.2 DUE_DAY :$2. LN_RPS_TRM :3.0;
	TYP_SCH_DIS = PUT(LC_TYP_SCH_DIS,$SCHTYP.);
	LA_RPS_ISL = coalesce(LA_RPS_ISL,0);
	LN_RPS_TRM = coalesce(LN_RPS_TRM,0);
%TRUNCAT(17);
RUN;
proc sort data=LN65; by df_spe_acc_id ln_seq; run;
DATA LN65; set LN65; by df_spe_acc_id ln_seq; if last.ln_seq ;run;

DATA LN72;
	INFILE REPORT18 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LR_ITR :7.3 LR_INT_RDC_PGM_ORG :7.3 ;
%TRUNCAT(18);
RUN;
PROC SORT DATA=LN72; BY DF_SPE_ACC_ID LN_SEQ; RUN;
DATA LN72; SET LN72; BY DF_SPE_ACC_ID LN_SEQ; IF LAST.LN_SEQ; RUN;

DATA SD10;
	INFILE REPORT19 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LD_SCL_SPR :$10. 
		DOE_SCL_ENR_CUR :$40.  ;
%TRUNCAT(19);
RUN;
PROC SORT DATA=SD10; BY DF_SPE_ACC_ID LN_SEQ; RUN;
DATA SD10; SET SD10; BY DF_SPE_ACC_ID LN_SEQ; IF LAST.LN_SEQ; RUN;

DATA LN16;
	INFILE REPORT20 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. LN_SEQ :6. LD_DLQ_OCC :$10. LN_DLQ_MAX:4. 
	LD_DLQ_MAX:$10. ;
%TRUNCAT(20);
RUN;
PROC SORT DATA=LN16 ; BY DF_SPE_ACC_ID LN_SEQ; RUN;
DATA LN16; SET LN16; BY DF_SPE_ACC_ID LN_SEQ; IF LAST.LN_SEQ; RUN;

DATA BR02;
	INFILE REPORT21 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. IM_IST_FUL :$40. IX_GEN_STR_ADR_1 :$40.
		 IX_GEN_STR_ADR_2 :$40. IM_GEN_CT :$30. IC_GEN_ST :$2.
		 IF_GEN_ZIP :$14. IN_GEN_PHN :$17. ;
%TRUNCAT(21);
RUN;
PROC SORT DATA=BR02 ; BY DF_SPE_ACC_ID; RUN;
DATA BR02; SET BR02; BY DF_SPE_ACC_ID; IF LAST.DF_SPE_ACC_ID; RUN;

DATA BR30 ;
	INFILE REPORT22 DSD DLM = ',' FIRSTOBS=1 MISSOVER end = eof;
	INPUT DF_SPE_ACC_ID :$10. BN_EFT_SEQ :2. BF_EFT_ABA :$9. BF_EFT_ACC :$17.
		 BC_EFT_STA :$1. BD_EFT_STA :$10. BA_EFT_ADD_WDR :9.2 BN_EFT_NSF_CTR :2.
		 BC_EFT_DNL_REA :$1. ;
%TRUNCAT(22);
RUN;
PROC SORT DATA=BR30 ; BY DF_SPE_ACC_ID BN_EFT_SEQ; RUN;
DATA BR30; SET BR30; BY DF_SPE_ACC_ID; IF LAST.DF_SPE_ACC_ID; RUN;

options symbolgen source notes;

%put &error &r;
%MACRO COPYERROR;
%IF &error > 0 %THEN %DO;
DATA _NULL_;
FILE ERRMESS;
	PUT "The MauiDude Update Process was Aborted:";
	PUT "File(s) &error had corrupted (truncated) data." ;
RUN;
%END;
%MEND;
%COPYERROR;
%let issue = %eval(&r + &i);
%put &issue;

%MACRO UPDAT;
%IF &issue = 0 %THEN %DO;
%INCLUDE "&UPLIB.UTLWMD1 Dude Daily Update.Bill.sas" ;
%INCLUDE "&UPLIB.UTLWMD1 Dude Daily Update.Reference.sas" /SOURCE2;
%INCLUDE "&UPLIB.UTLWMD1 Dude Daily Update.Financialtran.sas" /SOURCE2;
%INCLUDE "&UPLIB.UTLWMD1 Dude Daily Update.Deferment.sas" /SOURCE2;
%INCLUDE "&UPLIB.UTLWMD1 Dude Daily Update.Forbearance.sas" /SOURCE2;
%INCLUDE "&UPLIB.UTLWMD1 Dude Daily Update.Onelink.sas" /SOURCE2;
DATA LN80_LON;
	SET DUDE.BILL(KEEP=DF_SPE_ACC_ID LN_SEQ LD_BIL_DU_LON BIL_MTD PAID_AHEAD );
		A = INPUT(LD_BIL_DU_LON,MMDDYY10.);
RUN;
PROC SORT DATA=LN80_LON; BY DF_SPE_ACC_ID LN_SEQ DESCENDING A ; RUN;
DATA LN80_LON(KEEP=DF_SPE_ACC_ID LN_SEQ BIL_MTD PAID_AHEAD ); 
SET LN80_LON; 
BY DF_SPE_ACC_ID LN_SEQ ; 
IF FIRST.LN_SEQ;
RUN;

%INCLUDE "&UPLIB.UTLWMD1 Dude Daily Update.Loan.sas" /SOURCE2;

proc sql; 
create table bor_bil as
select distinct df_spe_acc_id
	,BIL_MTD
from dude.loan ;
/*where bil_mtd ^= '';*/
quit;
proc sort data=bor_bil; by df_spe_acc_id BIL_MTD; run;
data bor_bil;
set bor_bil;
by df_spe_acc_id;
if last.df_spe_acc_id = 0 and bil_mtd = '' then delete;
run;
proc sort data=bor_bil; by df_spe_acc_id BIL_MTD; run;
data bor_bil(drop=a);
format df_spe_acc_id $10. a $33. bil_mtd $33.;
set bor_bil;
by df_spe_acc_id;
retain a ;
if first.df_spe_acc_id and last.df_spe_acc_id then output;
else if first.df_spe_acc_id then a = bil_mtd;
else a = trim(a) || ', ' || bil_mtd;
if first.df_spe_acc_id = 0 and last.df_spe_acc_id then do;
	bil_mtd = a;
	output;
	a = '';
end;
run;
DATA _NULL_;
	CALL SYMPUT('THIS_YR',PUT(YEAR(TODAY()),4.));
	CALL SYMPUT('NEXT_YR',PUT(YEAR(TODAY())+1,4.));
RUN;

DATA HOLIDAYS (KEEP=HOL OBHOL) ;
FORMAT HOL OBHOL MMDDYY10.;
DO HOL="01JAN&THIS_YR"D TO "01JAN&NEXT_YR"d;
	MNTH = MONTH(HOL);
	WKDY = WEEKDAY(HOL);
	C = CEIL(DAY(HOL)/7);
	IF WKDY = 1 THEN OBHOL = HOL+1;
		ELSE IF WKDY = 7 THEN OBHOL = HOL-1;
		ELSE OBHOL = HOL;
	IF HOL IN ("01JAN&NEXT_YR"d,"01JAN&THIS_YR"d,"04JUL&THIS_YR"d,"24JUL&THIS_YR"d,
	"25DEC&THIS_YR"d,"11NOV&THIS_YR"D) THEN OUTPUT;
	ELSE IF MNTH = 1 AND WKDY = 2 AND C=3 THEN OUTPUT ; *Martin Luther Kings Birthday;
	ELSE IF MNTH = 2 AND WKDY = 2 AND C=3 THEN OUTPUT; *Washingtons Birthday;
	ELSE IF MNTH = 11 AND WKDY = 5 AND C=4 THEN OUTPUT; *Thanksgiving;
	ELSE IF MNTH = 5 AND WKDY = 2 AND DAY(HOL) > 24 THEN OUTPUT ; *Memorial Day;
	ELSE IF MNTH = 9 AND WKDY = 2 AND DAY(HOL) <= 7 THEN OUTPUT ; *Labor Day;
	ELSE IF MNTH = 11 AND WKDY = 6 AND 22 < DAY(HOL) < 30 THEN OUTPUT ; *Black Friday;
	ELSE IF MNTH = 10 AND WKDY = 2 AND C=2 < DAY(HOL) < 30 THEN OUTPUT ; *Colombus Day;

END;
RUN;


/************************************************
* CALCULATE 8 AND 10 BUSINESS DAYS FROM TODAY 
* ACCOUNT FOR HOLIDAYS AND WEEKENDS
*************************************************/
DATA BUSDAY;
FORMAT BD MMDDYY10.;
	DO BD = TODAY()-1 TO TODAY()-7 by -1;
		IF WEEKDAY(BD) IN (2 3 4 5 6) THEN OUTPUT;
	END;
RUN;

PROC SQL noprint;
SELECT MAX(BD)  INTO: LAST_BUS 
FROM BUSDAY A
LEFT OUTER JOIN HOLIDAYS B
	ON A.BD = B.OBHOL
WHERE B.OBHOL IS NULL;
QUIT;

PROC SQL;
CREATE TABLE LN10_BOR AS
	SELECT DISTINCT DF_SPE_ACC_ID
		,SUM(LA_CUR_PRI) AS LA_CUR_PRI
		,SUM(WA_TOT_BRI_OTS) AS WA_TOT_BRI_OTS
		,SUM(INT((LA_CUR_PRI)*(LR_ITR)/365)/100) AS LR_ITR_DLY
		,CALCULATED LR_ITR_DLY * 31 AS LR_ITR_MONTH
		,CALCULATED LR_ITR_MONTH + 5 AS LR_ITR_MONTH_5
		,PUT(MAX(YEAR(INTNX('MONTH',INPUT(WD_LON_RPD_SR,MMDDYY10.),3))),4.0) AS COHORT
		,CASE
			WHEN MAX(INPUT(WD_LON_RPD_SR,MMDDYY10.)) >=
				MDY(10,1,YEAR(INTNX('MONTH',TODAY(),3))-2) THEN 'Y'
			ELSE 'N'
		END AS COHORT_IND
		,case 
			when put(min(input(ld_dlq_occ,mmddyy10.)),mmddyy10.) = '         .' then ''
			else put(min(input(ld_dlq_occ,mmddyy10.)),mmddyy10.)
		end as ld_dlq_occ
		,CASE
			WHEN CALCULATED LD_DLQ_OCC = '' THEN 0
			WHEN max(INPUT(LD_DLQ_MAX,MMDDYY10.)) >= &LAST_BUS 
				THEN MAX(ln_dlq_max) + (TODAY() - max(INPUT(LD_DLQ_MAX,MMDDYY10.)))
			ELSE MAX(LN_DLQ_MAX) + 1
		END as cur_dlq

	FROM DUDE.LOAN
	GROUP BY DF_SPE_ACC_ID;
QUIT;
PROC SORT DATA=LN10_BOR; BY DF_SPE_ACC_ID COHORT; RUN;
DATA LN10_BOR;
	SET LN10_BOR;
	BY DF_SPE_ACC_ID ; 
	IF LAST.DF_SPE_ACC_ID;
	IF LR_ITR_MONTH = 0 THEN LR_ITR_MONTH_5 = 0;
RUN;
DATA LN10_BOR;
MERGE LN10_BOR bor_bil;	 
BY DF_SPE_ACC_ID;
RUN;

PROC SQL;
CREATE TABLE RPF AS
	SELECT DISTINCT DF_SPE_ACC_ID
		,"RPF=" || PUT(LA_REQ_RDC_PAY,DOLLAR8.2) AS MONTH_AMT FORMAT=$20.
		,put(day(intnx('month',today(),0,'e')),2.) as DUE_DAY
	FROM DUDE.FORBEARANCE
	WHERE input(LD_FOR_BEG,mmddyy10.) <= TODAY()
		AND input(LD_FOR_END,mmddyy10.) >= TODAY()
		AND LA_REQ_RDC_PAY >0;
QUIT;

PROC SQL;
CREATE TABLE LN65_BOR AS
	SELECT A.DF_SPE_ACC_ID
		,put(max(INPUT(LD_CRT_LON65,MMDDYY10.)),mmddyy10.) as ld_crt_lon65
		,SUM(A.LA_RPS_ISL) AS C
		,A.DUE_DAY
	FROM DUDE.LOAN A
	LEFT OUTER JOIN RPF B
		ON A.DF_SPE_ACC_ID = B.DF_SPE_ACC_ID
	WHERE A.LA_CUR_PRI > 0
		AND B.DF_SPE_ACC_ID IS NULL
	GROUP BY A.DF_SPE_ACC_ID, A.DUE_DAY;
QUIT;
PROC SORT DATA=LN65_BOR; BY DF_SPE_ACC_ID DUE_DAY; RUN;
DATA LN65_BOR (KEEP=DF_SPE_ACC_ID LD_CRT_LON65 DUE_DAY MONTH_AMT MULT_DUE_DT);
	FORMAT DUE_DAY $8. MONTH_AMT $20.; 
	SET LN65_BOR;
	RETAIN MONTH_AMT A ;
	BY DF_SPE_ACC_ID DUE_DAY;
	IF FIRST.DF_SPE_ACC_ID AND LAST.DF_SPE_ACC_ID THEN DO;
		MONTH_AMT = LEFT(PUT(C,DOLLAR9.2));
		MULT_DUE_DT = 'N';
		OUTPUT;
	END;
	ELSE IF FIRST.DF_SPE_ACC_ID THEN DO;
		MONTH_AMT = LEFT(PUT(C,DOLLAR9.2));
		A = DUE_DAY;
	END;
	IF FIRST.DF_SPE_ACC_ID = 0 THEN DO;
		MONTH_AMT = TRIM(MONTH_AMT) || ', ' || LEFT(PUT(C,DOLLAR9.2));
		A = TRIM(A) || ',' || TRIM(DUE_DAY);
	END;
	IF LAST.DF_SPE_ACC_ID and first.df_spe_acc_id = 0 THEN DO;
		MULT_DUE_DT = 'Y';
		DUE_DAY = A;
		OUTPUT;
	END;
RUN;

PROC SQL;
CREATE TABLE MON_36 AS
	SELECT DF_SPE_ACC_ID
		,CASE
			WHEN SUM(MONTHS_USED) >= 36 THEN 'Y'
			ELSE 'N'
		END AS FORB_36
	FROM (SELECT DISTINCT DF_SPE_ACC_ID
		,LF_FOR_CTL_NUM
		,MONTHS_USED
	FROM DUDE.FORBEARANCE
	WHERE LC_FOR_TYP = '05')
	GROUP BY DF_SPE_ACC_ID;
QUIT;

PROC SQL;
CREATE TABLE MAX_PAY AS
	SELECT DF_SPE_ACC_ID
		,PUT(MAX(INPUT(LD_FAT_EFF,MMDDYY10.)),MMDDYY10.) AS LST_PMT_RCVD
	FROM DUDE.FINANCIALTRAN
	WHERE PC_FAT_TYP = '10'
	GROUP BY DF_SPE_ACC_ID;
QUIT;

%INCLUDE "&UPLIB.UTLWMD1 Dude Daily Update.Borrower.sas" /SOURCE2;

DATA _NULL_;
	CALL SYMPUT('YR_3',PUT(INTNX('YEAR',TODAY(),-3,'S'),MMDDYY10.));
RUN;
%PUT &YR_3;

PROC SQL NOPRINT;
CONNECT TO ODBC AS MD (&MD);
SELECT count(*)
FROM CONNECTION TO MD (
	UPDATE borrower
	 	SET DL200 = 0
			,LAST_DL200 = ''
	WHERE CAST(LAST_DL200 AS DATETIME) < &YR_3 ;
	UPDATE BORROWER
	 	SET LD_RHB_IND = CASE
			WHEN DF_SPE_ACC_ID IN (SELECT DF_SPE_ACC_ID
					FROM LOAN
					WHERE LA_CUR_PRI > 0
						AND LD_RHB <> '') THEN 'Y'
			ELSE 'N'
		END;
	UPDATE BORROWER
	 	SET COBORROWER = CASE
			WHEN DF_SPE_ACC_ID IN (SELECT DF_SPE_ACC_ID
					FROM LOAN
					WHERE LA_CUR_PRI > 0
						AND LC_STA_LON20 = 'A') THEN 'Y'
			ELSE 'N'
		END);
DISCONNECT FROM MD;
QUIT;

PROC SQL NOPRINT;
CONNECT TO ODBC AS MD (&MD);
SELECT count(*)
FROM CONNECTION TO MD (
	UPDATE BORROWER
		SET MULT_BIL_MTD = CASE
		WHEN EXISTS (SELECT DF_SPE_ACC_ID
				,COUNT(DISTINCT LC_BIL_MTD)
			FROM LOAN
			WHERE LA_CUR_PRI > 0
				AND LC_BIL_MTD <> ''
				AND BORROWER.DF_SPE_ACC_ID = LOAN.DF_SPE_ACC_ID
			GROUP BY DF_SPE_ACC_ID
			HAVING COUNT(DISTINCT LC_BIL_MTD) > 1) THEN 'Y'
			ELSE 'N'
		END);
QUIT;

PROC SQL NOPRINT;
CONNECT TO ODBC AS MD (&MD);
SELECT count(*)
FROM CONNECTION TO MD (
	UPDATE LOAN
		SET ACH_ELIG = CASE
		WHEN EXISTS (SELECT DF_SPE_ACC_ID
			FROM BORROWER
			WHERE BORROWER.BN_EFT_NSF_CTR >= 2
				AND BORROWER.DF_SPE_ACC_ID = LOAN.DF_SPE_ACC_ID) THEN 'N'
			ELSE 'Y'
		END);
QUIT;


data _null_;
	call symput('total',put(time() - "&start"t,time9.));
run;
		DATA _NULL_;
		FILE ERRMESS;
			PUT "The MauiDude Update Process Completed!";
PUT "START =         &START ";
put "TOTAL =         &total"; 
		RUN;

%PUT 'DUDE PROCESSING TIME';
%PUT "START =         &START ";
%put ;
%put "Elapsed Time =         &total"; 

options noxwait; 
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R2.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R3.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R4.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R5.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R6.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R7.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R8.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R9.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R10.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R11.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R12.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R13.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R14.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R15.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R16.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R17.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R18.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R19.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R20.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R21.*"';
x 'del "X:\PADD\FTP\ULWMD1.LWMD1R22.*"';
%END;
%MEND;
%UPDAT;
options symbolgen mprint source notes;
