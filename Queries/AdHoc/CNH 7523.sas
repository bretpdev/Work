/*%LET RPTLIB = %SYSGET(reportdir);*/
%LET RPTLIB = T:\SAS;
FILENAME REPORTZ "&RPTLIB/UNWSXX.NWSXXRZ";
FILENAME REPORTX "&RPTLIB/UNWSXX.NWSXXRX";

PROC IMPORT OUT = WORK.TSXXBSAPPM
            DATAFILE = "T:\Letters.xlsx" 
            DBMS = xlsx REPLACE;
   			SHEET = 'TSXXBSAPPM'; 
RUN;


PROC IMPORT OUT = WORK.TSXXBSAPPV
            DATAFILE = "T:\Letters.xlsx" 
            DBMS = xlsx REPLACE;
   			SHEET = 'TSXXBSAPPV'; 
RUN;


PROC IMPORT OUT = WORK.TSXXBSCRAA
            DATAFILE = "T:\Letters.xlsx" 
            DBMS = xlsx REPLACE;
   			SHEET = 'TSXXBSCRAA'; 
RUN;

PROC IMPORT OUT = WORK.TSXXBGLBX
            DATAFILE = "T:\Letters.xlsx" 
            DBMS = xlsx REPLACE;
   			SHEET = 'TSXXBGLBX'; 
RUN;


LIBNAME  LEGEND  REMOTE  SERVER=LEGEND SLIBREF=work  ;

DATA LEGEND.TSXXBSAPPM;
SET TSXXBSAPPM;
RUN;

DATA LEGEND.TSXXBSAPPV;
SET TSXXBSAPPV;
RUN;

DATA LEGEND.TSXXBSCRAA;
SET TSXXBSCRAA;
RUN;

DATA LEGEND.TSXXBGLBX;
SET TSXXBGLBX;
RUN;

RSUBMIT LEGEND;
/*%let DB = DNFPRQUT;  *This is test;*/
/*%let DB = DNFPRUUT;  *This is VUKX test;*/
%let DB = DNFPUTDL;  *This is live;

LIBNAME PKUB DBX DATABASE=&DB OWNER=PKUB;
LIBNAME AES DBX DATABASE=&DB OWNER=AES; 

%MACRO SQLCHECK ;
  %IF  &SQLXRC NE X  %THEN  %DO  ;
    DATA _NULL_  ;
            FILE REPORTZ NOTITLES  ;
            PUT @XX " ********************************************************************* "
              / @XX " ****  THE SQL CODE ABOVE HAS EXPERIENCED AN ERROR.               **** "
              / @XX " ****  THE SAS SHOULD BE REVIEWED.                                **** "       
              / @XX " ********************************************************************* "
              / @XX " ****  THE SQL ERROR CODE IS  &SQLXRC  AND THE SQL ERROR MESSAGE  **** "
              / @XX " ****  &SQLXMSG   **** "
              / @XX " ********************************************************************* "
            ;
         RUN  ;
  %END  ;
%MEND  ;

%MACRO GETADDRESS(INDATA, OUTDATA);
	PROC SQL;
		CREATE TABLE &OUTDATA AS
			SELECT DISTINCT
				PDXX.DF_SPE_ACC_ID AS AccountNumber,
				PDXX.DM_PRS_X || ' ' || PDXX.DM_PRS_LST AS Name,
				PDXX.DX_STR_ADR_X AS AddressX,
				PDXX.DX_STR_ADR_X AS AddressX,
				PDXX.DM_CT AS City,
				PDXX.DC_DOM_ST AS State,
				PDXX.DF_ZIP_CDE AS ZIP,
				PDXX.DM_FGN_CNY AS COUNTRY,
				PDXX.DI_VLD_ADR,
				CASE
					WHEN PHXX.DI_VLD_CNC_EML_ADR = 'Y' AND PHXX.DI_CNC_ELT_OPI = 'Y' THEN 'Y'
					ELSE 'N'
				END AS ON_ECORR,
				PDXX.DF_PRS_ID
			FROM
				PKUB.PDXX_PRS_NME PDXX
				INNER JOIN PKUB.PDXX_PRS_ADR PDXX
					ON PDXX.DF_PRS_ID = PDXX.DF_PRS_ID
				LEFT JOIN AES.PHXX_CNC_EML PHXX
					ON PDXX.DF_SPE_ACC_ID = PUT(PHXX.DF_SPE_ID,ZXX.)
				INNER JOIN &INDATA I
					ON I.AccountNumber = PDXX.DF_SPE_ACC_ID
;	
QUIT;


%MEND GETADDRESS;

%GETADDRESS(TSXXBSAPPM, TSXXBSAPPM_ADDR);
%GETADDRESS(TSXXBSAPPV, TSXXBSAPPV_ADDR);
%GETADDRESS(TSXXBSCRAA, TSXXBSCRAA_ADDR);
%GETADDRESS(TSXXBGLBX,  TSXXBGLBX_ADDR);

PROC SQL;
	CREATE TABLE TSXXBSCRAA_ADDR AS 
		SELECT DISTINCT
			ADDR.*,
			lnXX.ln_seq,
			LNXX.IC_LON_PGM AS LOAN_PGM,
			LNXX.LD_LON_X_DSB format mmddyyXX. AS FIRST_DSB_DATE,
			LNXX.LA_CUR_PRI AS CURRENT_PRINCIPAL_BALANCE,
			MAX(LNXX.LD_ITR_EFF_BEG) format mmddyyXX. AS SCRA_RATE_BEGIN_DATE,
			MAX(LNXX.LD_ITR_EFF_END) format mmddyyXX. AS SCRA_RATE_END_DATE
		FROM
			TSXXBSCRAA_ADDR ADDR
			INNER JOIN PKUB.LNXX_LON LNXX
				ON ADDR.DF_PRS_ID = LNXX.BF_SSN
			LEFT JOIN PKUB.LNXX_INT_RTE_HST LNXX
				ON LNXX.BF_SSN = LNXX.BF_SSN
				AND LNXX.LN_SEQ = LNXX.LN_SEQ
			WHERE
				LNXX.LC_STA_LONXX = 'A'
				AND LNXX.LC_INT_RDC_PGM = 'M'
			GROUP BY 
				ADDR.AccountNumber,
				ADDR.Name,
				ADDR.ADDRESSX,
				ADDR.ADDRESSX,
				ADDR.City,
				ADDR.State,
				ADDR.ZIP,
				ADDR.COUNTRY,
				ADDR.DI_VLD_ADR,
				ADDR.ON_ECORR,
				ADDR.DF_PRS_ID,
				LNXX.IC_LON_PGM,
				LNXX.LD_LON_X_DSB,
				LNXX.LA_CUR_PRI
;
QUIT;


ENDRSUBMIT;

DATA TSXXBSAPPM_ADDR; SET LEGEND.TSXXBSAPPM_ADDR; RUN;
DATA TSXXBSAPPV_ADDR; SET LEGEND.TSXXBSAPPV_ADDR; RUN;
DATA TSXXBSCRAA_ADDR; SET LEGEND.TSXXBSCRAA_ADDR; RUN;
DATA TSXXBGLBX_ADDR; SET LEGEND.TSXXBGLBX_ADDR; RUN;

%MACRO LN_BIL(DS,NEWDS,NEWCOL);
PROC TRANSPOSE DATA=&DS OUT=TSXXBSCRAA_ADDR&NEWDS (DROP=_NAME_ /*_LABEL_*/) PREFIX=&NEWCOL;
	VAR &NEWCOL;
	BY AccountNumber Name ADDRESSX ADDRESSX City State ZIP COUNTRY DI_VLD_ADR ON_ECORR DF_PRS_ID ;
RUN;
%MEND LN_BIL;

%LN_BIL(TSXXBSCRAA_ADDR,X,LN_SEQ);
%LN_BIL(TSXXBSCRAA_ADDR,X,LOAN_PGM);
%LN_BIL(TSXXBSCRAA_ADDR,X,FIRST_DSB_DATE);
%LN_BIL(TSXXBSCRAA_ADDR,X,CURRENT_PRINCIPAL_BALANCE);
%LN_BIL(TSXXBSCRAA_ADDR,X,SCRA_RATE_BEGIN_DATE);
%LN_BIL(TSXXBSCRAA_ADDR,X,SCRA_RATE_END_DATE);

DATA TSXXBSCRAA_ADDR_FINAL (DROP=_LABEL_);
MERGE TSXXBSCRAA_ADDRX TSXXBSCRAA_ADDRX TSXXBSCRAA_ADDRX TSXXBSCRAA_ADDRX TSXXBSCRAA_ADDRX TSXXBSCRAA_ADDRX;
BY AccountNumber Name ADDRESSX ADDRESSX City State ZIP COUNTRY DI_VLD_ADR ON_ECORR DF_PRS_ID;
RUN;

%MACRO KEYLINE(DATA);
DATA &DATA (DROP = KEYSSN MODAY KEYLINE CHKDIG DIG I CHKDIG CHKX CHKX CHKX CHKDIGIT CHECK);
	SET &DATA;
	WHERE DI_VLD_ADR = 'Y' OR ON_ECORR = 'Y';
	KEYSSN = TRANSLATE(DF_PRS_ID,'MYLAUGHTER','XXXXXXXXXX');
	MODAY = PUT(DATE(),MMDDYYNX.);
	KEYLINE = "P"||KEYSSN||MODAY||"L";
	CHKDIG = X;
	LENGTH DIG $X.;
	DO I = X TO LENGTH(KEYLINE);
		IF I/X NE ROUND(I/X,X) 
			THEN DIG = PUT(INPUT(SUBSTR(KEYLINE,I,X),BITSX.X) * X, X.);
		ELSE DIG = PUT(INPUT(SUBSTR(KEYLINE,I,X),BITSX.X), X.);
		IF SUBSTR(DIG,X,X) = " " 
			THEN CHKDIG = CHKDIG + INPUT(SUBSTR(DIG,X,X),X.);
			ELSE DO;
				CHKX = INPUT(SUBSTR(DIG,X,X),X.);
				CHKX = INPUT(SUBSTR(DIG,X,X),X.);
				IF CHKX + CHKX >= XX
					THEN DO;
						CHKX = PUT(CHKX + CHKX,X.);
						CHKX = INPUT(SUBSTR(CHKX,X,X),X.);
						CHKX = INPUT(SUBSTR(CHKX,X,X),X.);
					END;
				CHKDIG = CHKDIG + CHKX + CHKX;
			END;
	END;
	CHKDIGIT = XX - INPUT(SUBSTR((RIGHT(PUT(CHKDIG,X.))),X,X),X.);
	IF CHKDIGIT = XX THEN CHKDIGIT = X;
	CHECK = PUT(CHKDIGIT,X.);
	ACSKEY = "#"||KEYLINE||CHECK||"#";
RUN;
%MEND KEYLINE;

%KEYLINE(TSXXBSAPPM_ADDR);
%KEYLINE(TSXXBSAPPV_ADDR);
%KEYLINE(TSXXBSCRAA_ADDR_FINAL);
%KEYLINE(TSXXBGLBX_ADDR);

%MACRO WRITE_GENERIC(DATA, FILE_NAME);
/*write to comma delimited file for the Email Batch Script - FED script*/
DATA _NULL_;
	SET		WORK.&DATA;
	FILE	&FILE_NAME delimiter=',' DSD DROPOVER lrecl=XXXXX;

	/* write column names, remove this to create a file without a header row */
	IF _N_ = X THEN
		DO;
			PUT	
				'KeyLine'
				','
				'Name'
				','
				'AddressX'
				','
				'AddressX'
				','
				'City'
				','
				'State'
				','
				'ZIP'
				','
				'Country'
				','
				'AccountNumber'
				','
				'CostCenter'
			;
		END;

	/* write data*/	
	DO;
		PUT ACSKEY $ @;
		PUT Name $ @;
		PUT AddressX $ @;
		PUT AddressX $ @;
		PUT City $ @;
		PUT State $ @;
		PUT ZIP $ @;
		PUT Country $ @;
		PUT AccountNumber $ @;
		PUT 'MAXXXX';
		;
	END;
RUN;
%MEND WRITE_GENERIC;

%WRITE_GENERIC(TSXXBSAPPM_ADDR, "T:\TSXXBSAPPM_ADDR_XX-XX-XXXX.txt");
%WRITE_GENERIC(TSXXBSAPPV_ADDR, 'T:\TSXXBSAPPV_ADDR_XX-XX-XXXX.txt');
%WRITE_GENERIC(TSXXBGLBX_ADDR, 'T:\TSXXBGLBX_ADDR_XX-XX-XXXX.txt');

PROC SQL;
	CREATE TABLE TSXXBSAPPM_INVALID_ADDR AS
		SELECT
			*
		FROM
			TSXXBSAPPM_ADDR
		WHERE
			DI_VLD_ADR = 'N' AND ON_ECORR = 'N'
;
QUIT;

PROC SQL;
	CREATE TABLE TSXXBSAPPV_INVALID_ADDR AS
		SELECT
			*
		FROM
			TSXXBSAPPV_ADDR
		WHERE
			DI_VLD_ADR = 'N' AND ON_ECORR = 'N'
;
QUIT;

PROC SQL;
	CREATE TABLE TSXXBSCRAA_INVALID_ADDR AS
		SELECT
			*
		FROM
			TSXXBSCRAA_ADDR
		WHERE
			DI_VLD_ADR = 'N' AND ON_ECORR = 'N'
;
QUIT;

PROC SQL;
	CREATE TABLE TSXXBGLBX_INVALID_ADDR AS
		SELECT
			*
		FROM
			TSXXBGLBX_ADDR
		WHERE
			DI_VLD_ADR = 'N' AND ON_ECORR = 'N'
;
QUIT;


DATA _NULL_;
SET  WORK.TSXXBSCRAA_ADDR_FINAL;
	FILE "T:\TSXXBSCRAA_XX-XX-XXXX.txt" DELIMITER=',' DSD DROPOVER LRECL=XXXXX;
	
	IF _N_ = X THEN
		DO;
			PUT	
				'KeyLine'
				','
				'Name'
				','
				'AddressX'
				','
				'AddressX'
				','
				'City'
				','
				'State'
				','
				'ZIP'
				','
				'Country'
				','
				'AccountNumber'
				','				
				'CostCenter'
				','@;
				DO I=X TO XX;
					PUT 'LoanProgram' I @;
					PUT 'DisbDate' I @;
					PUT 'CurrPrincipal' I @;
					PUT 'SCRABegin' I @;
					PUT 'SCRAEnd' I @;
				END;
				PUT 'end';
		END;

		DO;
			PUT ACSKEY $ @;
			PUT Name $ @;
			PUT AddressX $ @;
			PUT AddressX $ @;
			PUT City $ @;
			PUT State $ @;
			PUT ZIP $ @;
			PUT Country $ @;
			PUT AccountNumber $ @;
			PUT 'MAXXXX' @;


			PUT LOAN_PGMX $ @;	
			PUT FIRST_DSB_DATEX @;	
			PUT CURRENT_PRINCIPAL_BALANCEX @;	
			PUT SCRA_RATE_BEGIN_DATEX @;	
			PUT SCRA_RATE_END_DATEX @;	

			PUT LOAN_PGMX $ @;	
			PUT FIRST_DSB_DATEX @;	
			PUT CURRENT_PRINCIPAL_BALANCEX @;	
			PUT SCRA_RATE_BEGIN_DATEX @;	
			PUT SCRA_RATE_END_DATEX @;	

			PUT LOAN_PGMX $ @;	
			PUT FIRST_DSB_DATEX @;	
			PUT CURRENT_PRINCIPAL_BALANCEX @;	
			PUT SCRA_RATE_BEGIN_DATEX @;	
			PUT SCRA_RATE_END_DATEX @;	

			PUT LOAN_PGMX $ @;	
			PUT FIRST_DSB_DATEX @;	
			PUT CURRENT_PRINCIPAL_BALANCEX @;	
			PUT SCRA_RATE_BEGIN_DATEX @;	
			PUT SCRA_RATE_END_DATEX @;	

			PUT LOAN_PGMX $ @;	
			PUT FIRST_DSB_DATEX @;	
			PUT CURRENT_PRINCIPAL_BALANCEX @;	
			PUT SCRA_RATE_BEGIN_DATEX @;	
			PUT SCRA_RATE_END_DATEX @;	

			PUT LOAN_PGMX $ @;	
			PUT FIRST_DSB_DATEX @;	
			PUT CURRENT_PRINCIPAL_BALANCEX @;	
			PUT SCRA_RATE_BEGIN_DATEX @;	
			PUT SCRA_RATE_END_DATEX @;	

			PUT LOAN_PGMX $ @;	
			PUT FIRST_DSB_DATEX @;	
			PUT CURRENT_PRINCIPAL_BALANCEX @;	
			PUT SCRA_RATE_BEGIN_DATEX @;	
			PUT SCRA_RATE_END_DATEX @;	

			PUT LOAN_PGMX $ @;	
			PUT FIRST_DSB_DATEX @;	
			PUT CURRENT_PRINCIPAL_BALANCEX @;	
			PUT SCRA_RATE_BEGIN_DATEX @;	
			PUT SCRA_RATE_END_DATEX @;	

			PUT LOAN_PGMX $ @;	
			PUT FIRST_DSB_DATEX @;	
			PUT CURRENT_PRINCIPAL_BALANCEX @;	
			PUT SCRA_RATE_BEGIN_DATEX @;	
			PUT SCRA_RATE_END_DATEX @;	

			PUT LOAN_PGMXX $ @;	
			PUT FIRST_DSB_DATEXX @;	
			PUT CURRENT_PRINCIPAL_BALANCEXX @;	
			PUT SCRA_RATE_BEGIN_DATEXX @;	
			PUT SCRA_RATE_END_DATEXX @;	

			PUT LOAN_PGMXX $ @;	
			PUT FIRST_DSB_DATEXX @;	
			PUT CURRENT_PRINCIPAL_BALANCEXX @;	
			PUT SCRA_RATE_BEGIN_DATEXX @;	
			PUT SCRA_RATE_END_DATEXX @;	

			PUT LOAN_PGMXX $ @;	
			PUT FIRST_DSB_DATEXX @;	
			PUT CURRENT_PRINCIPAL_BALANCEXX @;	
			PUT SCRA_RATE_BEGIN_DATEXX @;	
			PUT SCRA_RATE_END_DATEXX @;	

			PUT LOAN_PGMXX $ @;	
			PUT FIRST_DSB_DATEXX @;	
			PUT CURRENT_PRINCIPAL_BALANCEXX @;	
			PUT SCRA_RATE_BEGIN_DATEXX @;	
			PUT SCRA_RATE_END_DATEXX @;	

			PUT LOAN_PGMXX $ @;	
			PUT FIRST_DSB_DATEXX @;	
			PUT CURRENT_PRINCIPAL_BALANCEXX @;	
			PUT SCRA_RATE_BEGIN_DATEXX @;	
			PUT SCRA_RATE_END_DATEXX @;	
			
			PUT 'end' ;
	   END;
RUN;
