PROC IMPORT OUT = WORK.source
            DATAFILE = "T:\Mindy July Transfers.xlsx" 
            DBMS = xlsx REPLACE;
   			SHEET = 'From Cornerstone'; 
RUN;




LIBNAME  LEGEND  REMOTE  SERVER=LEGEND SLIBREF=WORK;
DATA LEGEND.SOURCE; *Send data to legend;
SET SOURCE;
RUN;

RSUBMIT LEGEND;
LIBNAME PKUB DBX DATABASE=DNFPUTDL OWNER=PKUB;
PROC SQL;
	CREATE TABLE POP AS
		SELECT DISTINCT
			S.SSN,	
			LNXX.BF_SSN,
			LNXX.LN_SEQ,
			LNXX.IC_LON_PGM,
			PDXX.DF_SPE_ACC_ID AS ACCOUNT_NUMBER,
			PDXX.DM_PRS_X AS FIRST_NAME,
			PDXX.DM_PRS_LST AS LAST_NAME,
			SUM.TOTAL_BALANCE,
			DELI.LN_DLQ_MAX,
			DWXX.DWXX_STATUS,
			AYXX.AYXX_STATUS,
			FSXX.LD_DL_CON_INQ,
			LNXX.LC_TYP_SCH_DIS,
			WQXX.WF_QUE,
			lnXX.LC_STA_LONXX
		FROM
			 SOURCE S
		LEFT JOIN PKUB.PDXX_PRS_NME PDXX
			ON PDXX.DF_PRS_ID = S.ssn
		INNER JOIN PKUB.LNXX_LON LNXXB
			ON LNXXB.BF_SSN = PDXX.DF_PRS_ID
			AND LNXXB.LA_CUR_PRI > X
		LEFT JOIN PKUB.LNXX_LON LNXX
			ON LNXX.BF_SSN = PDXX.DF_PRS_ID
		LEFT JOIN PKUB.LNXX_LON_RPS LNXX
			ON LNXX.BF_SSN = LNXX.BF_SSN
			AND LNXX.LN_SEQ = LNXX.LN_SEQ
			AND LNXX.LC_STA_LONXX = 'A'
		LEFT JOIN PKUB.WQXX_TSK_QUE WQXX
			ON WQXX.BF_SSN = S.SSN
			AND WF_QUE = 'XX'
			AND WF_SUB_QUE = 'XX'
		LEFT JOIN 
		(
			SELECT DISTINCT
				LNXXS.BF_SSN,
				LNXXS.LN_SEQ,
				SUM(LNXXS.LA_CUR_PRI + DWXXS.WA_TOT_BRI_OTS) AS TOTAL_BALANCE
			FROM
				PKUB.LNXX_LON LNXXS
			INNER JOIN PKUB.DWXX_DW_CLC_CLU DWXXS
				ON LNXXS.BF_SSN = DWXXS.BF_SSN
				AND LNXXS.LN_SEQ = DWXXS.LN_SEQ 
			GROUP BY
				LNXXS.BF_SSN
		)SUM
			ON SUM.BF_SSN = LNXX.BF_SSN
			AND SUM.LN_SEQ = LNXX.LN_SEQ
		LEFT JOIN
		(
			SELECT DISTINCT
				BF_SSN,
				LN_SEQ,
				LN_DLQ_MAX
			FROM
				PKUB.LNXX_LON_DLQ_HST
			WHERE
				LC_STA_LONXX = 'X'
				AND LD_DLQ_MAX ^= (TODAY() -X)
		)DELI
			ON DELI.BF_SSN = LNXX.BF_SSN
			AND DELI.LN_SEQ = LNXX.LN_SEQ
		LEFT JOIN 
		(
			SELECT DISTINCT 
				BF_SSN,
				LN_SEQ,
				'DWXX' AS DWXX_STATUS
			FROM PKUB.DWXX_DW_CLC_CLU
			WHERE WC_DW_LON_STA IN ('XX','XX','XX','XX','XX','XX')	
		)DWXX
			ON DWXX.BF_SSN = LNXX.BF_SSN
			AND DWXX.LN_SEQ = LNXX.LN_SEQ
		LEFT JOIN 
		(
			SELECT DISTINCT
				BF_SSN,
				'AYXX' AS AYXX_STATUS
			FROM
				PKUB.AYXX_BR_LON_ATY
			WHERE
				PF_REQ_ACT IN ('CSFSA','ADCSH','TLFSA','ADTLF','UPFSA','ADUPR','SSFSA','ADSXX','FCFSA','ADFCR')
		)AYXX
			ON AYXX.BF_SSN = LNXX.BF_SSN
		LEFT JOIN
		(
			SELECT DISTINCT
				BF_SSN,
				LN_SEQ,
				(TODAY() - LD_DL_CON_INQ) AS LD_DL_CON_INQ
			FROM
				PKUB.FSXX_DL_LON
		)FSXX
			ON FSXX.BF_SSN = LNXX.BF_SSN
			AND FSXX.LN_SEQ = LNXX.LN_SEQ
			

;
QUIT;
ENDRSUBMIT;

DATA POP;
SET LEGEND.POP;
RUN;

PROC EXPORT DATA = WORK.POP 
            OUTFILE = "T:\SAS\NH XXXX EX WITH LOAN STATUS.xls" 
            DBMS = EXCEL
			REPLACE;
     SHEET="SheetX"; 
RUN;



DATA EX_POP;
SET LEGEND.POP;
WHERE
			(TOTAL_BALANCE <= XX AND TOTAL_BALANCE IS NOT NULL)
			OR LN_DLQ_MAX >= XXX
			OR (DWXX_STATUS = 'DWXX' OR AYXX_STATUS = 'AYXX')
			OR (LD_DL_CON_INQ < XX AND LD_DL_CON_INQ IS NOT NULL);
RUN;

PROC SQL;
	CREATE TABLE VALID_BORROWERS AS 
		SELECT DISTINCT
			*
		FROM
			POP
		WHERE BF_SSN NOT IN (SELECT BF_SSN FROM EX_POP)
;
QUIT;

DATA PAYE;
SET VALID_BORROWERS;
WHERE LC_TYP_SCH_DIS IN ('CA','CP');
RUN;

PROC SQL;
	CREATE TABLE FINAL AS 
		SELECT DISTINCT
			MAX(CASE
					WHEN IC_LON_PGM IN ('DLSTFD','DLUNST','DLPLUS', 'DLPLGB') THEN 'XXXXXAA'
					WHEN IC_LON_PGM IN ('DLPCNS', 'DLSCNS', 'DLSSPL', 'DLUSPL', 'DLUCNS') THEN 'XXXXXAB'
					ELSE 'UNMAPPED LOAN PROGRAM: ' || IC_LON_PGM
			END) AS CODE,
			SSN_LNSEQ.VAL
			
			FROM
				VALID_BORROWERS B
			INNER JOIN
			(
				SELECT 
					BF_SSN,
					BF_SSN || PUT(LN_SEQ, ZX. ) AS VAL
				FROM 
					VALID_BORROWERS
			) SSN_LNSEQ
				ON SSN_LNSEQ.BF_SSN = B.BF_SSN
			WHERE
				B.BF_SSN IS NOT NULL
			GROUP BY 
				SSN_LNSEQ.VAL
;
QUIT;

DATA LOANS;
SET FINAL;
WHERE CODE = 'XXXXXAA';
RUN;

DATA CONSOL;
SET FINAL;
WHERE CODE = 'XXXXXAB';
RUN;


DATA _NULL_;
	SET LOANS;
	FILE	'T:\NH XXXX transfer list.txt' MOD DSD DROPOVER lrecl=XXXXX;
		IF _N_ = X THEN
			DO;
				PUT
					CODE $;
				PUT 
					VAL$;
			END;
		ELSE
			PUT VAL$;
;
RUN;

DATA _NULL_;
	SET CONSOL;
	FILE	'T:\NH XXXX transfer list.txt' MOD DSD DROPOVER lrecl=XXXXX;
		IF _N_ = X THEN
			DO;
				PUT
					CODE $;
				PUT 
					VAL$;
			END;
		ELSE
			PUT VAL$;
;
RUN;

