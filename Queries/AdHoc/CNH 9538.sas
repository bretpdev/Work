/*set up library to SQL Server and include common code*/
/*	*TEST;*/
/*	LIBNAME SQL ODBC REQUIRED="FILEDSN=X:\PADR\ODBC\CLS_TEST.dsn; bl_keepnulls=no; READ_ISOLATION_LEVEL=RU" SCHEMA= SCRA;*/
/*	LIBNAME CDW ODBC REQUIRED="FILEDSN=X:\PADR\ODBC\CDW_TEST.dsn; bl_keepnulls=no; READ_ISOLATION_LEVEL=RU" SCHEMA= dbo;*/
/*	%INCLUDE "Y:\Codebase\SAS\ArcAdd Common.SAS";*/
/*	%LET RPTLIB = T:\;*/

/*	*LIVE;*/
	LIBNAME SQL ODBC REQUIRED="FILEDSN=X:\PADR\ODBC\CLS.dsn; bl_keepnulls=no; READ_ISOLATION_LEVEL=RU" SCHEMA= SCRA;
	LIBNAME CDW ODBC REQUIRED="FILEDSN=X:\PADR\ODBC\CDW.dsn; bl_keepnulls=no; READ_ISOLATION_LEVEL=RU" SCHEMA= dbo;
	%INCLUDE "Z:\Codebase\SAS\ArcAdd Common.SAS";

/*set up global variables*/
%LET RPTLIB = Z:\Archive\SAS\NHXXXX;

/*uncomment these incoming files, one per run*/
%LET INPUTFILE = SCRA_X_X_IDENTIFYING ACTIVE DUTY MILITARY BORROWERS--FED--NEW_XXXXXXXX.txt;
/*%LET INPUTFILE = SCRA_X_X_IDENTIFYING ACTIVE DUTY MILITARY BORROWERS--FED--NEW_XXXXXXXX.txt;*/
/*%LET INPUTFILE = SCRA_X_X_IDENTIFYING ACTIVE DUTY MILITARY BORROWERS--FED--NEW_XXXXXXXX.txt;*/
/*%LET INPUTFILE = SCRA_X_X_IDENTIFYING ACTIVE DUTY MILITARY BORROWERS--FED--NEW_XXXXXXXX.txt;*/
/*%LET INPUTFILE = SCRA_X_X_IDENTIFYING ACTIVE DUTY MILITARY BORROWERS--FED--NEW_XXXXXXXX.txt;*/

FILENAME REPORTX "&RPTLIB/SCRA - FED RX";
FILENAME REPORTX "&RPTLIB/SCRA - FED RX";
FILENAME REPORTX "&RPTLIB/SCRA - FED RX";
FILENAME REPORTX "&RPTLIB/SCRA - FED RX";
FILENAME REPORTX "&RPTLIB/SCRA - FED RX";
FILENAME REPORTX "&RPTLIB/SCRA - FED RX";
FILENAME REPORTX "&RPTLIB/SCRA - FED RX";
FILENAME REPORTX "&RPTLIB/SCRA - FED RX";

LIBNAME LEGEND REMOTE SERVER=LEGEND SLIBREF=WORK;

/*reads match file*/
DATA DODMATCH;
	INFILE "&RPTLIB\&INPUTFILE";
	INPUT 
		SSN $ X-X 
		ACT_DUT_BEG $ XXX-XXX /*ACTIVE_DUTY_BEGIN_DATE*/
		ACT_DUT_END $ XXX-XXX /*ACTIVE_DUTY_END_DATE*/
		LC_ACT_DUT $ XXX /*ACTIVE_DUTY_ON_ADS_DATE*/
		LC_LFT_ACT_DUT $ XXX /*LEFT_ACTIVE_DUTY_LEXXX_DAYS*/
		LC_NTF_ACT_DUT $ XXX /*NOTIFIED_OF_ACTIVE_DUTY_RECALL*/
		EID_BEGIN_DATE $ XXX-XXX 
		NOTIFICATION_DATE $ XX-XX /*aka ACTIVE_DUTY_STATUS_DATE distinguishes between runs*/
		ACTIVE_DUTY_STATUS_DATE $ XX-XX
	; 
	FORMAT 
		LD_ACT_DUT_BEG 
		LD_ACT_DUT_END 
		LD_EID_BEGIN_DATE 
		LD_NOTIFICATION_DATE 
		MMDDYYXX.
	;
	IF ACT_DUT_BEG NE 'XXXXXXXX' THEN LD_ACT_DUT_BEG = INPUT(ACT_DUT_BEG, YYMMDDX.);
	IF ACT_DUT_END NE 'XXXXXXXX' THEN LD_ACT_DUT_END = INPUT(ACT_DUT_END, YYMMDDX.);
	IF EID_BEGIN_DATE NE 'XXXXXXXX' THEN LD_EID_BEGIN_DATE = INPUT(EID_BEGIN_DATE, YYMMDDX.);
	IF NOTIFICATION_DATE NE 'XXXXXXXX' THEN LD_NOTIFICATION_DATE = INPUT(NOTIFICATION_DATE, YYMMDDX.);
RUN;

/*filters DOD data*/
DATA WORK.DOD_XYZN;
	SET WORK.DODMATCH;
	WHERE 
		LC_ACT_DUT ^= 'Z'
		AND 
			(
				LC_ACT_DUT IN ('X', 'Y')
				OR (
						LC_ACT_DUT = 'N'
						AND LC_LFT_ACT_DUT = 'N'
						AND LC_NTF_ACT_DUT = 'Y'
					)
				OR (
						LC_ACT_DUT = 'N'
						AND LC_LFT_ACT_DUT = 'Y'
					)
			);
RUN;

/*eliminates those with active duty end dates prior to XXAugXXXX*/
DATA WORK.DOD_XYZN;
	SET WORK.DOD_XYZN;
	WHERE LD_ACT_DUT_END > MDY(XX,XX,XXXX)
	OR LD_ACT_DUT_END IS NULL;
RUN;

/*sends data to legend*/
DATA LEGEND.DOD; 
	SET DOD_XYZN; 
RUN;

PROC SQL;
	CREATE TABLE PHXX AS
		SELECT
			DF_SPE_ACC_ID,
			DX_CNC_EML_ADR,
			DI_VLD_CNC_EML_ADR
		FROM
			CDW.PHXX_ContactEmail;
QUIT;
DATA LEGEND.PHXX; 
	SET PHXX; 
RUN;

RSUBMIT;
/*%LET DB = DNFPRQUT;  *This is test;*/
/*%LET DB = DNFPRUUT;  *This is VUKX test;*/
%LET DB = DNFPUTDL;  *This is live;

LIBNAME PKUB DBX DATABASE=&DB OWNER=PKUB;

PROC SQL;
/*borrowers*/
	CREATE TABLE BRWS AS
		SELECT DISTINCT
			PDXX.DF_SPE_ACC_ID,
			PDXX.DF_PRS_ID,
			PDXX.DM_PRS_X,
			PDXX.DM_PRS_LST,
			PDXX.DC_ADR,
			PDXX.DX_STR_ADR_X,
			PDXX.DX_STR_ADR_X,
			PDXX.DM_CT,
			PDXX.DC_DOM_ST,
			PDXX.DF_ZIP_CDE,
			PDXX.DM_FGN_CNY,
			PDXX.DM_FGN_ST,
			DOD.LD_ACT_DUT_BEG,
			DOD.LD_ACT_DUT_END,
			DOD.LC_ACT_DUT,
			DOD.LC_LFT_ACT_DUT,
			DOD.LC_NTF_ACT_DUT,
			DOD.LD_EID_BEGIN_DATE,
			DOD.LD_NOTIFICATION_DATE,
			PDXX.DI_VLD_ADR,
			LNXX.LN_SEQ,
			LNXX.LR_ITR,
			LNXX.LC_INT_RDC_PGM,
			LNXX.LD_ITR_EFF_BEG,
			LNXX.LD_ITR_EFF_END,
			COALESCE(PHXX.DX_CNC_EML_ADR, PDXX.DX_ADR_EML) AS DX_ADR_EML,
			CASE
				WHEN ASCRA.BF_SSN IS NOT NULL THEN 'Y'
				ELSE 'N'
			END AS HASASCRA,
			SCRA.PF_REQ_ACT,
			LNXX.LD_LON_X_DSB
		FROM
			DOD
			JOIN PKUB.PDXX_PRS_NME PDXX
				ON DOD.SSN = PDXX.DF_PRS_ID
			LEFT JOIN PKUB.PDXX_PRS_ADR PDXX
				ON DOD.SSN = PDXX.DF_PRS_ID
			LEFT JOIN PKUB.PDXX_PRS_ADR_EML PDXX
				ON DOD.SSN = PDXX.DF_PRS_ID
				AND PDXX.DC_STA_PDXX = 'A'
				AND PDXX.DI_VLD_ADR_EML = 'Y'
			LEFT JOIN PHXX PHXX
				ON PHXX.DF_SPE_ACC_ID = PDXX.DF_SPE_ACC_ID
				AND PHXX.DI_VLD_CNC_EML_ADR = X
			JOIN PKUB.LNXX_LON LNXX
				ON DOD.SSN = LNXX.BF_SSN
			JOIN PKUB.DWXX_DW_CLC_CLU DWXX
				ON LNXX.BF_SSN = DWXX.BF_SSN
				AND LNXX.LN_SEQ = DWXX.LN_SEQ
			JOIN PKUB.LNXX_INT_RTE_HST LNXX
				ON LNXX.BF_SSN = LNXX.BF_SSN
				AND LNXX.LN_SEQ = LNXX.LN_SEQ
				AND LD_NOTIFICATION_DATE BETWEEN LNXX.LD_ITR_EFF_BEG AND LNXX.LD_ITR_EFF_END
/*				AND LNXX.LC_STA_LONXX = 'A'*/
			LEFT JOIN PKUB.AYXX_BR_LON_ATY ASCRA
				ON DOD.SSN = ASCRA.BF_SSN
				AND ASCRA.PF_REQ_ACT IN ('ASCRA')
			LEFT JOIN 
				(
					SELECT
						AYXX.BF_SSN,
						AYXX.PF_REQ_ACT
					FROM
						PKUB.AYXX_BR_LON_ATY AYXX
						JOIN
							(
								SELECT
									BF_SSN,
									MAX(LD_ATY_REQ_RCV) AS LD_ATY_REQ_RCV
								FROM
									PKUB.AYXX_BR_LON_ATY
								WHERE
									PF_REQ_ACT IN ('ASCRA','ISCRA')
								GROUP BY
									BF_SSN
							) MSCRA
							ON AYXX.BF_SSN = MSCRA.BF_SSN
							AND AYXX.LD_ATY_REQ_RCV = MSCRA.LD_ATY_REQ_RCV
							AND AYXX.PF_REQ_ACT IN ('ASCRA','ISCRA')
				) SCRA
				ON DOD.SSN = SCRA.BF_SSN
/*		WHERE*/
/*			LNXX.LC_STA_LONXX = 'R'*/
/*			AND LNXX.LA_CUR_PRI + DWXX.WA_TOT_BRI_OTS > X*/
		ORDER BY 
			PDXX.DF_SPE_ACC_ID
	;

/*endorsers/co-makers*/
	CREATE TABLE ENDS AS
		SELECT DISTINCT
			PDXX.DF_SPE_ACC_ID,
			PDXXE.DF_SPE_ACC_ID AS END_ACC_ID,
			DOD.LD_ACT_DUT_BEG,
			DOD.LD_ACT_DUT_END,
			DOD.LC_ACT_DUT,
			DOD.LC_LFT_ACT_DUT,
			DOD.LC_NTF_ACT_DUT,
			DOD.LD_EID_BEGIN_DATE,
			DOD.LD_NOTIFICATION_DATE,
			LNXX.LR_ITR,
			LNXX.LC_INT_RDC_PGM,
			LNXX.LD_ITR_EFF_BEG,
			LNXX.LD_ITR_EFF_END,
			LNXX.LN_SEQ,
			LNXX.LF_EDS,
			SCRA.PF_REQ_ACT,
			CASE
				WHEN ASCRA.BF_SSN IS NOT NULL THEN 'Y'
				ELSE 'N'
			END AS HASASCRA,
			LNXX.LD_LON_X_DSB
		FROM
			DOD
			JOIN PKUB.LNXX_EDS LNXX
				ON DOD.SSN = LNXX.LF_EDS
			JOIN PKUB.LNXX_LON LNXX
				ON LNXX.BF_SSN = LNXX.BF_SSN
				AND LNXX.LN_SEQ = LNXX.LN_SEQ
			JOIN PKUB.DWXX_DW_CLC_CLU DWXX
				ON LNXX.BF_SSN = DWXX.BF_SSN
				AND LNXX.LN_SEQ = DWXX.LN_SEQ
			JOIN PKUB.LNXX_INT_RTE_HST LNXX
				ON LNXX.BF_SSN = LNXX.BF_SSN
				AND LNXX.LN_SEQ = LNXX.LN_SEQ
				AND LD_NOTIFICATION_DATE BETWEEN LNXX.LD_ITR_EFF_BEG AND LNXX.LD_ITR_EFF_END
/*				AND LNXX.LC_STA_LONXX = 'A'*/
			JOIN PKUB.PDXX_PRS_NME PDXX
				ON LNXX.BF_SSN = PDXX.DF_PRS_ID
			JOIN PKUB.PDXX_PRS_NME PDXXE
				ON LNXX.LF_EDS = PDXXE.DF_PRS_ID
			LEFT JOIN PKUB.AYXX_BR_LON_ATY ASCRA
				ON LNXX.BF_SSN = ASCRA.BF_SSN
				AND ASCRA.PF_REQ_ACT IN ('ASCRA')
			LEFT JOIN 
				(
					SELECT
						AYXX.BF_SSN,
						AYXX.PF_REQ_ACT
					FROM
						PKUB.AYXX_BR_LON_ATY AYXX
						JOIN
							(
								SELECT
									BF_SSN,
									MAX(LD_ATY_REQ_RCV) AS LD_ATY_REQ_RCV
								FROM
									PKUB.AYXX_BR_LON_ATY
								WHERE
									PF_REQ_ACT IN ('ASCRA','ISCRA')
								GROUP BY
									BF_SSN
							) MSCRA
							ON AYXX.BF_SSN = MSCRA.BF_SSN
							AND AYXX.LD_ATY_REQ_RCV = MSCRA.LD_ATY_REQ_RCV
							AND AYXX.PF_REQ_ACT IN ('ASCRA','ISCRA')
				) SCRA
				ON LNXX.BF_SSN = SCRA.BF_SSN
/*		WHERE*/
/*			LNXX.LC_STA_LONXX = 'R'*/
/*			AND LNXX.LA_CUR_PRI + DWXX.WA_TOT_BRI_OTS > X*/
		ORDER BY 
			PDXX.DF_SPE_ACC_ID,
			LNXX.LN_SEQ
	;
QUIT;
ENDRSUBMIT;

/*gets borrower & endorser data sets from legend*/
DATA _BRWS; 
	SET LEGEND.BRWS; 
RUN;
DATA ENDS; 
	SET LEGEND.ENDS; 
RUN;

/*additional exclusions based on loan disbursement date*/
DATA BRWS;
	SET _BRWS;
	WHERE 
		NOT (
				(/*exclude loans disbursed after active duty*/
					LD_LON_X_DSB > LD_ACT_DUT_BEG 
					AND LC_NTF_ACT_DUT ^= 'Y'
				)
				OR (/*exclude reservists where loans disburse after active duty*/
						LD_LON_X_DSB > COALESCE(LD_EID_BEGIN_DATE,'XXDECXXXX'D) 
						AND LC_NTF_ACT_DUT = 'Y'
					)
			);
RUN;

/*sends data to SQL Server*/
DATA SQL._BorrowersPopulation_CRXXXX;
	SET	BRWS;
RUN;
DATA SQL._EndorsersPopulation_CRXXXX;
	SET	ENDS;
RUN;

/*counting data sets*/
DATA ALL;
	SET BRWS ENDS;
RUN;

PROC SQL;
	CREATE TABLE DODMATCH_COUNT AS
		SELECT COUNT(DISTINCT SSN) AS BORROWERS_REVIEWED
		FROM DODMATCH;

	CREATE TABLE DOD_XYZN_COUNT AS
		SELECT COUNT(DISTINCT DF_SPE_ACC_ID) AS ACTIVE_DUTY
		FROM ALL;
QUIT;

/*one-to-one merge*/
DATA DATA_CRXXXX;
	SET DODMATCH_COUNT;
	SET DOD_XYZN_COUNT;
	SET DODMATCH (KEEP=ACTIVE_DUTY_STATUS_DATE);
RUN;

/*sends counts to SQL Server*/
DATA SQL._DATA_CRXXXX;
	SET DATA_CRXXXX;
RUN;

/* Create RX and RX data sets for file creation */
PROC SQL; 
	CREATE TABLE RX AS
		SELECT DISTINCT
			DF_SPE_ACC_ID,
			DF_PRS_ID,
			DM_PRS_X,
			DM_PRS_LST,
			DC_ADR,
			DX_STR_ADR_X,
			DX_STR_ADR_X,
			DM_CT,
			DC_DOM_ST,
			DF_ZIP_CDE,
			DM_FGN_CNY,
			DM_FGN_ST
		FROM
			BRWS
		WHERE
			DI_VLD_ADR = 'Y' /*Only include borrowers with valid addresses*/
			AND DX_ADR_EML IS NULL /*Only include borrowers no email address*/
			AND 
				(
					LR_ITR <= X OR 
					LD_LON_X_DSB > LD_ACT_DUT_BEG
				)
			AND NOT (LC_ACT_DUT = 'N' AND LC_LFT_ACT_DUT = 'N' AND LC_NTF_ACT_DUT = 'N')
		ORDER BY
			DC_DOM_ST
	;
	
	CREATE TABLE RX AS
		SELECT DISTINCT
			DF_SPE_ACC_ID,
			DM_PRS_X,
			DM_PRS_LST,
			DX_ADR_EML
		FROM
			BRWS
		WHERE
			(
				LR_ITR <= X OR 
				LD_LON_X_DSB > LD_ACT_DUT_BEG
			)
			AND DX_ADR_EML IS NOT NULL /*Only include borrowers with an valid email address*/
			AND NOT (LC_ACT_DUT = 'N' AND LC_LFT_ACT_DUT = 'N' AND LC_NTF_ACT_DUT = 'N')
	;
QUIT;

*CALCULATE KEYLINE;
DATA RXK (DROP = KEYSSN MODAY KEYLINE CHKDIG DIG I CHKDIG CHKX CHKX CHKX CHKDIGIT CHECK);
	SET RX;
	KEYSSN = TRANSLATE(DF_PRS_ID,'MYLAUGHTER','XXXXXXXXXX');
	MODAY = PUT(DATE(),MMDDYYNX.);
	KEYLINE = "P"||KEYSSN||MODAY||DC_ADR;
	CHKDIG = X;
	LENGTH DIG $X.;
	DO I = X TO LENGTH(KEYLINE);
		IF I/X NE ROUND(I/X,X) 
			THEN DIG = PUT(INPUT(SUBSTR(KEYLINE,I,X),BITSX.X) * X, X.);
		ELSE DIG = PUT(INPUT(SUBSTR(KEYLINE,I,X),BITSX.X), X.);
		IF SUBSTR(DIG,X,X) = " " 
			THEN CHKDIG = CHKDIG + INPUT(SUBSTR(DIG,X,X),X.);
			ELSE DO;
				CHKX = INPUT(SUBSTR(DIG,X,X),X.);
				CHKX = INPUT(SUBSTR(DIG,X,X),X.);
				IF CHKX + CHKX >= XX
					THEN DO;
						CHKX = PUT(CHKX + CHKX,X.);
						CHKX = INPUT(SUBSTR(CHKX,X,X),X.);
						CHKX = INPUT(SUBSTR(CHKX,X,X),X.);
					END;
				CHKDIG = CHKDIG + CHKX + CHKX;
			END;
	END;
	CHKDIGIT = XX - INPUT(SUBSTR((RIGHT(PUT(CHKDIG,X.))),X,X),X.);
	IF CHKDIGIT = XX THEN CHKDIGIT = X;
	CHECK = PUT(CHKDIGIT,X.);
	ACSKEY = "#"||KEYLINE||CHECK||"#";
RUN;

/*generate files*/
DATA _NULL_;
	SET  WORK.RXK;
	FILE REPORTX DELIMITER=',' DSD DROPOVER LRECL=XXXXX;
	FORMAT DF_SPE_ACC_ID $XX. ;
	FORMAT DM_PRS_X $XX. ;
	FORMAT DM_PRS_LST $XX. ;
	FORMAT DX_STR_ADR_X $XX. ;
	FORMAT DX_STR_ADR_X $XX. ;
	FORMAT DM_CT $XX. ;
	FORMAT DC_DOM_ST $X. ;
	FORMAT DF_ZIP_CDE $XX. ;
	FORMAT DM_FGN_CNY $XX. ;
	FORMAT DM_FGN_ST $XX. ;
	FORMAT ACSKEY $XX. ;

	IF _N_ = X THEN PUT "ACCT NO,FIRST NAME,LAST NAME,STREET X,STREET X,CITY,STATE,ZIP,FOREIGN COUNTRY,FOREIGN STATE,ACS KEYLINE,COST CENTER";

	DO;
		PUT DF_SPE_ACC_ID $ @;
		PUT DM_PRS_X $ @;
		PUT DM_PRS_LST $ @;
		PUT DX_STR_ADR_X $ @;
		PUT DX_STR_ADR_X $ @;
		PUT DM_CT $ @;
		PUT DC_DOM_ST $ @;
		PUT DF_ZIP_CDE $ @;
		PUT DM_FGN_CNY $ @;
		PUT DM_FGN_ST $ @;
		PUT ACSKEY $ @;
		PUT 'MAXXXX';
	END;
RUN;

DATA _NULL_;
	SET RX ;
	FILE REPORTX DELIMITER=',' DSD DROPOVER LRECL=XXXXX;
	IF _N_ = X THEN PUT 'DF_SPE_ACC_ID,DM_PRS_X,DM_PRS_LST,DX_ADR_EML';
	PUT DF_SPE_ACC_ID DM_PRS_X DM_PRS_LST DX_ADR_EML ;
RUN;

/*CALL SQL SPROC PopulateScraTables TO CREATE RX,X,X,X,X,X DATA SETS*/ 
/* TEST */
/*	LIBNAME SQL ODBC REQUIRED="FILEDSN=X:\PADR\ODBC\CLS_TEST.dsn; bl_keepnulls=no; READ_ISOLATION_LEVEL=RU" SCHEMA= dbo;*/
/* LIVE */
LIBNAME SQL ODBC REQUIRED="FILEDSN=X:\PADR\ODBC\CLS.dsn; bl_keepnulls=no; READ_ISOLATION_LEVEL=RU" SCHEMA= dbo;

PROC SQL;
/*	CONNECT TO ODBC (REQUIRED="FILEDSN=X:\PADR\ODBC\CLS_TEST.dsn; bl_keepnulls=no; READ_ISOLATION_LEVEL=RU");*/
	CONNECT TO ODBC (REQUIRED="FILEDSN=X:\PADR\ODBC\CLS.dsn; bl_keepnulls=no; READ_ISOLATION_LEVEL=RU");
	EXECUTE(PopulateScraTables_CRXXXX) BY ODBC;
	DISCONNECT FROM ODBC;
QUIT;
