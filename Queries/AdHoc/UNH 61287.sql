/*
Deployment script for CSYS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CSYS"
:setvar DefaultFilePrefix "CSYS"
:setvar DefaultDataPath "D:\Microsoft SQL Server\MSSQL10.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Microsoft SQL Server\MSSQL10.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];

GO
PRINT N'Creating [dbo].[SYSA_LST_AesAccounts]...';


GO
CREATE TABLE [dbo].[SYSA_LST_AesAccounts] (
    [AesAccountId] INT          IDENTITY (1, 1) NOT NULL,
    [SqlUserId]    INT          NOT NULL,
    [AesAccount]   CHAR (10)    NOT NULL,
    [AddedAt]      DATETIME     NOT NULL,
    [AddedBy]      VARCHAR (25) NOT NULL,
    [DeletedAt]    DATETIME     NULL,
    [DeletedBy]    VARCHAR (25) NULL,
    PRIMARY KEY CLUSTERED ([AesAccountId] ASC)
);


GO
ALTER TABLE [dbo].[SYSA_LST_AesAccounts] WITH NOCHECK
    ADD CONSTRAINT [FK_SYSA_LST_AesAccounts_SYSA_DAT_Users] FOREIGN KEY ([SqlUserId]) REFERENCES [dbo].[SYSA_DAT_Users] ([SqlUserId]);

PRINT N'Insert AesAccountId records from the SYSA_DAT_Users table'
GO

INSERT INTO SYSA_LST_AesAccounts(SqlUserId, AesAccount, AddedAt, AddedBy)
SELECT
	SqlUserId,
	AesAccountId,
	GETDATE(),
	SUSER_SNAME()
FROM
	SYSA_DAT_Users
WHERE
	LEN(AesAccountId) > 1


PRINT N'Creating [dbo].[spSYSA_DeleteAesAccount]...';


GO
CREATE PROCEDURE [dbo].[spSYSA_DeleteAesAccount]
	@AesAccountId int
AS
	UPDATE
		SYSA_LST_AesAccounts
	SET
		DeletedAt = GETDATE(),
		DeletedBy = SUSER_SNAME()
	WHERE
		AesAccountId = @AesAccountId
RETURN 0
GO
PRINT N'Creating [dbo].[spSYSA_GetAesAccounts]...';


GO
CREATE PROCEDURE [dbo].[spSYSA_GetAesAccounts]
	@SqlUserId int
AS
	SELECT
		AesAccountId,
		AesAccount
	FROM
		SYSA_LST_AesAccounts
	WHERE
		SqlUserId = @SqlUserId
		AND DeletedAt IS NULL

RETURN 0
GO
PRINT N'Creating [dbo].[spSYSA_InsertAesAccount]...';


GO
CREATE PROCEDURE [dbo].[spSYSA_InsertAesAccount]
	@SqlUserId int,
	@AesAccount char(10)
AS
	INSERT INTO SYSA_LST_AesAccounts(SqlUserId, AesAccount, AddedAt, AddedBy)
	VALUES(@SqlUserId, @AesAccount, GETDATE(), SUSER_SNAME())
RETURN 0
GO


GO
PRINT N'Altering [dbo].[SYSA_DAT_Users]...';

ALTER TABLE [dbo].[SYSA_DAT_Users] DROP CONSTRAINT [DF_SYSA_DAT_Users_AesAccountId]
GO


GO
ALTER TABLE [dbo].[SYSA_DAT_Users] DROP COLUMN [AesAccountId];


GO
ALTER TABLE [dbo].[SYSA_DAT_Users]
    ADD [AddedAt]       DATETIME     NULL,
        [AddedBy]       VARCHAR (25) NULL,
        [InactivatedAt] DATETIME     NULL,
        [InactivatedBy] VARCHAR (25) NULL;

GO
PRINT N'Creating [dbo].[FK_SYSA_LST_AesAccounts_SYSA_DAT_Users]...';


GO
PRINT N'Altering [dbo].[spGENR_GetUserData]...';


GO
-- =============================================
-- Author:		Bret Pehrson
-- Create date: 08/28/2012
-- Description:	Returns a list of all the users in the SYSA_DAT_Users table
-- =============================================
ALTER PROCEDURE [dbo].[spGENR_GetUserData] 
	@Status varchar(50) = ''
AS
BEGIN
	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    IF @Status <> ''
		SELECT
			U.SqlUserID
			,U.WindowsUserName
			,U.FirstName
			,U.MiddleInitial
			,U.LastName
			,U.EMail
			,U.Extension 
			,U.Extension2
			,BU.[Name] [BusinessUnit]
			,R.RoleName [Role]
			,U.[Status]
			,U.Title
			,U.AesUserId
		FROM
			SYSA_DAT_Users U
			LEFT JOIN GENR_LST_BusinessUnits BU
				ON U.BusinessUnit = BU.ID
			LEFT JOIN SYSA_LST_Role R
				ON U.[Role] = R.RoleID
		WHERE
			[Status] = @Status
	ELSE
				SELECT
			U.SqlUserID
			,U.WindowsUserName
			,U.FirstName
			,U.MiddleInitial
			,U.LastName
			,U.EMail
			,U.Extension 
			,U.Extension2
			,BU.[Name] [BusinessUnit]
			,R.RoleName [Role]
			,U.[Status]
			,U.Title
			,U.AesUserId
		FROM
			SYSA_DAT_Users U
			LEFT JOIN GENR_LST_BusinessUnits BU
				ON U.BusinessUnit = BU.ID
			LEFT JOIN SYSA_LST_Role R
				ON U.[Role] = R.RoleID
END
GO
PRINT N'Altering [dbo].[spGENR_InsertUser]...';


GO

/********************************************************
*Routine Name	: [dbo].[spGENR_InsertUser]
*Purpose		: Insert new user into SYSA_DAT_Users table
*Used by		: Systems Support
*Revision History
*Version	Date		Person			Description
*=======	==========	============	================
*1.0.0		6/13/2012	Bret Pehrson
********************************************************/

ALTER PROCEDURE [dbo].[spGENR_InsertUser]
@WindowsUserName Varchar(50),
@FirstName Varchar(50),
@MiddleInitial Char(1) = '',
@LastName Varchar(50),
@EMail Varchar(100),
@Extension Varchar(4) = '',
@Extension2 Varchar(4) = '',
@BusinessUnit int,
@Role int,
@Status Varchar(50),
@Title Varchar(50),
@AesUserID Varchar(7)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO SYSA_DAT_Users(WindowsUserName
		, FirstName
		, MiddleInitial
		, LastName
		, EMail
		, Extension
		, Extension2
		, BusinessUnit
		, [Role]
		, [Status]
		, [Title]
		, AesUserId
	)
	VALUES(@WindowsUserName
		, @FirstName
		, @MiddleInitial
		, @LastName
		, @EMail
		, @Extension
		, @Extension2
		, @BusinessUnit
		, @Role
		, @Status
		, @Title
		, @AesUserID
	)

	SET NOCOUNT OFF;
END
GO
PRINT N'Altering [dbo].[spSYSA_UpdateUser]...';


GO
-- =============================================
-- Author:		Bret Pehrson
-- Create date: 08/29/2012
-- Description:	Updates user in the SYSA_DAT_Users table
-- =============================================
ALTER PROCEDURE [dbo].[spSYSA_UpdateUser] 
	-- Add the parameters for the stored procedure here
	@SqlUserID int = 0, 
	@WindowsUserName varchar(50) = '', 
	@FirstName varchar(50) = '', 
	@MiddleInitial char(1) = '', 
	@LastName varchar(50) = '', 
	@EMail varchar(100) = '', 
	@Extension varchar(4) = '', 
	@Extension2 varchar(4) = '',
	@BusinessUnit int = 0, 
	@Role int = 0,
	@Status varchar(50) = '',
	@Title varchar(50) = '',
	@AesUserId varchar(7) = ''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE SYSA_DAT_Users
	SET WindowsUserName = @WindowsUserName
		, FirstName = @FirstName
		, MiddleInitial = @MiddleInitial
		, LastName = @LastName
		, EMail = @EMail
		, Extension = @Extension
		, Extension2 = @Extension2
		, BusinessUnit = @BusinessUnit
		, [Role] = @Role
		, [Status] = @Status
		, Title = @Title
		, AesUserId = @AesUserId
	WHERE SqlUserId = @SqlUserID
END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[SYSA_LST_AesAccounts] WITH CHECK CHECK CONSTRAINT [FK_SYSA_LST_AesAccounts_SYSA_DAT_Users];


GO
PRINT N'Update complete.';


GO



/*
Deployment script for TLP

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TLP"
:setvar DefaultFilePrefix "TLP"
:setvar DefaultDataPath "D:\Microsoft SQL Server\MSSQL10.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Microsoft SQL Server\MSSQL10.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[AddUser]...';


GO
CREATE PROCEDURE [dbo].[AddUser]
	@UserId VARCHAR(50),
	@AuthLevel SMALLINT,
	@Valid BIT
AS
	INSERT INTO UserDat(UserID, [Password], AuthLevel, Valid)
	VALUES(@UserId, 'rIQXpOFj2fmdGw2xbTdRWg==', @AuthLevel, @Valid)
RETURN 0
GO
PRINT N'Creating [dbo].[GetAccount]...';


GO
CREATE PROCEDURE [dbo].[GetAccount]
	@UserId VARCHAR(50)
AS
	SELECT
		U.UserID,
		A.LevelDesc,
		U.Valid
	FROM
		UserDat U
		LEFT JOIN AuthList A
			ON U.AuthLevel = A.AuthLevel
	WHERE
		U.UserID = @UserId
RETURN 0
GO
PRINT N'Creating [dbo].[GetAuthList]...';


GO
CREATE PROCEDURE [dbo].[GetAuthList]
AS
	SELECT
		AuthLevel,
		LevelDesc
	FROM
		AuthList
RETURN 0
GO
PRINT N'Creating [dbo].[UpdateUser]...';


GO
CREATE PROCEDURE [dbo].[UpdateUser]
	@UserId VARCHAR(50),
	@AuthLevel SMALLINT,
	@Valid BIT
AS
	UPDATE
		UserDat
	SET
		AuthLevel = @AuthLevel,
		Valid = @Valid
	WHERE
		UserID = @UserId
RETURN 0
GO
PRINT N'Update complete.';


GO
