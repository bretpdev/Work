%LET RPTLIB = T:\SAS;
OPTIONS COMPRESS=BINARY;

/*PROC IMPORT OUT= WORK.Source*/
/*            DATAFILE= "T:\NH XXXX.xlsx" */
/*            DBMS=EXCEL REPLACE;*/
/*     RANGE="A$"; */
/*     GETNAMES=YES;*/
/*     MIXED=NO;*/
/*     SCANTEXT=YES;*/
/*     USEDATE=YES;*/
/*     SCANTIME=YES;*/
/*RUN;*/

LIBNAME  LEGEND  REMOTE  SERVER=LEGEND SLIBREF=WORK;
/*DATA LEGEND.SOURCE; *Send data to Duster;*/
/*SET SOURCE;*/
/*RUN;*/

RSUBMIT LEGEND;
LIBNAME PKUB DBX DATABASE=DNFPUTDL OWNER=PKUB;

PROC SQL ;
	CREATE TABLE BALLON_POP AS
		SELECT DISTINCT
			LNXX.BF_SSN,
			LNXX.LN_SEQ,
			MAX_GRAD.LA_RPS_ISL AS MAX_VAL,
			(SEC_GRAD.LA_RPS_ISL * X) AS NEXT_VAL
		FROM
			PKUB.LNXX_LON_RPS LNXX
		INNER JOIN
		(
			SELECT
				LNXX.BF_SSN,
				LNXX.LN_SEQ,
				LNXX.LA_RPS_ISL,
				seq.LN_GRD_RPS_SEQ AS LN_GRD_RPS_SEQ
			FROM
				PKUB.LNXX_LON_RPS LNXX
				INNER JOIN PKUB.LNXX_LON_RPS_SPF LNXX
					ON LNXX.BF_SSN = LNXX.BF_SSN
					AND LNXX.LN_SEQ = LNXX.LN_SEQ
					AND LNXX.LN_RPS_SEQ = LNXX.LN_RPS_SEQ
				INNER JOIN
				(
					SELECT
						LNXX.BF_SSN,
						LNXX.LN_SEQ,
						MAX(LNXX.LN_GRD_RPS_SEQ) AS LN_GRD_RPS_SEQ
					FROM
						PKUB.LNXX_LON_RPS LNXX
						INNER JOIN PKUB.LNXX_LON_RPS_SPF LNXX
							ON LNXX.BF_SSN = LNXX.BF_SSN
							AND LNXX.LN_SEQ = LNXX.LN_SEQ
							AND LNXX.LN_RPS_SEQ = LNXX.LN_RPS_SEQ
						WHERE
							LNXX.LC_STA_LONXX = 'A'
						GROUP BY
							LNXX.BF_SSN,
							LNXX.LN_SEQ
				)seq
					on seq.bf_ssn = lnXX.bf_ssn
					and seq.ln_seq = lnXX.ln_seq
					and seq.LN_GRD_RPS_SEQ = lnXX.LN_GRD_RPS_SEQ
				WHERE
					LNXX.LC_STA_LONXX = 'A'
		) AS MAX_GRAD
			ON MAX_GRAD.BF_SSN = LNXX.BF_SSN
			AND MAX_GRAD.LN_SEQ = LNXX.LN_SEQ
		INNER JOIN PKUB.LNXX_LON LNXX
			ON LNXX.BF_SSN = LNXX.BF_SSN
			AND LNXX.LN_SEQ = LNXX.LN_SEQ
			AND LNXX.LC_STA_LONXX = 'R'
			AND LNXX.LA_CUR_PRI > X
		LEFT JOIN
		(
			SELECT
				LNXX.BF_SSN,
				LNXX.LN_SEQ,
				LNXX.LA_RPS_ISL,
				LNXX.LN_GRD_RPS_SEQ
			FROM
				PKUB.LNXX_LON_RPS LNXX
				INNER JOIN PKUB.LNXX_LON_RPS_SPF LNXX
					ON LNXX.BF_SSN = LNXX.BF_SSN
					AND LNXX.LN_SEQ = LNXX.LN_SEQ
					AND LNXX.LN_RPS_SEQ = LNXX.LN_RPS_SEQ
				WHERE
					LNXX.LC_STA_LONXX = 'A'
					AND LN_RPS_TRM = X
		)COLTONS_CODE
			ON COLTONS_CODE.BF_SSN = MAX_GRAD.BF_SSN
			AND COLTONS_CODE.LN_SEQ = MAX_GRAD.LN_SEQ
			AND COLTONS_CODE.LN_GRD_RPS_SEQ = MAX_GRAD.LN_GRD_RPS_SEQ
		LEFT JOIN
		(
			SELECT
				LNXX.BF_SSN,
				LNXX.LN_SEQ,
				LNXX.LA_RPS_ISL,
				LNXX.LN_GRD_RPS_SEQ AS LN_GRD_RPS_SEQ
			FROM
				PKUB.LNXX_LON_RPS LNXX
				INNER JOIN PKUB.LNXX_LON_RPS_SPF LNXX
					ON LNXX.BF_SSN = LNXX.BF_SSN
					AND LNXX.LN_SEQ = LNXX.LN_SEQ
					AND LNXX.LN_RPS_SEQ = LNXX.LN_RPS_SEQ
				WHERE
					LNXX.LC_STA_LONXX = 'A'
		)SEC_GRAD
			ON SEC_GRAD.BF_SSN = LNXX.BF_SSN
			AND SEC_GRAD.LN_SEQ = LNXX.LN_SEQ
			AND SEC_GRAD.LN_GRD_RPS_SEQ = (COLTONS_CODE.LN_GRD_RPS_SEQ - X)
		WHERE
			 MAX_GRAD.LA_RPS_ISL > (SEC_GRAD.LA_RPS_ISL * X)
			 AND COLTONS_CODE.BF_SSN IS NOT NULL
			 AND LNXX.LC_STA_LONXX = 'A'
			 AND SEC_GRAD.BF_SSN IS NOT NULL
			 AND LNXX.LC_TYP_SCH_DIS NOT IN ('IB', 'IL', 'IX', 'IP', 'CL', 'CQ', 'CX', 'CX', 'CX', 'CA', 'CP') 
			 AND DAYS(LNXX.LD_CRT_LONXX) < DAYS('X/XX/XXXX')
;
			
	CREATE TABLE POP AS
		SELECT DISTINCT
			LNXX.BF_SSN,
			LNXX.LN_SEQ,
			MIN(LNXX.LN_GRD_RPS_SEQ) AS LN_GRD_RPS_SEQ
/*			((RSXX.LD_RPS_X_PAY_DU + (LNXX.LN_RPS_TRM * XX)) - TODAY()) AS DIFFERENCE*/

		FROM
			PKUB.WQXX_TSK_QUE_HST WQXX
			INNER JOIN PKUB.PDXX_PRS_NME PDXX
				ON WQXX.BF_SSN = PDXX.DF_PRS_ID
			INNER JOIN PKUB.RSXX_BR_RPD RSXX
				ON RSXX.BF_SSN = PDXX.DF_PRS_ID
			INNER JOIN PKUB.LNXX_LON_RPS LNXX
				ON LNXX.BF_SSN = WQXX.BF_SSN
				AND RSXX.LN_RPS_SEQ = LNXX.LN_RPS_SEQ
			INNER JOIN PKUB.LNXX_LON LNXX
				ON LNXX.BF_SSN = LNXX.BF_SSN
				AND LNXX.LN_SEQ = LNXX.LN_SEQ
			INNER JOIN PKUB.LNXX_LON_RPS_SPF LNXX
				ON LNXX.BF_SSN = LNXX.BF_SSN
				AND LNXX.LN_SEQ = LNXX.LN_SEQ
				AND LNXX.LN_RPS_SEQ = LNXX.LN_RPS_SEQ
/*			INNER JOIN SOURCE S*/
/*				ON S.WN_CTL_TSK = WQXX.WN_CTL_TSK*/
/*				AND S.WF_QUE = WQXX.WF_QUE*/
/*				AND S.WF_SUB_QUE = WQXX.WF_SUB_QUE*/
/*				AND S.PF_REQ_ACT = WQXX.PF_REQ_ACT*/
		WHERE
			LNXX.LC_TYP_SCH_DIS NOT IN ('IB', 'IL', 'IX', 'IP', 'CL', 'CQ', 'CX', 'CX', 'CX', 'CA', 'CP') 
			AND LNXX.LC_STA_LONXX = 'A' 
			AND RSXX.LC_STA_RPSTXX = 'A'
			AND ((RSXX.LD_RPS_X_PAY_DU + (LNXX.LN_RPS_TRM * XX)) > TODAY())
			AND LNXX.LC_STA_LONXX = 'R'
			AND LNXX.LA_CUR_PRI > X
		GROUP BY
			LNXX.BF_SSN,
			LNXX.LN_SEQ
;*/;

CREATE TABLE FINAL AS 
	SELECT DISTINCT
		LNXX.BF_SSN,
		LNXX.LN_SEQ,
		LNXX.LA_RPS_ISL,
		((((LNXX.LR_ITR / XXX) * LNXX.LA_CUR_PRI) / XXX) * XX) AS MONTHLY_INT
	FROM
		POP P 
	INNER JOIN PKUB.LNXX_LON LNXX
		ON LNXX.BF_SSN = P.BF_SSN
		AND LNXX.LN_SEQ = P.LN_SEQ
	INNER JOIN PKUB.LNXX_INT_RTE_HST LNXX
		ON LNXX.BF_SSN = LNXX.BF_SSN
		AND LNXX.LN_SEQ = LNXX.LN_SEQ
		AND LNXX.LC_STA_LONXX = 'A'
	INNER JOIN PKUB.RSXX_BR_RPD RSXX
		ON RSXX.BF_SSN = LNXX.BF_SSN
	INNER JOIN PKUB.LNXX_LON_RPS LNXX
		ON LNXX.BF_SSN = LNXX.BF_SSN
		AND RSXX.LN_RPS_SEQ = LNXX.LN_RPS_SEQ
	INNER JOIN PKUB.LNXX_LON_RPS_SPF LNXX
		ON LNXX.BF_SSN = P.BF_SSN
		AND LNXX.LN_SEQ = P.LN_SEQ
		AND LNXX.LN_RPS_SEQ = LNXX.LN_RPS_SEQ
		AND LNXX.LN_GRD_RPS_SEQ = P.LN_GRD_RPS_SEQ
	WHERE 
		TODAY() BETWEEN LNXX.LD_ITR_EFF_BEG AND LNXX.LD_ITR_EFF_END
		AND LNXX.LC_TYP_SCH_DIS NOT IN ('IB', 'IL', 'IX', 'IP', 'CL', 'CQ', 'CX', 'CX', 'CX', 'CA', 'CP')
			AND LNXX.LC_STA_LONXX = 'A' 
			AND RSXX.LC_STA_RPSTXX = 'A'
			AND LNXX.LC_STA_LONXX = 'R'
			AND LNXX.LA_CUR_PRI > X
;*/;
QUIT;
ENDRSUBMIT;

DATA BALLON_POP; SET LEGEND.BALLON_POP;RUN;
DATA POP; SET LEGEND.POP; RUN;
DATA FINAL; SET LEGEND.FINAL;RUN;

PROC SQL;
	CREATE TABLE TE AS 
		SELECT DISTINCT
			BF_SSN
		FROM
			POP
;
QUIT;


PROC SQL;
	CREATE TABLE T AS 
		SELECT DISTINCT
			P.BF_SSN
		FROM
			BALLON_POP P
		INNER JOIN TE
			ON TE.BF_SSN = P.BF_SSN
;
QUIT;

PROC SQL;
	CREATE TABLE LFINAL AS 
		SELECT
			BF_SSN,
			SUM(LA_RPS_ISL) AS LA_RPS_ISL,
			SUM(MONTHLY_INT) AS MONTHLY_INT
		FROM
			FINAL
		GROUP BY
			BF_SSN
;
QUIT;

PROC SQL;
	CREATE TABLE OUT AS 
		SELECT
			*
		FROM 
			LFINAL
		WHERE
			MONTHLY_INT > LA_RPS_ISL
;
QUIT;
/**/
PROC EXPORT DATA = WORK.T
            OUTFILE = "T:\SAS\NH XXXX BALLON.xlsx" 
            DBMS = EXCEL
			REPLACE;
     SHEET="A"; 
RUN;
