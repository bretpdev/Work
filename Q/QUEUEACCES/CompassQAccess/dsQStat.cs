//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace CompassQAccess {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsQStat : DataSet {
        
        private QueueDetailDataTable tableQueueDetail;
        
        public dsQStat() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsQStat(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["QueueDetail"] != null)) {
                    this.Tables.Add(new QueueDetailDataTable(ds.Tables["QueueDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QueueDetailDataTable QueueDetail {
            get {
                return this.tableQueueDetail;
            }
        }
        
        public override DataSet Clone() {
            dsQStat cln = ((dsQStat)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["QueueDetail"] != null)) {
                this.Tables.Add(new QueueDetailDataTable(ds.Tables["QueueDetail"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableQueueDetail = ((QueueDetailDataTable)(this.Tables["QueueDetail"]));
            if ((this.tableQueueDetail != null)) {
                this.tableQueueDetail.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsQStat";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsQStat.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableQueueDetail = new QueueDetailDataTable();
            this.Tables.Add(this.tableQueueDetail);
        }
        
        private bool ShouldSerializeQueueDetail() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void QueueDetailRowChangeEventHandler(object sender, QueueDetailRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QueueDetailDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnQueueName;
            
            internal QueueDetailDataTable() : 
                    base("QueueDetail") {
                this.InitClass();
            }
            
            internal QueueDetailDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn QueueNameColumn {
                get {
                    return this.columnQueueName;
                }
            }
            
            public QueueDetailRow this[int index] {
                get {
                    return ((QueueDetailRow)(this.Rows[index]));
                }
            }
            
            public event QueueDetailRowChangeEventHandler QueueDetailRowChanged;
            
            public event QueueDetailRowChangeEventHandler QueueDetailRowChanging;
            
            public event QueueDetailRowChangeEventHandler QueueDetailRowDeleted;
            
            public event QueueDetailRowChangeEventHandler QueueDetailRowDeleting;
            
            public void AddQueueDetailRow(QueueDetailRow row) {
                this.Rows.Add(row);
            }
            
            public QueueDetailRow AddQueueDetailRow(string QueueName) {
                QueueDetailRow rowQueueDetailRow = ((QueueDetailRow)(this.NewRow()));
                rowQueueDetailRow.ItemArray = new object[] {
                        QueueName};
                this.Rows.Add(rowQueueDetailRow);
                return rowQueueDetailRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                QueueDetailDataTable cln = ((QueueDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new QueueDetailDataTable();
            }
            
            internal void InitVars() {
                this.columnQueueName = this.Columns["QueueName"];
            }
            
            private void InitClass() {
                this.columnQueueName = new DataColumn("QueueName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQueueName);
                this.columnQueueName.AllowDBNull = false;
            }
            
            public QueueDetailRow NewQueueDetailRow() {
                return ((QueueDetailRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new QueueDetailRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(QueueDetailRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QueueDetailRowChanged != null)) {
                    this.QueueDetailRowChanged(this, new QueueDetailRowChangeEvent(((QueueDetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QueueDetailRowChanging != null)) {
                    this.QueueDetailRowChanging(this, new QueueDetailRowChangeEvent(((QueueDetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QueueDetailRowDeleted != null)) {
                    this.QueueDetailRowDeleted(this, new QueueDetailRowChangeEvent(((QueueDetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QueueDetailRowDeleting != null)) {
                    this.QueueDetailRowDeleting(this, new QueueDetailRowChangeEvent(((QueueDetailRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveQueueDetailRow(QueueDetailRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QueueDetailRow : DataRow {
            
            private QueueDetailDataTable tableQueueDetail;
            
            internal QueueDetailRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableQueueDetail = ((QueueDetailDataTable)(this.Table));
            }
            
            public string QueueName {
                get {
                    return ((string)(this[this.tableQueueDetail.QueueNameColumn]));
                }
                set {
                    this[this.tableQueueDetail.QueueNameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QueueDetailRowChangeEvent : EventArgs {
            
            private QueueDetailRow eventRow;
            
            private DataRowAction eventAction;
            
            public QueueDetailRowChangeEvent(QueueDetailRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public QueueDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
