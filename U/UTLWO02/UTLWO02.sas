/*******************************************************************************
* UTLWO02 - UHEAA LOAN SALE TRIGGER FILE PROCESS (REWRITE)
* FOR PRODUCTION: 
* 1. UNCOMMENT CODE <BLOCK1> 
* 2. COMMENT CODE <BLOCK2> AND <BLOCK3A> AND <BLOCK3B> AND <BLOCK4> 
* 3. CHANGE DIRECTORY FROM TEST TO LIVE FOR REPORT 80
*********************************************************************************
* IMPORTANT NOTE: REPORT 80 IS ACTAULLY A DATA SET THAT WILL FEED UTLWA08
* ANY CHANGES TO REPORT80 COULD POTENTIALLY IMPACT UTLWA08. PLEASE NOTE 
* THE RELATIONSHIP BETWEEN THESE TWO JOBS AND TAKE APPROPRIATE ACTIONS TO 
* ENSURE THE RELATIONAL INTEGRITY.
********************************************************************************
*====UNCOMMENT <BLOCK1> FOR PRODUCTION=========================================*/
/*LIBNAME DLGSUTWH DB2 DATABASE=DLGSUTWH OWNER=OLWHRM1;*/
/*%LET RPTLIB = %SYSGET(reportdir);*/
/*%LET STOPME = ABORT ABEND 99;*/
/*==============================================================================*/
%LET RPTLIB = T:\SAS; *COMMENT FOR PRODUCTION;
FILENAME REPORT2 "&RPTLIB/ULWO02.LWO02R2";
FILENAME REPORT11 "&RPTLIB/ULWO02.LWO02R11";
FILENAME REPORT52 "&RPTLIB/ULWO02.LWO02R52";
FILENAME REPORT75 "&RPTLIB/ULWO02.LWO02R75";
FILENAME REPORT90 "&RPTLIB/ULWO02.LWO02R90";
%MACRO PRNTO(RPNO);
PROC PRINTTO PRINT=REPORT&RPNO NEW;
RUN;
%MEND PRNTO;

/************************************************************************************
************************ VARIABLE AND DATASET INITIALIZATION ************************
*************************************************************************************/
%LET NELNET = '829769','826717','830248','999775';
%LET SLMA = '888885';
%LET INHOUSE = '828476';
OPTIONS SYMBOLGEN;
DATA _NULL_;
	CALL SYMPUT('EOM4',"'"||PUT(INTNX('MONTH',TODAY(),-4,'end'), DATE9.)||"'D");
	CALL SYMPUT('EOM5',"'"||PUT(INTNX('MONTH',TODAY(),-5,'end'), DATE9.)||"'D");
	CALL SYMPUT('RUNDATE',PUT(INTNX('DAY',TODAY(),0,'beginning'), MMDDYY10.));
RUN;
/*===COMMENT <BLOCK2> FOR PRODUCTION=========================================*/
%LET STOPME = ;
FILENAME REPORT2 'T:\SAS\ULWO02.LWO02R2';
LIBNAME  WORKLOCL  REMOTE  SERVER=CYPRUS  SLIBREF=WORK  ;
RSUBMIT;
/************************************************************************************
* GET LOAN SALE IDs	AND LIST OF SCHOOL IDs
*************************************************************************************/
PROC SQL;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE SALEIDS AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT IF_LON_SLE AS SALEID
	,IF_SLL_OWN
	,IF_BUY_OWN
	,ID_LON_SLE
	,IF_BUY_BND_ISS
	,ID_SEL_NXT_PLR
FROM OLWHRM1.OW30_LON_SLE_CTL
WHERE IC_LON_SLE_STA = 'O' /*OPEN LOAN SALES*/
	AND IC_SEL_CRI_USR_APV = 'A' /*USER APPROVED SALES*/
	AND IC_LON_SLE_TYP IN ('S','T') /*DECONVERSION SALE OR ON-SYSTEM TRANSFER*/
	AND IC_LON_SLE_SUB_TYP NOT IN ('E','P') /*EXCLUDE PUT AND PART SALES*/
	AND IC_LON_SLE_SEL_TYP = 'T' /*TRIGGER SALE*/
ORDER BY IF_LON_SLE
);

CREATE TABLE SD10 AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT IF_DOE_SCL
FROM OLWHRM1.SC10_SCH_DMO
FOR READ ONLY WITH UR
);

CREATE TABLE LR10 AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT IF_DOE_LDR
	,IM_LDR_SHO
FROM OLWHRM1.LR10_LDR_DMO
FOR READ ONLY WITH UR
);
DISCONNECT FROM DB2;
/*===COMMENT <BLOCK3A> FOR PRODUCTION=========================================*/
ENDRSUBMIT;
DATA SALEIDS;
	SET WORKLOCL.SALEIDS;
RUN;
DATA SD10;
	SET WORKLOCL.SD10;
RUN;
DATA LR10;
	SET WORKLOCL.LR10;
RUN;
/***************************************************************************
* PRODUCTION DIRECTORY PATHS
****************************************************************************/
/*LIBNAME OLRPLD V8 '/sas/whse/olrp_lookup_directory';*/
/*FILENAME SALEFILE "/sas/whse/olrp_lookup_directory/utlwo2_1.txt";*/
/*FILENAME SLCRIT2 "/sas/whse/olrp_lookup_directory/utlwo2_2.txt";*/
/*FILENAME SLCRIT3 "/sas/whse/olrp_lookup_directory/utlwo2_3.txt";*/
/******************************************************************************************
* TESTING DIRECTORY PATHS : TO RUN THIS JOB LOCALLY FOR PRODUCTION OUTPUT THESE FILES MUST 
* BE MOVED TO A LOCAL DIRECTORY FROM X:\PADD\Compass\Loan_Sales\Working_Files\Cyprus
*******************************************************************************************/
LIBNAME OLRPLD V8 'X:\PADU\SAS\devLnSale';
FILENAME SALEFILE "X:\PADD\Compass\Test\Loan_Sales\Working_Files\Cyprus\utlwo2_1.txt";
FILENAME SLCRIT2 "X:\PADD\Compass\Test\Loan_Sales\Working_Files\Cyprus\utlwo2_2.txt";
FILENAME SLCRIT3 "X:\PADD\Compass\Test\Loan_Sales\Working_Files\Cyprus\utlwo2_3.txt";
/************************************************************************************/
/**********READ SALE FLAT FILE FOR SALES SCHEDULED FOR TODAY AND THEIR TYPE**********/
/************************************************************************************/
DATA SLIST;
TODAY = TODAY();
INFILE SALEFILE DLM="," DSD MISSOVER;
INFORMAT P1DATE P2DATE P3DATE P4DATE P5DATE SPDATE PLDATE FDATE MMDDYY8. 
	SALEMAX 13.2 EXCMAX INCINT INCLTE $1. REP_SALE $25.;
FORMAT TODAY P1DATE P2DATE P3DATE P4DATE P5DATE SPDATE PLDATE FDATE MMDDYY10. 
	SALEMAX 13.2 EXCMAX INCINT INCLTE $1. REP_SALE $25.;
INPUT SALEID $ SELLID $ BUYID $ P1DATE P2DATE P3DATE P4DATE P5DATE SPDATE PLDATE FDATE 
	SALEMAX EXCMAX $ INCINT $ INCLTE $ REP_SALE $;
IF TODAY = FDATE THEN 
	TYPE = 'F';
ELSE IF TODAY = SPDATE THEN 
	TYPE = 'S';
ELSE IF TODAY = PLDATE THEN 
	TYPE = 'L';
ELSE IF TODAY = P1DATE OR 
	TODAY = P2DATE OR 
	TODAY = P3DATE OR 
	TODAY = P4DATE OR 
	TODAY = P5DATE THEN 
		TYPE = 'P';
ELSE 
	TYPE = ' ';
IF TYPE NE ' ' THEN 
	OUTPUT;
RUN;

/*IF NO SALES ARE SCHEDULED FOR TODAY VIA SCRIPT, END THE JOB*/
%MACRO ABORTIF;
%LET DSID=%SYSFUNC(OPEN(WORK.SLIST));
%LET HASOBS=%SYSFUNC(ATTRN(&DSID,ANY));
%LET RC=%SYSFUNC(CLOSE(&DSID));
%IF &HASOBS=0 %THEN
	%DO;
		/*IF ANY SYSTEM SALES ARE SCHEDULED TODAY, CREATE TRIGGER FILE WITH ONLY THEIR SALEIDS */
		DATA SALE_TMP;
			SET SALEIDS;
			WHERE ID_SEL_NXT_PLR = DATE()
			OR ID_LON_SLE = DATE();
		RUN;			
		%LET DSID=%SYSFUNC(OPEN(WORK.SALE_TMP));
		%LET HASOBS=%SYSFUNC(ATTRN(&DSID,ANY));
		%LET RC=%SYSFUNC(CLOSE(&DSID));
		%IF &HASOBS=0 %THEN
			%DO;
			DATA _NULL_;
				FILE REPORT2  LRECL=7;
				PUT 'NOSALES';
			RUN;
			%END;
		/*IF NO SYSTEM SALES SCHEDULED TODAY, CREATE TRIGGER FILE WITH 'NOSALES'*/
		/*NOTE:  THIS FILE IS CREATED ON CYPRUS EVEN IF THIS JOB IS RUN AD HOC*/
		%ELSE %DO;
			DATA _NULL_;
				SET SALE_TMP;
				FILE REPORT2  LRECL=7;
				PUT SALEID $ ;
			RUN;
			%END;
		/*END JOB AND PRINT MESSAGE TO LOG*/
		DATA _NULL_;
			PUT 37*'*';
            PUT "NO LOAN SALES SCHEDULED FOR &SYSDATE9.";
			PUT 37*'*';
			&STOPME; /*ABORT THE JOB IF RUNNING IN PRODUCTION*/
        RUN;
    %END;
%MEND ABORTIF;
%ABORTIF;

/*COUNT THE NUMBER OF SALES TO PROCESS INTO THE MACRO VAR SALE_CT*/
DATA _NULL_;
SET SLIST;
CALL SYMPUT ('SALE_CT',TRIM(_N_));
RUN;

/*CREATE LIST OF SELLING LENDERS*/
PROC SORT DATA=SLIST  OUT=LDRS (KEEP=SELLID) NODUPKEY;
BY SELLID;
RUN;
DATA _NULL_;
LENGTH LIST $200;
SET LDRS END=LAST;
RETAIN LIST;
IF _N_=1 THEN LIST = "'"||TRIM(SELLID)||"'";
ELSE LIST = TRIM(LIST)||",'"||TRIM(SELLID)||"'";
IF LAST;
CALL SYMPUT ('LDR_LST',LIST);
RUN;

PROC SORT DATA=SLIST;
BY SALEID BUYID;
RUN;

/*===COMMENT <BLOCK3B> FOR PRODUCTION=========================================*/
%SYSLPUT LDR_LST = &LDR_LST;
RSUBMIT;
/***********************************************************************************
*******************SQL PRIMARY DATA SELECTION***************************************
************************************************************************************
* MACRO FOR AGGREGATING THE MAIN DATASET FROM MANY SUBQUERIES - DONE FOR MAINFRAME
* SORT MEMORY ALLOCATION EFFECIENCY
*************************************************************************************/
%MACRO CREATE_MAIN(DS1,DS2,BYVALS);
PROC SORT DATA=&DS1;
	BY &BYVALS;
RUN;
PROC SORT DATA=&DS2;
	BY &BYVALS;
RUN;
DATA &DS1;
	MERGE &DS1 (IN=A) &DS2 (IN=B);
	BY &BYVALS;
	IF A;
RUN;
%MEND;

PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE MAIN AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT A.IF_DOE_LDR
	,A.BF_SSN
	,A.LF_LON_ALT
	,'0'||CHAR(A.LN_LON_ALT_SEQ) AS LN_LON_ALT_SEQ
	,A.LN_SEQ
	,G.AN_SEQ
	,G.AF_APL_ID
	,A.LC_STA_LON10
	,A.LA_CUR_PRI
	,COALESCE(A.LA_NSI_OTS,0) AS LA_NSI_OTS
	,COALESCE(A.LA_LTE_FEE_OTS,0) AS LA_LTE_FEE_OTS
	,A.LD_NSI_ACR_THU
	,A.IC_LON_PGM
	,A.IF_GTR
	,A.LD_LON_GTR
	,A.LD_TRM_END
	,A.LF_LON_CUR_OWN
	,G.MIN_ACT_DSB
	,G.MAX_ACT_DSB
	,DW01.WC_DW_LON_STA
	,A.LA_LON_AMT_GTR
	,DW01.WA_TOT_BRI_OTS
	,A.LD_PNT_SIG
	,A.LD_TRM_BEG
	,A.LC_ACA_GDE_LEV
	,A.LF_DOE_SCL_ORG
	,A.LF_STU_SSN
	,A.LI_ELG_SPA
	,A.LD_LON_1_DSB
	,BRSUM.TOT_PRI_BR
	,DK01.WD_DOC_SIG AS AD_SIG_BR
	,LN15B.FUL_DISB_DT 
	,CASE 
		WHEN A.IF_TIR_PCE = '' THEN 'Y'
		ELSE 'N'
	 END AS IF_TIR_PCE
	,CASE
		WHEN A.LD_LON_1_DSB >= '07/01/2008' THEN 'Y'
		ELSE 'N'
	 END AS JUL1_IND
	,CASE
		WHEN A.LC_ACA_GDE_LEV = 'A' THEN 10
		WHEN A.LC_ACA_GDE_LEV = 'B' THEN 11
		WHEN A.LC_ACA_GDE_LEV = 'C' THEN 12
		WHEN A.LC_ACA_GDE_LEV = 'D' THEN 13
		ELSE INT(A.LC_ACA_GDE_LEV)
	 END AS LI_ACA_GDE_LEV
	,LNEC.LF_ECA_PGM_YR
FROM  OLWHRM1.LN10_LON A 
/*GET LOAN STATUS*/
INNER JOIN OLWHRM1.DW01_DW_CLC_CLU DW01
	ON A.BF_SSN = DW01.BF_SSN
	AND A.LN_SEQ = DW01.LN_SEQ
/*GET LAST ACTUAL DISBURSEMENT DATE FOR LATE DISB CHECK*/
INNER JOIN
	(SELECT BF_SSN
		,LN_SEQ
		,AN_SEQ
		,AF_APL_ID
		,MIN(LD_DSB) AS MIN_ACT_DSB
		,MAX(LD_DSB) AS MAX_ACT_DSB
	FROM OLWHRM1.LN15_DSB
	WHERE LC_STA_LON15 IN ('1','3')
	AND LC_DSB_TYP = '2'
	AND COALESCE(LA_DSB_CAN,0) <> LA_DSB
	GROUP BY BF_SSN, LN_SEQ, AN_SEQ, AF_APL_ID
	) G
	ON A.BF_SSN = G.BF_SSN
	AND A.LN_SEQ = G.LN_SEQ
/*GET BORROWER TOTAL PRINCIPAL BALANCE*/
INNER JOIN
	(SELECT BF_SSN
	,SUM(LA_CUR_PRI) AS TOT_PRI_BR
	FROM OLWHRM1.LN10_LON 
	GROUP BY BF_SSN
	)BRSUM
	ON A.BF_SSN = BRSUM.BF_SSN
/*GET BORROWER SIGN DATE FROM NEW LO DK01 TABLE*/
LEFT OUTER JOIN OLWHRM1.DK01_SIGNATURES DK01
	ON G.BF_SSN = DK01.WF_PRS_IST_DOC_SIG
	AND G.AF_APL_ID = DK01.WF_DOC_SIG
	AND DK01.WC_DOC_SIG_TYP = 'BR' /*BORROWER*/
	AND DK01.WC_STA_DOC_SIG = '01' /*ACTIVE*/
LEFT OUTER JOIN 
	(SELECT BF_SSN
		,LN_SEQ
		,MAX(LD_DSB) AS FUL_DISB_DT
	 FROM OLWHRM1.LN15_DSB 
	 WHERE LC_DSB_TYP = '2'
	 AND LA_DSB <> COALESCE(LA_DSB_CAN,0)
	 GROUP BY BF_SSN 
		,LN_SEQ
	 ) LN15B
	ON A.BF_SSN = LN15B.BF_SSN 
	AND A.LN_SEQ = LN15B.LN_SEQ
LEFT OUTER JOIN OLWHRM1.LNEC_LON_ECA LNEC
	ON A.BF_SSN = LNEC.BF_SSN 
	AND A.LN_SEQ = LNEC.LN_SEQ
	AND LNEC.LN_ECA_SEQ = 1
WHERE A.LF_LON_CUR_OWN IN (&LDR_LST)
	AND A.LI_CON_PAY_STP_PUR != 'Y'
	AND A.LC_STA_LON10 = 'R'
);

CREATE TABLE MAIN_NEXT AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT 
	A.BF_SSN
	,A.LN_SEQ
	,LN72.LR_ITR
FROM  OLWHRM1.LN10_LON A 
/*GET CURRENT INTEREST RATE*/
INNER JOIN 
	(SELECT X.BF_SSN
	,X.LN_SEQ
	,X.LR_ITR
	FROM  OLWHRM1.LN72_INT_RTE_HST X
	WHERE X.LC_STA_LON72 = 'A'
	AND X.LD_ITR_EFF_BEG <= CURRENT DATE
	AND X.LD_ITR_EFF_END >= CURRENT DATE
	)LN72
	ON A.BF_SSN = LN72.BF_SSN
	AND A.LN_SEQ = LN72.LN_SEQ
WHERE A.LF_LON_CUR_OWN IN (&LDR_LST)
);
DISCONNECT FROM DB2;
%CREATE_MAIN (MAIN,MAIN_NEXT,BF_SSN LN_SEQ);

PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE MAIN_NEXT AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT A.BF_SSN
	,A.LN_SEQ
	,AY10.LD_ATY_REQ_RCV	
FROM OLWHRM1.LN10_LON A 
INNER JOIN OLWHRM1.LN85_LON_ATY LN85
	ON A.BF_SSN = LN85.BF_SSN
	AND A.LN_SEQ = LN85.LN_SEQ
INNER JOIN 
	(SELECT BF_SSN
	 	,LN_ATY_SEQ
		,LD_ATY_REQ_RCV
	 FROM OLWHRM1.AY10_BR_LON_ATY 
	 WHERE PF_REQ_ACT = 'ADJ33'
	 AND PF_RSP_ACT <> 'CANCL'
	 AND LC_STA_ACTY10 = 'A'
	 ) AY10
	ON LN85.BF_SSN = AY10.BF_SSN
	AND LN85.LN_ATY_SEQ = AY10.LN_ATY_SEQ
WHERE A.LF_LON_CUR_OWN IN (&LDR_LST)
);
DISCONNECT FROM DB2;
%CREATE_MAIN (MAIN,MAIN_NEXT,BF_SSN LN_SEQ);

PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE MAIN_NEXT AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT 
	A.BF_SSN
	,A.LN_SEQ
	,C.LD_SCL_SPR
	,C.LC_REA_SCL_SPR
	,C.LD_NTF_SCL_SPR
	,C.REPAY_BEG_DT
	,C.LF_DOE_SCL_ENR_CUR
FROM  OLWHRM1.LN10_LON A 
/*GET SEPARATION DATE & REPAY BEGIN DATE INFO*/
INNER JOIN 
	(SELECT C.BF_SSN
		,C.LN_SEQ
		,D.LD_SCL_SPR
		,D.LC_REA_SCL_SPR
		,D.LD_NTF_SCL_SPR
		,DATE(DAYS(C.LD_END_GRC_PRD_ALI) + 1) AS REPAY_BEG_DT
		,D.LF_DOE_SCL_ENR_CUR
	FROM OLWHRM1.LN13_LON_STU_OSD C
	INNER JOIN OLWHRM1.SD10_STU_SPR D
	ON C.LF_STU_SSN = D.LF_STU_SSN
	AND C.LN_STU_SPR_SEQ = D.LN_STU_SPR_SEQ
	AND C.LC_STA_LON13 = 'A'
	AND D.LC_STA_STU10 = 'A'
	)C
	ON A.BF_SSN = C.BF_SSN
	AND A.LN_SEQ = C.LN_SEQ
WHERE A.LF_LON_CUR_OWN IN (&LDR_LST)
);
DISCONNECT FROM DB2;
%CREATE_MAIN (MAIN,MAIN_NEXT,BF_SSN LN_SEQ);

PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE MAIN_NEXT AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT 
	A.BF_SSN
	,A.LN_SEQ
	,LN20.LF_EDS
	,LN20.LC_EDS_TYP
	,LN20.LC_REL_TO_BR
FROM  OLWHRM1.LN10_LON A 
/*GATHER ENDORSER INFO - ONE ENDORSER PER LOAN*/
INNER JOIN OLWHRM1.LN20_EDS LN20
	ON A.BF_SSN = LN20.BF_SSN
	AND A.LN_SEQ = LN20.LN_SEQ
	AND LN20.LC_STA_LON20 = 'A'
WHERE A.LF_LON_CUR_OWN = '811698'
);
DISCONNECT FROM DB2;
%CREATE_MAIN (MAIN,MAIN_NEXT,BF_SSN LN_SEQ);

PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE MAIN_NEXT AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT 
	A.BF_SSN
	,A.LN_SEQ
	,LN33.LD_CU_END
	,LN33.LC_CU_REA_END
FROM  OLWHRM1.LN10_LON A 
/*GET ANY CURE INFO FOR THE LOAN*/
INNER JOIN OLWHRM1.LN33_LON_CU_INF LN33
	ON A.BF_SSN = LN33.BF_SSN
	AND A.LN_SEQ = LN33.LN_SEQ
	AND LN33.LC_CU_CND IN ('R','S')
	AND LN33.LD_CU_END IS NOT NULL
	AND LN33.LC_CU_REA_END IN ('C','F','N')
WHERE A.LF_LON_CUR_OWN IN (&LDR_LST)
);
DISCONNECT FROM DB2;
%CREATE_MAIN (MAIN,MAIN_NEXT,BF_SSN LN_SEQ);

PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE MAIN_NEXT AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT 
	A.BF_SSN
	,A.LN_SEQ
	,PD24.DD_BKR_DCH_RCV
	,NON.NON_WAMU
	,BRUSAF.IND_USAF
FROM  OLWHRM1.LN10_LON A 
/*SET INDICATOR IF BORROWER HAS OPEN, RELEASED USAF LOANS*/
LEFT OUTER JOIN
	(SELECT DISTINCT BF_SSN
	,'Y' AS IND_USAF
	FROM OLWHRM1.LN10_LON
	WHERE IF_GTR = '000800'
	AND LA_CUR_PRI > 0
	AND LC_STA_LON10 = 'R'
	)BRUSAF
	ON A.BF_SSN = BRUSAF.BF_SSN
/*GET BANKRUPTCY DISCHARGE INFO*/
LEFT OUTER JOIN
	(SELECT DF_PRS_ID
		,MAX(DD_BKR_DCH_RCV) AS DD_BKR_DCH_RCV
	FROM  OLWHRM1.PD24_PRS_BKR
	WHERE DC_BKR_STA = '05'
	GROUP BY DF_PRS_ID) PD24
	ON A.BF_SSN = PD24.DF_PRS_ID
/*SET INDICATOR IF BWR HAS OPEN, RELEASED LOAN AT A LENDER OTHER THAN WAM*/
LEFT OUTER JOIN
	(SELECT DISTINCT X.BF_SSN
	,'Y' AS NON_WAMU
	FROM OLWHRM1.LN10_LON X
	WHERE X.LC_STA_LON10 = 'R'
	AND X.LA_CUR_PRI > 0
	AND X.LF_LON_CUR_OWN NOT IN ('829505')
	)NON
	ON A.BF_SSN = NON.BF_SSN
WHERE A.LF_LON_CUR_OWN IN (&LDR_LST)
);
DISCONNECT FROM DB2;
%CREATE_MAIN (MAIN,MAIN_NEXT,BF_SSN LN_SEQ);

PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE MAIN_NEXT AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT 
	A.BF_SSN
	,A.LN_SEQ
	,F.FUL_DSB_IND
FROM  OLWHRM1.LN10_LON A 
/*SET INDICATOR FOR FULLY DISBURSED LOANS*/
INNER JOIN 
	(SELECT DISTINCT X.BF_SSN
		,X.LN_SEQ
		,'Y' AS FUL_DSB_IND
	FROM OLWHRM1.LN15_DSB X
	WHERE NOT EXISTS
		(SELECT *
		FROM OLWHRM1.LN15_DSB Y
		WHERE X.BF_SSN = Y.BF_SSN
		AND X.LN_SEQ = Y.LN_SEQ
		AND Y.LC_STA_LON15 IN ('1','3')
		AND Y.LC_DSB_TYP = '1'
		AND (Y.LA_DSB_CAN IS NULL
		    OR Y.LA_DSB_CAN <> Y.LA_DSB)
		)
	) F
	ON A.BF_SSN = F.BF_SSN
	AND A.LN_SEQ = F.LN_SEQ
WHERE A.LF_LON_CUR_OWN IN (&LDR_LST)
);
DISCONNECT FROM DB2;
%CREATE_MAIN (MAIN,MAIN_NEXT,BF_SSN LN_SEQ);

PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE MAIN_NEXT AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT 
	A.BF_SSN
	,A.LN_SEQ
	,E.MUL_SEP_IND
FROM  OLWHRM1.LN10_LON A 
/*COUNT NUMBER OF SEPARATION DATES AT BWR LEVEL*/
INNER JOIN 
	(SELECT X.BF_SSN
		,COUNT(DISTINCT Y.LD_SCL_SPR) AS MUL_SEP_IND
	FROM OLWHRM1.LN13_LON_STU_OSD X
	INNER JOIN OLWHRM1.SD10_STU_SPR Y
		ON X.LF_STU_SSN = Y.LF_STU_SSN
		AND X.LN_STU_SPR_SEQ = Y.LN_STU_SPR_SEQ
		AND Y.LC_STA_STU10 = 'A'
		AND X.LC_STA_LON13 = 'A'
	INNER JOIN OLWHRM1.LN10_LON Z
		ON X.BF_SSN = Z.BF_SSN
		AND X.LN_SEQ = Z.LN_SEQ
		AND Z.LC_STA_LON10 = 'R'
		AND Z.LA_CUR_PRI > 0
		AND Z.LF_LON_CUR_OWN <> '828476'
	GROUP BY X.BF_SSN
	) E
	ON A.BF_SSN = E.BF_SSN
WHERE A.LF_LON_CUR_OWN IN (&LDR_LST)
);
DISCONNECT FROM DB2;
%CREATE_MAIN (MAIN,MAIN_NEXT,BF_SSN LN_SEQ);

/*CLEAN UP RESOURCES USED BY THE WORKING TABLE MAIN_NEXT*/
PROC DATASETS;
	DELETE MAIN_NEXT;
QUIT;

/*GET ONELINK DATA*/
PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE ONELINK AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT A.BF_SSN
	,A.LN_SEQ
	,GA10.AF_CUR_LON_SER_AGY
	,GA10.AF_CUR_LON_OPS_LDR
	,CASE
		WHEN GA10.AF_BS_MPN_APL_ID IS NOT NULL AND GA10.AD_EXP IS NOT NULL THEN 'M'
		WHEN GA10.AF_BS_MPN_APL_ID IS NOT NULL AND GA10.AD_EXP IS NULL THEN 'A'
		WHEN GA10.AF_BS_MPN_APL_ID IS NULL THEN 'S'
	 END AS AC_MN_SRL_LON
FROM  OLWHRM1.LN10_LON A 
LEFT JOIN (
	SELECT B.AF_APL_ID
		,INTEGER(B.AF_APL_ID_SFX) AS AF_APL_ID_SFX
		,B.AF_CUR_LON_SER_AGY
		,B.AF_CUR_LON_OPS_LDR
		,C.AF_BS_MPN_APL_ID
		,C.AD_EXP
	FROM OLWHRM1.GA01_APP A
	INNER JOIN OLWHRM1.GA10_LON_APP B
		ON A.AF_APL_ID = B.AF_APL_ID
	LEFT OUTER JOIN OLWHRM1.GA40_BS_MPN_CTL C
		ON A.AF_BS_MPN_APL_ID = C.AF_BS_MPN_APL_ID
		AND C.AC_MPN_STA = 'A'
	) GA10
	ON A.LF_LON_ALT = GA10.AF_APL_ID
	AND A.LN_LON_ALT_SEQ = GA10.AF_APL_ID_SFX  
WHERE A.LF_LON_CUR_OWN IN (&LDR_LST)
);

/*GET DATA FOR PLUS LOANS WITH CANCELED DISBURSEMENTS*/
CREATE TABLE PLSCAN AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT LN15.BF_SSN
	,LN15.LN_SEQ
	,LN15.LD_DSB AS PLS_CAN_LD_DSB
	,LN15.LA_DSB AS PLS_CAN_LA_DSB
	,ARC.PLS_CAN_EFF_DT
FROM OLWHRM1.LN15_DSB LN15
LEFT OUTER JOIN 
	/*GET PLUS CANCELLATION EFFECTIVE DATE FROM ARC, IF ANY*/
	(SELECT LN85.BF_SSN
	,LN85.LN_SEQ
	,SUBSTR(AY20.LX_ATY,1,8) AS PLS_CAN_EFF_DT
	FROM OLWHRM1.LN85_LON_ATY LN85
	INNER JOIN OLWHRM1.AY10_BR_LON_ATY AY10
		ON LN85.BF_SSN = AY10.BF_SSN
		AND LN85.LN_ATY_SEQ = AY10.LN_ATY_SEQ
	INNER JOIN OLWHRM1.AY20_ATY_TXT AY20
		ON AY10.BF_SSN = AY20.BF_SSN
		AND AY10.LN_ATY_SEQ = AY20.LN_ATY_SEQ
	WHERE AY10.LC_STA_ACTY10 = 'A'
	AND AY10.PF_REQ_ACT = 'RPLCA'
	)ARC
	ON LN15.BF_SSN = ARC.BF_SSN
	AND LN15.LN_SEQ = ARC.LN_SEQ
WHERE LN15.LC_STA_LON15 IN ('1','3') /*ACTIVE ROW*/
AND COALESCE(LN15.LA_DSB_CAN,0) = LN15.LA_DSB /*FULLY CANCELED*/
AND LN15.LD_DSB =
	(SELECT MAX(Y.LD_DSB)
	FROM OLWHRM1.LN15_DSB Y
	WHERE LN15.BF_SSN = Y.BF_SSN
	AND LN15.LN_SEQ = Y.LN_SEQ
	AND Y.LC_STA_LON15 IN ('1','3') /*ACTIVE ROW*/)
);

/*GET PDEM INFO FOR BWR, STU, EDS*/
CREATE TABLE PDEM AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT B.DF_PRS_ID
,CASE PD10.DM_PRS_LST_SFX
	WHEN ' ' 
	THEN RTRIM(PD10.DM_PRS_LST)||', '||RTRIM(PD10.DM_PRS_1)||' '||PD10.DM_PRS_MID 
	ELSE RTRIM(PD10.DM_PRS_LST)||' '||PD10.DM_PRS_LST_SFX||', '||RTRIM(PD10.DM_PRS_1)||' '||PD10.DM_PRS_MID
	END AS NAME
,PD10.DD_BRT
,B.DC_ADR
,B.DI_VLD_ADR
,B.DX_STR_ADR_1
,B.DX_STR_ADR_2
,B.DX_STR_ADR_3
,B.DM_CT
,B.DC_DOM_ST
,B.DF_ZIP_CDE
,B.DM_FGN_CNY
,B.DM_FGN_ST
,'('||C.DN_DOM_PHN_ARA||') '||C.DN_DOM_PHN_XCH||'-'||C.DN_DOM_PHN_LCL AS H_PHN
,C.DI_PHN_VLD AS H_PHN_VLD
,'('||D.DN_DOM_PHN_ARA||') '||D.DN_DOM_PHN_XCH||'-'||D.DN_DOM_PHN_LCL AS W_PHN
,'('||E.DN_DOM_PHN_ARA||') '||E.DN_DOM_PHN_XCH||'-'||E.DN_DOM_PHN_LCL AS A_PHN

FROM OLWHRM1.PD10_PRS_NME PD10
INNER JOIN OLWHRM1.PD30_PRS_ADR B
	ON PD10.DF_PRS_ID = B.DF_PRS_ID
	AND B.DC_ADR = 'L'
INNER JOIN OLWHRM1.PD42_PRS_PHN C
	ON B.DF_PRS_ID = C.DF_PRS_ID
	AND C.DC_PHN = 'H'
LEFT OUTER JOIN OLWHRM1.PD42_PRS_PHN D
	ON B.DF_PRS_ID = D.DF_PRS_ID
	AND D.DC_PHN = 'W'
LEFT OUTER JOIN OLWHRM1.PD42_PRS_PHN E
	ON B.DF_PRS_ID = E.DF_PRS_ID
	AND E.DC_PHN = 'A'
);


/*GATHER DISBURSEMENT INFO*/
CREATE TABLE DISB AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT D1.BF_SSN
,A.LN_SEQ
,D1.LD_DSB AS LD_DSB1
,D1.LA_DSB AS LA_DSB1
,D1.LD_DSB_CAN AS LD_DSB_CAN1
,D1.LA_DSB_CAN AS LA_DSB_CAN1

,D2.LD_DSB AS LD_DSB2
,D2.LA_DSB AS LA_DSB2
,D2.LD_DSB_CAN AS LD_DSB_CAN2
,D2.LA_DSB_CAN AS LA_DSB_CAN2

,D3.LD_DSB AS LD_DSB3
,D3.LA_DSB AS LA_DSB3
,D3.LD_DSB_CAN AS LD_DSB_CAN3
,D3.LA_DSB_CAN AS LA_DSB_CAN3

,D4.LD_DSB AS LD_DSB4
,D4.LA_DSB AS LA_DSB4
,D4.LD_DSB_CAN AS LD_DSB_CAN4
,D4.LA_DSB_CAN AS LA_DSB_CAN4

,D5.LD_DSB AS LD_DSB5
,D5.LA_DSB AS LA_DSB5
,D5.LD_DSB_CAN AS LD_DSB_CAN5
,D5.LA_DSB_CAN AS LA_DSB_CAN5

,D6.LD_DSB AS LD_DSB6
,D6.LA_DSB AS LA_DSB6
,D6.LD_DSB_CAN AS LD_DSB_CAN6
,D6.LA_DSB_CAN AS LA_DSB_CAN6

FROM OLWHRM1.LN10_LON A 
INNER JOIN OLWHRM1.LN15_DSB D1
	ON A.BF_SSN = D1.BF_SSN
	AND A.LN_SEQ = D1.LN_SEQ
	AND D1.LC_STA_LON15 IN ('1','3')
	AND D1.LN_LON_DSB_SEQ = 1
LEFT OUTER JOIN OLWHRM1.LN15_DSB D2
	ON D1.BF_SSN = D2.BF_SSN
	AND D1.LN_SEQ = D2.LN_SEQ
	AND D2.LC_STA_LON15 IN ('1','3')
	AND D2.LN_LON_DSB_SEQ = 2
LEFT OUTER JOIN OLWHRM1.LN15_DSB D3
	ON D1.BF_SSN = D3.BF_SSN
	AND D1.LN_SEQ = D3.LN_SEQ
	AND D3.LC_STA_LON15 IN ('1','3')
	AND D3.LN_LON_DSB_SEQ = 3
LEFT OUTER JOIN OLWHRM1.LN15_DSB D4
	ON D1.BF_SSN = D4.BF_SSN
	AND D1.LN_SEQ = D4.LN_SEQ
	AND D4.LC_STA_LON15 IN ('1','3')
	AND D4.LN_LON_DSB_SEQ = 4
LEFT OUTER JOIN OLWHRM1.LN15_DSB D5
	ON D1.BF_SSN = D5.BF_SSN
	AND D1.LN_SEQ = D5.LN_SEQ
	AND D5.LC_STA_LON15 IN ('1','3')
	AND D5.LN_LON_DSB_SEQ = 5
LEFT OUTER JOIN OLWHRM1.LN15_DSB D6
	ON D1.BF_SSN = D6.BF_SSN
	AND D1.LN_SEQ = D6.LN_SEQ
	AND D6.LC_STA_LON15 IN ('1','3')
	AND D6.LN_LON_DSB_SEQ = 6
/*KEY BANK LOANS ONLY*/
WHERE A.LF_LON_CUR_OWN = '813760UT'
);

DISCONNECT FROM DB2;

/*MERGE THE SUB SELECTS HERE*/
PROC SQL STIMER;
CREATE TABLE LNSALE_MAST AS
SELECT *
FROM MAIN A
LEFT OUTER JOIN ONELINK B
	ON A.BF_SSN = B.BF_SSN
	AND A.LN_SEQ = B.LN_SEQ
LEFT OUTER JOIN PLSCAN C
	ON A.BF_SSN = C.BF_SSN
	AND A.LN_SEQ = C.LN_SEQ
	AND A.IC_LON_PGM = 'PLUS'
LEFT OUTER JOIN DISB G
	ON A.BF_SSN = G.BF_SSN
	AND A.LN_SEQ = G.LN_SEQ
;
QUIT;

PROC SQL STIMER;
CREATE TABLE LNSALE_MAST2 AS
SELECT A.*
,B.*
,C.NAME AS NAME_STU
,C.DD_BRT AS DD_BRT_STU
,C.DC_ADR AS DC_ADR_STU
,C.DI_VLD_ADR AS DI_VLD_ADR_STU
,C.DX_STR_ADR_1 AS DX_STR_ADR_1_STU
,C.DX_STR_ADR_2 AS DX_STR_ADR_2_STU
,C.DX_STR_ADR_3 AS DX_STR_ADR_3_STU
,C.DM_CT AS DM_CT_STU
,C.DC_DOM_ST AS DC_DOM_ST_STU
,C.DF_ZIP_CDE AS DF_ZIP_CDE_STU
,C.DM_FGN_CNY AS DM_FGN_CNY_STU
,C.DM_FGN_ST AS DM_FGN_ST_STU
,C.H_PHN AS H_PHN_STU
,C.H_PHN_VLD AS H_PHN_VLD_STU
,C.W_PHN AS W_PHN_STU
,C.A_PHN AS A_PHN_STU
,D.NAME AS NAME_END
,D.DD_BRT AS DD_BRT_END
,D.DC_ADR AS DC_ADR_END
,D.DI_VLD_ADR AS DI_VLD_ADR_END
,D.DX_STR_ADR_1 AS DX_STR_ADR_1_END
,D.DX_STR_ADR_2 AS DX_STR_ADR_2_END
,D.DX_STR_ADR_3 AS DX_STR_ADR_3_END
,D.DM_CT AS DM_CT_END
,D.DC_DOM_ST AS DC_DOM_ST_END
,D.DF_ZIP_CDE AS DF_ZIP_CDE_END
,D.DM_FGN_CNY AS DM_FGN_CNY_END
,D.DM_FGN_ST AS DM_FGN_ST_END
,D.H_PHN AS H_PHN_END
,D.H_PHN_VLD AS H_PHN_VLD_END
,D.W_PHN AS W_PHN_END
,D.A_PHN AS A_PHN_END
FROM LNSALE_MAST A
INNER JOIN PDEM B
	ON A.BF_SSN = B.DF_PRS_ID
LEFT OUTER JOIN PDEM C
	ON A.LF_STU_SSN = C.DF_PRS_ID
LEFT OUTER JOIN PDEM D
	ON A.LF_EDS = D.DF_PRS_ID
;
QUIT;
/*RENAME DATASETS FOR CONSISTANCY*/
PROC DATASETS;
DELETE LNSALE_MAST;
QUIT;
DATA LNSALE_MAST;
SET LNSALE_MAST2;
RUN;
PROC DATASETS;
DELETE LNSALE_MAST2;
QUIT;
/*===COMMENT <BLOCK4> FOR PRODUCTION=========================================*/
ENDRSUBMIT;
DATA LNSALE_MAST;
	SET WORKLOCL.LNSALE_MAST;
RUN;
/*===========================================================================*/

/*ASSIGN SORT VARS AND ECASLA CATEGORY*/
DATA LNSALE_MAST;
	SET LNSALE_MAST;
	/**** SET UP SORT VARS FOR MAX SALE VALUE PROCESSING ****/
	DO;
		IF IC_LON_PGM IN ('PLUS','PLUSGB') THEN 
			MS_SRT = 1;
		ELSE 
			MS_SRT = 2;
	END;
	/**** ASSIGN ECASLA CATEGORY ****/
	DO;
		IF LD_LON_1_DSB < MDY(7,1,2008) THEN 
			ECASLA_CAT = 'PRE ECASLA';
		ELSE IF LF_ECA_PGM_YR = '0809' THEN 
			ECASLA_CAT = 'ECASLA I';
		ELSE IF LF_ECA_PGM_YR = '0910' THEN
			ECASLA_CAT = 'ECASLA II';
		ELSE 
			ECASLA_CAT = 'NON ECASLA';
	END;
RUN;

PROC SORT DATA=SALEIDS;BY SALEID;RUN;
PROC SORT DATA=SLIST;BY SALEID;RUN;

/*IDENTIFY SALE DATE INCONSISTENCIES WITH SYSTEM SALE DATA*/
DATA SLIST SLERRS;
MERGE SLIST (IN=A) SALEIDS (IN=B);
BY SALEID;
LENGTH SALE_ERR $70.;
IF A = B THEN DO;
	IF (TYPE = 'P' OR TYPE = 'L')
		AND ((ID_SEL_NXT_PLR NE P1DATE
			AND ID_SEL_NXT_PLR NE P2DATE
			AND ID_SEL_NXT_PLR NE PLDATE)
			OR
			ID_SEL_NXT_PLR NE DATE())
		THEN DO;
			SALE_ERR = 'TRIGGER CREATED BUT NO PRELIMINARY SALE SCHEDULED TODAY ON COMPASS';
			OUTPUT SLIST;
			END;
	ELSE IF TYPE = 'F'
		AND ID_LON_SLE NE FDATE
		THEN DO;
			SALE_ERR = 'TRIGGER CREATED BUT NO SCHEDULED FINAL SALE ON COMPASS';
			OUTPUT SLIST;
			END;
	ELSE OUTPUT SLIST;
	END;
IF A AND NOT B THEN DO;
	SALE_ERR = 'TRIGGER CREATED BUT NO MATCHING SALE ID ON COMPASS';
	OUTPUT SLIST;
	END;
IF B AND NOT A 
	AND (ID_SEL_NXT_PLR = TODAY
	OR ID_LON_SLE = TODAY) 
	THEN DO;
		SALE_ERR = 'SALE SCHEDULED ON COMPASS BUT NO TRIGGER CREATED';
		OUTPUT SLERRS;
	END;
RUN;

/************************************************************************************/
/****************************BEGIN CRITERIA PROCESSING*******************************/
/************************************************************************************/

/*IMPORT CRITERIA GROUP DATA*/
DATA WORK.SCRIT2;
INFILE SLCRIT2 DELIMITER = ',' MISSOVER DSD LRECL=32767 ;
INFORMAT SALEID $9. ;
INFORMAT GRP_NO 4. ;
INFORMAT GRP_TYP $3. ;
INFORMAT GRP_DESC $50. ;
FORMAT SALEID $9. ;
FORMAT GRP_NO 4. ;
FORMAT GRP_TYP $3. ;
FORMAT GRP_DESC $50. ;
INPUT
SALEID $
GRP_NO 
GRP_TYP $
GRP_DESC $
;
RUN;

/*IMPORT CRITERIA LIST DATA*/
DATA WORK.SCRIT3;
INFILE SLCRIT3 DELIMITER = ',' MISSOVER DSD LRECL=32767 FIRSTOBS=1 ;
INFORMAT SALEID $9. ;
INFORMAT GRP_NO 4. ;
INFORMAT CRIT_NO $5. ;
INFORMAT CRIT_OPR $4. ;
INFORMAT CRIT_ARG $100. ;
FORMAT SALEID $9. ;
FORMAT GRP_NO 4. ;
FORMAT CRIT_NO $5. ;
FORMAT CRIT_OPR $4. ;
FORMAT CRIT_ARG $100. ;
INPUT
SALEID $
GRP_NO 
CRIT_NO $
CRIT_OPR $
CRIT_ARG $
;
RUN;

/*CREATE MASTER CRITERIA TABLE CRIT*/
PROC SQL;
CREATE TABLE CRIT AS
SELECT A.SALEID
	,B.GRP_NO
	,B.GRP_TYP
	,C.CRIT_NO
	,C.CRIT_OPR
	,C.CRIT_ARG	LENGTH = 10000 FORMAT=$10000.
FROM SLIST A 
INNER JOIN SCRIT2 B
	ON A.SALEID = B.SALEID
INNER JOIN SCRIT3 C
	ON B.SALEID = C.SALEID
	AND B.GRP_NO = C.GRP_NO
;
QUIT;
/*BREAK OUT SPECIFIC CRITERIA NUMBERS FOR CUSTOM PROCESSING*/
DATA CRIT PSPEC;
SET CRIT;
IF CRIT_NO IN ('045','046') THEN 
	OUTPUT PSPEC;
ELSE 
	OUTPUT CRIT;
RUN;
DATA NORM(DROP=N) WILD(DROP=N);
	SET PSPEC;
	LENGTH TSCHL $10;
	DO N=1 TO COUNTW(CRIT_ARG,',');
		IF LENGTH(CRIT_ARG) > 5 THEN DO;
			TSCHL=SUBSTR(SCAN(CRIT_ARG,N),2,8);
			IF INDEX(TSCHL,'@') > 0 THEN DO;
				TSCHL = SUBSTR(TSCHL,1,6);
				OUTPUT WILD;
			END;
			ELSE
				OUTPUT NORM;
		END;
		ELSE
			OUTPUT NORM;
	END;
RUN;
PROC SQL;
	CREATE TABLE SCH_LIST AS 
		SELECT DISTINCT A.SALEID 
			,A.GRP_NO 
			,A.GRP_TYP
			,A.CRIT_NO
			,A.CRIT_OPR
			,B.IF_DOE_SCL AS TSCHL 
		FROM WILD A
		INNER JOIN SD10 B
			ON A.TSCHL = SUBSTR(B.IF_DOE_SCL,1,6)
	UNION
		SELECT SALEID 
			,GRP_NO 
			,GRP_TYP
			,CRIT_NO
			,CRIT_OPR
			,TSCHL
		FROM NORM
	;
QUIT;
PROC SORT DATA=SCH_LIST;
	BY SALEID GRP_NO GRP_TYP CRIT_NO TSCHL;
RUN;
DATA PSPEC (DROP=TSCHL);
	SET SCH_LIST;
	BY SALEID GRP_NO GRP_TYP CRIT_NO;
	LENGTH CRIT_ARG $ 10000;
	RETAIN CRIT_ARG;
	IF FIRST.CRIT_NO THEN 
		CRIT_ARG = TRIM(TSCHL);
	ELSE 
		CRIT_ARG = CATX("','",CRIT_ARG,TSCHL);
	IF LAST.CRIT_NO THEN DO;
		CRIT_ARG = "('"||TRIM(CRIT_ARG)||"')";
		OUTPUT;
	END;
RUN;
/*PUT ALL THE CRITERIA BACK INTO THE CRIT DATA SET*/
DATA CRIT;
	SET CRIT PSPEC;
RUN;
/*SORT AND GET READY TO INTERPRET*/
PROC SORT DATA=CRIT;
	BY SALEID GRP_NO GRP_TYP CRIT_NO;
RUN;
/*INTERPRET IMPORTED CRITERIA*/
DATA CRIT (DROP=CRIT_ARG_DT);
SET CRIT;
LENGTH CRIT_STM $10000;
/*000 - LOAN STATUS*/
IF CRIT_NO = '000' THEN DO;
	IF CRIT_OPR = 'EQ' 
		THEN CRIT_STM = 'WC_DW_LON_STA IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'WC_DW_LON_STA NOT IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'WC_DW_LON_STA IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'WC_DW_LON_STA NOT IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'WC_DW_LON_STA IN '||CRIT_ARG;
END;
/*004 - GUARANTOR CODE*/
ELSE IF CRIT_NO = '004' THEN DO;
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'IF_GTR IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'IF_GTR NOT IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'IF_GTR IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'IF_GTR NOT IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'IF_GTR IN '||CRIT_ARG;
END;
/*005 - LOAN PROGRAM*/
ELSE IF CRIT_NO = '005' THEN DO;
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'IC_LON_PGM IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'IC_LON_PGM NOT IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'IC_LON_PGM IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'IC_LON_PGM NOT IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'IC_LON_PGM IN '||CRIT_ARG;
END;
/*06A - CURRENT PRINCIPAL BALANCE UPPER BOUND*/
ELSE IF CRIT_NO = '06A' THEN DO;
	IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'LA_CUR_PRI < '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'LA_CUR_PRI <= '||CRIT_ARG;
	END;
/*06B - CURRENT PRINCIPAL BALANCE LOWER BOUND*/
ELSE IF CRIT_NO = '06B' THEN DO;
	IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'LA_CUR_PRI > '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'LA_CUR_PRI >= '||CRIT_ARG;
END;
/*007 - FIRST DISBURSEMENT DATE UPPER BOUND*/
ELSE IF CRIT_NO = '007' THEN DO;
	CRIT_ARG = SUBSTR(CRIT_ARG,3,10);
	CRIT_ARG_DT = INPUT(CRIT_ARG,MMDDYY10.);
	IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'LD_LON_1_DSB  < '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'LD_LON_1_DSB  <= '||CRIT_ARG_DT;
END;
/*111 - FIRST DISBURSEMENT DATE LOWER BOUND*/
ELSE IF CRIT_NO = '111' THEN DO;
	CRIT_ARG = SUBSTR(CRIT_ARG,3,10);
	CRIT_ARG_DT = INPUT(CRIT_ARG,MMDDYY10.);
	IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'LD_LON_1_DSB  > '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'LD_LON_1_DSB  >= '||CRIT_ARG_DT;
END;
/*113 - ECASLA CATEGORY*/
ELSE IF CRIT_NO = '113' THEN DO;
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'ECASLA_CAT IN '||CRIT_ARG;
END;
/*021 - SCHOOL SEPARATION DATE*/
ELSE IF CRIT_NO = '021' THEN DO;
	CRIT_ARG = SUBSTR(CRIT_ARG,3,10);
	CRIT_ARG_DT = INPUT(CRIT_ARG,MMDDYY10.);
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'LD_SCL_SPR = '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'LD_SCL_SPR > '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'LD_SCL_SPR >= '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'LD_SCL_SPR < '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'LD_SCL_SPR <= '||CRIT_ARG_DT;
END;
/*023 - FULLY ORIGINATED INDICATOR*/
ELSE IF CRIT_NO = '023' THEN DO;
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'FUL_DSB_IND IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'FUL_DSB_IND NOT IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'FUL_DSB_IND IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'FUL_DSB_IND NOT IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'FUL_DSB_IND IN '||CRIT_ARG;
END;
/*027 - ELAPSED DAYS SINCE FINAL DISBURSEMENT*/
ELSE IF CRIT_NO = '027' THEN DO;
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'MAX_ACT_DSB = &I_FDATE - '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'MAX_ACT_DSB < &I_FDATE - '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'MAX_ACT_DSB <= &I_FDATE - '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'MAX_ACT_DSB > &I_FDATE - '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'MAX_ACT_DSB >= &I_FDATE - '||CRIT_ARG;
END;
/*041 - PRICE TIER*/
ELSE IF CRIT_NO = '041' THEN DO;
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'IF_TIR_PCE IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'NE'
		THEN CRIT_STM = 'IF_TIR_PCE NOT IN '||CRIT_ARG;
END;
/*045 - ORIGINAL SCHOOL CODE*/
ELSE IF CRIT_NO = '045' THEN DO;
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'LF_DOE_SCL_ORG IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'NE'
		THEN CRIT_STM = 'LF_DOE_SCL_ORG NOT IN '||CRIT_ARG;
END;
/*046 - CURRENT SCHOOL CODE*/
ELSE IF CRIT_NO = '046' THEN DO;
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'LF_DOE_SCL_ENR_CUR IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'NE'
		THEN CRIT_STM = 'LF_DOE_SCL_ENR_CUR NOT IN '||CRIT_ARG;
END;
/*047 - MPN TYPE*/
ELSE IF CRIT_NO = '047' THEN DO;
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'AC_MN_SRL_LON IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'NE'
		THEN CRIT_STM = 'AC_MN_SRL_LON NOT IN '||CRIT_ARG;
END;
/*052 - GUARANTY DATE UPPER BOND*/
ELSE IF CRIT_NO = '052' THEN DO;
	CRIT_ARG = SUBSTR(CRIT_ARG,3,10);
	CRIT_ARG_DT = INPUT(CRIT_ARG,MMDDYY10.);
	IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'LD_LON_GTR  < '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'LD_LON_GTR  <= '||CRIT_ARG_DT;
END;
/*112 - GUARANTY DATE LOWER BOND*/
ELSE IF CRIT_NO = '112' THEN DO;
	CRIT_ARG = SUBSTR(CRIT_ARG,3,10);
	CRIT_ARG_DT = INPUT(CRIT_ARG,MMDDYY10.);
	IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'LD_LON_GTR  > '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'LD_LON_GTR  >= '||CRIT_ARG_DT;
END;
/*100 - FULLY DISBURSED DATE*/
ELSE IF CRIT_NO = '100' THEN DO;
	CRIT_ARG = SUBSTR(CRIT_ARG,3,10);
	CRIT_ARG_DT = INPUT(CRIT_ARG,MMDDYY10.);
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'FUL_DISB_DT = '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'FUL_DISB_DT > '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'FUL_DISB_DT >= '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'FUL_DISB_DT < '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'FUL_DISB_DT <= '||CRIT_ARG_DT;
END;
/*103 - LOAN TERM BEGIN UPPER BOND*/
ELSE IF CRIT_NO = '103' THEN DO;
	CRIT_ARG = SUBSTR(CRIT_ARG,3,10);
	CRIT_ARG_DT = INPUT(CRIT_ARG,MMDDYY10.);
	IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'LD_TRM_BEG  < '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'LD_TRM_BEG  <= '||CRIT_ARG_DT;
END;
/*109 - LOAN TERM BEGIN LOWER BOND*/
ELSE IF CRIT_NO = '109' THEN DO;
	CRIT_ARG = SUBSTR(CRIT_ARG,3,10);
	CRIT_ARG_DT = INPUT(CRIT_ARG,MMDDYY10.);
	IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'LD_TRM_BEG  > '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'LD_TRM_BEG  >= '||CRIT_ARG_DT;
END;
/*104 - LOAN TERM END UPPER BOND*/
ELSE IF CRIT_NO = '104' THEN DO;
	CRIT_ARG = SUBSTR(CRIT_ARG,3,10);
	CRIT_ARG_DT = INPUT(CRIT_ARG,MMDDYY10.);
	IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'LD_TRM_END  < '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'LD_TRM_END  <= '||CRIT_ARG_DT;
END;
/*110 - LOAN TERM END LOWER BOND*/
ELSE IF CRIT_NO = '110' THEN DO;
	CRIT_ARG = SUBSTR(CRIT_ARG,3,10);
	CRIT_ARG_DT = INPUT(CRIT_ARG,MMDDYY10.);
	IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'LD_TRM_END  > '||CRIT_ARG_DT;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'LD_TRM_END  >= '||CRIT_ARG_DT;
END;
/*108 - FULLY DISBURSED DATE*/
ELSE IF CRIT_NO = '108' THEN DO;
	IF CRIT_OPR = 'EQ'
		THEN CRIT_STM = 'LI_ACA_GDE_LEV IN '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GT'
		THEN CRIT_STM = 'LI_ACA_GDE_LEV > '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'GE'
		THEN CRIT_STM = 'LI_ACA_GDE_LEV >= '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LT'
		THEN CRIT_STM = 'LI_ACA_GDE_LEV < '||CRIT_ARG;
	ELSE IF CRIT_OPR = 'LE'
		THEN CRIT_STM = 'LI_ACA_GDE_LEV <= '||CRIT_ARG;
END;
RUN;

/************************************************************************************/
/************************BEGIN ITERATIVE SALE PROCESSING*****************************/
/************************************************************************************/

/*INITIALIZE MASTER REPORTING DATASETS*/
DATA SLGE50_MAST;
RUN;
DATA EXCLUDE_MAST;
LENGTH EX_CD $10;
RUN;
%MACRO EXCLUSION;
	PROC APPEND BASE=WORK.EXCLUDE DATA=WORK.EXC;
	RUN;
%MEND EXCLUSION;
%MACRO SALE_ITER(I_ITER);
OPTIONS NOQUOTELENMAX;
/*CREATE MACRO VARIABLES FOR CURRENT SALE*/
DATA _NULL_;
	SET SLIST;
	IF _N_ = &I_ITER THEN DO;
		CALL SYMPUT ('I_SALEID',TRIM(SALEID));
		CALL SYMPUT ('I_SELLID',TRIM(SELLID));
		CALL SYMPUT ('I_BUYID',TRIM(BUYID));
		CALL SYMPUT ('I_TYPE',TRIM(TYPE));
		CALL SYMPUT ('I_FDATE',"'"||PUT(FDATE,DATE9.)||"'D");
		CALL SYMPUT ('I_INC_INT',TRIM(INCINT));
		CALL SYMPUT ('I_INC_LTF',TRIM(INCLTE));
		CALL SYMPUT ('I_XCD_MAX',TRIM(EXCMAX));
		CALL SYMPUT ('I_SALE_MAX',SALEMAX);
		CALL SYMPUT ('I_REP_SALE',TRIM(UPCASE(REP_SALE)));
	END;
RUN;
/************************************************************************************/
/****************************ASSIGN BUYERS TO EACH LOAN******************************/
/************************************************************************************/
DATA LNSALE EXCLUDE;
SALEID = "&I_SALEID";
/*REMOVE LOANS NOT OWNED BY THE SELLER*/
SET LNSALE_MAST (WHERE = (LF_LON_CUR_OWN EQ "&I_SELLID"));
LENGTH EX_CD $10 REP_SALE_TYPE $25;
/*CALCULATE CURRENT INTEREST*/
IF WA_TOT_BRI_OTS NOT IN (.,0)
THEN CUR_INT = 
	ROUND(SUM(((LA_CUR_PRI)*(SUM(LR_ITR,0)/100/365)*(&I_FDATE-DATE())),WA_TOT_BRI_OTS),.01);
ELSE CUR_INT = SUM(LA_NSI_OTS,0);
LENGTH BUYER $ 8.;
BUYER = 'INHOUSE';
REP_SALE_TYPE = "&I_REP_SALE";
RUN;
/************************************************************************************/
/**************************APPLY LOAN LEVEL CRITERIA*********************************/
/************************************************************************************/

/*COUNT THE NUMBER OF GROUPS TO PROCESS AS MACRO VAR &I_GRP_CT*/
PROC SORT DATA=CRIT OUT=I_GRP_CT NODUPKEY;
BY SALEID GRP_NO;
RUN;
DATA _NULL_;
SET I_GRP_CT;
WHERE SALEID = "&I_SALEID";
CALL SYMPUT ('I_GRP_CT',_N_);
RUN;

/*APPLY INCLUSION AND EXCLUSION CRITERIA LISTS*/
/*%MACRO GRP_ITER;*/
%DO N=1 %TO &I_GRP_CT ;
	%PUT GRP_ITER = &N;

	/*CREATE SINGLE CRITERIA STATEMENT FOR CURRENT GROUP*/
	DATA _NULL_;
	SET CRIT END=EOF;
	WHERE SALEID = "&I_SALEID"
	AND GRP_NO = INPUT("&N.",4.);
	LENGTH CRIT_STRING $10000.;
	RETAIN CRIT_STRING;
	IF _N_ = 1 THEN CRIT_STRING = CRIT_STM;
	ELSE CRIT_STRING = TRIM(CRIT_STRING) ||' AND '||CRIT_STM;
	IF EOF THEN DO;
		CALL SYMPUT ('I_CRIT_STRING','('||TRIM(CRIT_STRING)||')');
		CALL SYMPUT ('I_GRP_TYP',TRIM(GRP_TYP));
	END;
	RUN;

	DATA _NULL_;
	PUT "&I_CRIT_STRING";
	PUT "&I_GRP_TYP";
	RUN;

	/*INITIALIZE CRITERIA AGGREGATION VARIABLES*/
	%IF &N = 1 %THEN %DO;
		%LET I_CRIT_INIT = 0;
		%LET I_CRIT_I = &I_CRIT_INIT;
		%LET I_CRIT_E = &I_CRIT_INIT;
	%END;

	/*"OR" THE INCLUSION GROUP CRITERIA TOGETHER*/
	%IF &I_GRP_TYP = I %THEN %DO;
		%LET I_CRIT_1 = &I_CRIT_I;
		%IF %BQUOTE(&I_CRIT_I) = %BQUOTE(&I_CRIT_INIT) 
			%THEN %LET I_CRIT_I = &I_CRIT_STRING;
			%ELSE %LET I_CRIT_I = &I_CRIT_1 OR &I_CRIT_STRING;
	%END;

	/*"OR" THE EXCLUSION GROUP CRITERIA TOGETHER*/
	%IF &I_GRP_TYP = E %THEN %DO;
		%LET I_CRIT_1 = &I_CRIT_E;
		%IF %BQUOTE(&I_CRIT_E) = %BQUOTE(&I_CRIT_INIT) 
			%THEN %LET I_CRIT_E = &I_CRIT_STRING;
			%ELSE %LET I_CRIT_E = &I_CRIT_1 OR &I_CRIT_STRING;
	%END;

	/*APPLY AGGREGATE INCLUSION CRITERIA, IF ANY*/
	%IF &N = &I_GRP_CT AND %BQUOTE(&I_CRIT_I) NE %BQUOTE(&I_CRIT_INIT) %THEN %DO;
/*	%PUT "&I_CRIT_I";*/
	DATA LNSALE;
	SET LNSALE;
	WHERE (&I_CRIT_I);
	RUN;
	%END;

	/*APPLY AGGREGATE EXCLUSION CRITERIA, IF ANY*/
	%IF &N = &I_GRP_CT AND %BQUOTE(&I_CRIT_E) NE %BQUOTE(&I_CRIT_INIT) %THEN %DO;
	DATA LNSALE;
	SET LNSALE;
	WHERE NOT (&I_CRIT_E);
	RUN;
	%END;
%END;
OPTIONS QUOTELENMAX;
/*%MEND GRP_ITER;*/
/*%GRP_ITER;*/

/*APPLY LOAN-LEVEL EDITS & CREATE A REJECTS DATASET*/
DATA SLGE50 EXC;
SET LNSALE;
/*LOAN RECORD STATUS EDIT*/
IF LC_STA_LON10 NE 'R' THEN DO;
	EX_CD = 'REC_STA';
	OUTPUT EXC;
	END;
/*BORROWER PRINCIPAL BALANCE EDIT*/
ELSE IF TOT_PRI_BR < 50 THEN DO;
	EX_CD = 'BWR_PRIN';
	OUTPUT EXC;
	END;
/*BORROWER OTHER USAF LOANS EDIT*/
ELSE IF IND_USAF = 'Y' THEN DO;
	EX_CD = 'BWR_USAF';
	OUTPUT EXC;
	END;
/*REQUESTED FOR REISSUE EDIT*/
ELSE IF LD_ATY_REQ_RCV => (&I_FDATE - 7) THEN DO;
	EX_CD = 'REQ_REIS';
	OUTPUT EXC;
	END;
ELSE OUTPUT SLGE50;
RUN;
%EXCLUSION;
/************************************************
* MAXIMUM SALE AMOUNT PROCESSING IF APPROPRIATE
*************************************************/
%IF &I_SALE_MAX > 0 %THEN %DO;
	PROC SORT DATA=SLGE50;
		BY MS_SRT LD_SCL_SPR BF_SSN LN_SEQ;
	RUN;
	DATA SLGE50;
		SET SLGE50;
		N = _N_;
		DO;
			IF "&I_INC_INT" = 'Y' 
				AND "&I_INC_LTF" = 'Y' THEN DO;
					AMT2U = LA_CUR_PRI + CUR_INT + LA_LTE_FEE_OTS;
			END;
			ELSE IF "&I_INC_INT" = 'Y' 
				AND "&I_INC_LTF" = 'N' THEN DO;
					AMT2U = LA_CUR_PRI + CUR_INT ;
			END;
			IF "&I_INC_INT" = 'N' 
				AND "&I_INC_LTF" = 'Y' THEN DO;
					AMT2U = LA_CUR_PRI + LA_LTE_FEE_OTS;
			END;
			IF "&I_INC_INT" = 'N' 
				AND "&I_INC_LTF" = 'N' THEN DO;
					AMT2U = LA_CUR_PRI;
			END;
		END;
		RTOT+AMT2U;
	RUN;
	PROC SQL NOPRINT;
		CREATE TABLE SALE_COFF AS
		SELECT DISTINCT T2.BF_SSN
			,T2.N
			,T2.RTOT
			,D.N_CNT
		FROM SLGE50 T2 
		INNER JOIN (
			SELECT BF_SSN
				,A.N
			FROM SLGE50 A 
			INNER JOIN (
				SELECT MAX(N) AS N_CEIL
				FROM SLGE50
				WHERE RTOT <= &I_SALE_MAX
				) B
				ON A.N = B.N_CEIL
			) C
			ON 	T2.BF_SSN = C.BF_SSN
		INNER JOIN (
			SELECT BF_SSN
				,COUNT(*) AS N_CNT
			FROM SLGE50
			GROUP BY BF_SSN
			) D
			ON T2.BF_SSN = D.BF_SSN
		ORDER BY T2.N;
	QUIT;
	%LET I_DSID=%SYSFUNC(OPEN(WORK.SALE_COFF));
	%LET I_HASOBS=%SYSFUNC(ATTRN(&I_DSID,ANY));
	%LET I_RC=%SYSFUNC(CLOSE(&I_DSID));
	%IF &I_HASOBS=0 %THEN %DO;
		%LET COFF_CT = 0;
	%END;
	%ELSE %DO;
		DATA _NULL_;
			SET SALE_COFF;
			CALL SYMPUT('COFF_CT',N_CNT);
		RUN;
	%END;
	%PUT &COFF_CT;
	%IF &COFF_CT = 0 %THEN %DO;
		%LET MAX_N = 0;
		%LET N_LST = 0;
	%END;
	%ELSE %DO;
		/*GET THE CLOSEST ROW TO THE MAX SALE VALUE*/
		PROC SQL NOPRINT;
			SELECT MAX(N) 
			INTO: LN
			FROM SALE_COFF
			WHERE RTOT <= &I_SALE_MAX;
		QUIT;
		/*CREATE CUTOFF POINT & A LIST OF LOANS THAT WILL BE INCLUDED ABOVE THE MAX VALUE IF APPLICABLE*/
		DATA _NULL_;
			SET SALE_COFF;
			LENGTH N_LST $ 1000;
			BY BF_SSN;
			IF &COFF_CT GT 1 THEN DO;
				IF N = &LN THEN DO;
					CALL SYMPUT('MAX_N',TRIM(N)); 
				END;
				RETAIN N_LST;
				IF FIRST.BF_SSN THEN DO;
					N_LST = TRIM(N);
				END;
				ELSE DO;
					N_LST = CATX(",",N_LST,N);
					PUT N_LST;
				END;
				IF LAST.BF_SSN THEN DO;
					CALL SYMPUT('N_LST',TRIM(N_LST)); 
				END;
			END;
			ELSE DO;
				CALL SYMPUT('MAX_N',TRIM(&LN+1));
				CALL SYMPUT('N_LST','0');
			END;
		RUN;
	%END;
	%PUT &MAX_N;
	%PUT &N_LST;
	/*MAKE THE CUT*/
	DATA SLGE50 (DROP=RTOT AMT2U N);
		SET SLGE50;
		IF "&I_XCD_MAX" = 'Y' THEN DO;
			IF (N LT &MAX_N) OR (N IN (&N_LST));
		END;
		ELSE DO;
			IF (N LT &MAX_N AND N NOT IN (&N_LST) );
		END;
	RUN;
%END;
/************************************************************************************/
/****************************LOCKDOWN AND LOCKDOWN CHECK*****************************/
/************************************************************************************/
*RSUBMIT;
PROC SORT DATA=SLGE50 NODUPKEY;
BY BF_SSN LN_SEQ;
RUN;

/*IF THE DATASET ISNT THERE, CREATE IT*/
%LET DSNAME=OLRPLD.UTLWO02;
%IF %SYSFUNC(EXIST(&DSNAME))=0 %THEN %DO;
   DATA &DSNAME;
		LENGTH SALEID $7 BF_SSN $ 9 LN_SEQ 8;
   RUN;
%END;

/*EXTRACT LOCKED DOWN DATA FOR THIS SALE FROM LD FILE*/
DATA LDSUB;
	SET OLRPLD.UTLWO02;
	WHERE SALEID = "&I_SALEID";
RUN;

DATA OLRPLD.UTLWO02;
	SET OLRPLD.UTLWO02 (WHERE=(SALEID NE ' '));
	IF SALEID = "&I_SALEID" THEN DELETE;
RUN;

/*%LET I_TYPE = P;OPTIONS SYMBOLGEN;*/

/*PROCESS LOCKDOWN EDITS*/
DATA SLGE50 EXC LDSUB (KEEP = SALEID BF_SSN LN_SEQ);
MERGE SLGE50 (IN=A) LDSUB (IN=B);
BY SALEID BF_SSN LN_SEQ;
IF "&I_TYPE" = 'P' THEN DO;
	IF A THEN OUTPUT SLGE50;
	IF B THEN OUTPUT LDSUB;
	END;
IF "&I_TYPE" = 'L' THEN DO;
	IF A THEN DO;
		OUTPUT SLGE50;
		OUTPUT LDSUB;
		END;
	END;
ELSE IF "&I_TYPE" IN ('S','F') THEN DO;
	IF A AND B THEN OUTPUT SLGE50;
	ELSE IF (A AND NOT B) THEN DO;
		EX_CD = 'LOCKDOWN';
		OUTPUT EXC;
		END;
	IF B THEN OUTPUT LDSUB;
	END;
RUN;
%EXCLUSION;

/*ADD/RE-ADD LOCKDOWN DATA FOR THIS SALE TO LD FILE*/
DATA OLRPLD.UTLWO02;
SET OLRPLD.UTLWO02 LDSUB;
RUN;
PROC SORT DATA=OLRPLD.UTLWO02 NODUPKEY;
BY SALEID BF_SSN LN_SEQ;
RUN;
/*APPEND CURRENT SALE RESULTS & ERRORS TO MASTER LISTS FOR REPORTING*/
DATA SLGE50_MAST (WHERE=(SALEID NE ' '));SET SLGE50_MAST SLGE50;RUN;
DATA EXCLUDE_MAST (WHERE=(SALEID NE ' '));SET EXCLUDE_MAST EXCLUDE;RUN;
%MEND SALE_ITER;
%MACRO ITER_EXEC;
	%DO I=1 %TO &SALE_CT;
		%PUT *****************;
		%PUT "SALE_ITER = &I";
		%PUT *****************;
		%SALE_ITER(&I);
    %END;
%MEND ITER_EXEC;
%ITER_EXEC;
/***********************************************************************************
*********************   END ITERATIVE PROCESSING   *********************************
************************************************************************************
*********************   CREATE SALE TRIGGER FILE   *********************************
************************************************************************************/
/*ENSURE THAT EVERY SALE SCHEDULED FOR TODAY HAS A TRIGGER, EVEN IF NO LOANS*/
PROC DATASETS LIBRARY=WORK NOLIST;
MODIFY SLGE50_MAST;
RENAME SALEID=SALEIDX;
QUIT;
/*ADD SALES SCHEDULED VIA SCRIPT*/
PROC SQL;
CREATE TABLE SLGE50_MAST2 AS
SELECT A.*, B.*
FROM SLIST A 
LEFT OUTER JOIN SLGE50_MAST B
ON A.SALEID = B.SALEIDX;
QUIT;

/*RENAME DATASETS FOR CONSISTANCY*/
PROC DATASETS;DELETE SLGE50_MAST;QUIT;
DATA SLGE50_MAST;SET SLGE50_MAST2;RUN;
PROC DATASETS;DELETE SLGE50_MAST2;QUIT;

/*ADD SALES SCHEDULED VIA COMPASS*/
DATA SLGE50_MAST;
SET SLGE50_MAST SLERRS;
RUN;
PROC SORT DATA=SLGE50_MAST NODUPKEY;
BY SALEID BF_SSN LN_SEQ;
RUN;

DATA TRIGFILE (DROP=LN_SEQ);
SET SLGE50_MAST;
BY SALEID;
IF FIRST.SALEID THEN INDY = 1;
ELSE INDY = 0;
IF LN_SEQ < 10 THEN LN_SEQ_X = '000'||PUT(LN_SEQ,1.);
ELSE LN_SEQ_X = '00'||PUT(LN_SEQ,2.);
RUN;

DATA _NULL_;
SET  WORK.TRIGFILE (RENAME=(LN_SEQ_X = LN_SEQ));
BY SALEID; 
FILE REPORT2  LRECL=21;
IF INDY = 1 THEN        /* WRITE LOAN SALE IDS */
	PUT SALEID $ ;
IF BF_SSN NE ' ' THEN DO;
	PUT
	@1 BF_SSN $9.
	@10 LN_SEQ $9.
	;
END;
RUN;

/************************************************************************************/
/*********************************REPORTING******************************************/
/************************************************************************************/

%MACRO NODATL(RNO);
PROC CONTENTS DATA=RPX OUT=EMPTYSET NOPRINT;
DATA _NULL_;
SET EMPTYSET;
FILE PRINT;
IF  NOBS=0 AND _N_ =1 THEN DO;
       PUT // 132*'-';
       PUT      ////////
           @51 '**** NO OBSERVATIONS FOUND ****';
       PUT ////////
           @57 '-- END OF REPORT --';
	   PUT ////////////////
			@46 "JOB = UTLWO02     REPORT = ULWO02.LWO02&RNO";
   END;
RETURN;
RUN;
%MEND NODATL;

/*REPORT 11 - MULTIPLE SEP DATES FOR SAME BWR*/
%PRNTO(11);
OPTIONS CENTER NODATE NUMBER PAGENO=1 LS=132;
DATA RPX;
SET SLGE50_MAST;
WHERE MUL_SEP_IND > 1;
SSN = INPUT(BF_SSN,9.);
RUN;
PROC SORT DATA=RPX NODUPKEY;
BY BF_SSN;
RUN;
TITLE "LOAN SALE";
TITLE2 "MULTIPLE ENROLLMENT INFORMATION EXISTS FOR SAME BORROWER";
TITLE3 "&RUNDATE";
FOOTNOTE  'JOB = UTLWO02     REPORT = ULWO02.LWO02R11';
%NODATL(R11);
PROC PRINT NOOBS SPLIT='/' DATA=RPX WIDTH=UNIFORM WIDTH=MIN;
VAR SSN;
LABEL SSN="SSN";
FORMAT SSN SSN11.;
RUN;

/*REPORT 52 - LOANS EXCLUDED FROM FINAL SALE DUE TO BECOMING ELIGIBLE FOR SALE TOO RECENTLY*/
%PRNTO(52);
OPTIONS CENTER NODATE NUMBER PAGENO=1 LS=132;
DATA RPX;
SET EXCLUDE_MAST;
WHERE EX_CD = 'LOCKDOWN';
SSN = INPUT(BF_SSN,9.);
RUN;
PROC SORT DATA=RPX;
BY LF_LON_CUR_OWN BF_SSN LN_SEQ;
RUN;
TITLE "LOAN SALE";
TITLE2 "LOANS NOT ADDED TO FINAL SALE PROCESS DUE TO LOCKDOWN EDITS";
TITLE3 "&RUNDATE";
FOOTNOTE  'JOB = UTLWO02     REPORT = ULWO02.LWO02R52';
%NODATL(R52);
PROC PRINT NOOBS SPLIT='/' DATA=RPX WIDTH=UNIFORM WIDTH=MIN;
VAR SSN LN_SEQ LF_LON_CUR_OWN;
LABEL SSN="SSN" LN_SEQ="LOAN SEQ #" LF_LON_CUR_OWN="OWNER ID";
FORMAT SSN SSN11.;
RUN;

/*REPORT 75 - SALES IMPROPERLY SCHEDULED IN SCRIPT OR COMPASS*/
%PRNTO(75);
OPTIONS CENTER NODATE NUMBER PAGENO=1 LS=132;
DATA RPX;
SET SLIST SLERRS;
WHERE SALE_ERR NE ' ';
RUN;
PROC SORT DATA=RPX NODUPKEY;
BY TYPE SALE_ERR SALEID;
RUN;
TITLE "LOAN SALE";
TITLE2 "SALES IMPROPERLY SCHEDULED IN SCRIPT OR COMPASS";
TITLE3 "&RUNDATE";
FOOTNOTE  'JOB = UTLWO02     REPORT = ULWO02.LWO02R75';
%NODATL(R75);
PROC PRINT NOOBS SPLIT='/' DATA=RPX WIDTH=UNIFORM WIDTH=MIN;
VAR SALEID SALE_ERR;
LABEL SALEID='SALE ID' SALE_ERR='ERROR DESCRIPTION';
RUN;

/*REPORT 90 - SUMMARY REPORT*/
%PRNTO(90);
OPTIONS CENTER NODATE NUMBER PAGENO=1 LS=132 NOBYLINE;
PROC SQL;
CREATE TABLE RPX AS 
SELECT BF_SSN 
	,A.BUYER 
	,A.SALEID 
	,A.REP_SALE_TYPE
	,A.SELLID 
	,B.IM_LDR_SHO
	,A.BUYID 
	,A.IF_BUY_BND_ISS 
	,A.IF_TIR_PCE 
	,A.LA_CUR_PRI 
	,A.CUR_INT 
	,CASE
		WHEN A.TYPE = 'L' THEN 'PRELIMINARY SALES - (LOCKDOWN)'
		WHEN A.TYPE = 'P' THEN 'PRELIMINARY SALES'
		WHEN A.TYPE = 'F' THEN 'FINAL SALES'
		WHEN A.SALE_ERR NE ' ' THEN 'SALE ESTIMATE - NO COMPASS SALE SCHEDULED'
	END AS TYPENAME LENGTH =50
FROM SLGE50_MAST A 
INNER JOIN LR10 B
	ON A.SELLID = B.IF_DOE_LDR
WHERE BUYER NE ' '
;
QUIT;
PROC SORT DATA=RPX;
	BY BF_SSN;
RUN;
DATA RPX;
	FORMAT SALEID $9.;
	SET RPX;
	BY BF_SSN;
	IF FIRST.BF_SSN THEN BWR_CT = 1;
	ELSE BWR_CT = 0;
RUN;
PROC SORT DATA=RPX;
	BY TYPENAME BUYER REP_SALE_TYPE IM_LDR_SHO;
RUN;

TITLE "LOAN SALE";
TITLE2 "SALE STATISTICS SUMMARY";
TITLE3 #BYVAL1;
TITLE4 "&RUNDATE";
FOOTNOTE  'JOB = UTLWO02     REPORT = ULWO02.LWO02R90';
PROC REPORT DATA=RPX NOWD SPACING=1 HEADSKIP SPLIT='/' MISSING;
BY TYPENAME;
COLUMN TYPENAME BUYER REP_SALE_TYPE IM_LDR_SHO SELLID SALEID IF_BUY_BND_ISS IF_TIR_PCE BWR_CT N
	LA_CUR_PRI CUR_INT TOTAL;
DEFINE TYPENAME / GROUP NOPRINT;
DEFINE BUYER / GROUP NOPRINT;
DEFINE REP_SALE_TYPE / GROUP 'SALE/TYPE' WIDTH=15;
DEFINE SELLID / GROUP "SELLER/ID" width=6;
DEFINE IM_LDR_SHO / GROUP 'SELLER/NAME' WIDTH=20;
DEFINE SALEID / GROUP "LOAN/SALE ID" WIDTH=8;
DEFINE IF_BUY_BND_ISS / GROUP "BOND ID" WIDTH=8;
DEFINE IF_TIR_PCE / GROUP "ORIG" WIDTH=4;
DEFINE BWR_CT / ANALYSIS SUM NOPRINT "BORROWERS" FORMAT=COMMA6. WIDTH=9;
DEFINE N / "LOANS" FORMAT=COMMA6. WIDTH=5;
DEFINE LA_CUR_PRI / ANALYSIS SUM "TOTAL/PRINCIPAL/AMOUNT" FORMAT=DOLLAR18.2;
DEFINE CUR_INT / ANALYSIS SUM "TOTAL/INTEREST/AMOUNT" FORMAT=DOLLAR18.2;
DEFINE TOTAL / COMPUTED "TOTAL PRINCIPAL AND INTEREST AMOUNT" FORMAT=DOLLAR18.2;

COMPUTE TOTAL;
TOTAL = LA_CUR_PRI.SUM + CUR_INT.SUM;
ENDCOMP;

COMPUTE BEFORE BUYER;
LINE @1 "***BUYER = " BUYER $10.;
LINE @1 ' ';
ENDCOMP;

BREAK AFTER REP_SALE_TYPE / OL SUMMARIZE SUPPRESS SKIP;

COMPUTE AFTER TYPENAME;
SALEID = 'TOTAL:';
LINE @1 ' ';
LINE @13 "TOTAL BORROWERS WITH LOANS SOLD:  " BWR_CT.SUM COMMA6.;
LINE _PAGE_;
ENDCOMP;

BREAK AFTER TYPENAME / DOL DUL SUMMARIZE SUPPRESS SKIP;

COMPUTE AFTER _PAGE_;
	LINE @1 132*'=';
	LINE @1 'SPECIAL:SPECIAL SALE 			|	SPECIAL PRE:SPECIAL SALE PRE-ECASLA			|	MONTHLY PRE:MONTHLY PRE-ECASLA LOAN SALE'; 
	LINE @1 'MONTHLY:MONTHLY LOAN SALE 		|	FULLY FZ:FULLY ORIGINATED 90 DAYS – ZERO OF |	FULLY:FULLY ORIGINATED 90 DAYS'; 
	LINE @1 'ECASLA I:SPECIAL SALE ECASLA I	|	ECASLA II:SPECIAL SALE ECASLA II			|	NON ECASLA:SPECIAL SALE NON ECASALA'; 
	LINE @1 'FULLY PRE:FULLY ORIGINATED 90 DAYS PRE-ECASLA LOAN SALE'; 
	LINE @1 132*'=';
ENDCOMP;
RUN;

OPTIONS LS=126 PS=41;
/******************************************************************
* REPORT 80 - DATA FOR UTLWA08  
*******************************************************************
* NOTE: THIS DATA SET WILL ONLY BE OVERWRITTEN IF THERE IS SOME 
* TYPE OF SALE (PRELIMINARY, LOCKDOWN, ETC). OTHERWISE IT WILL 
* CONTAIN DATA FROM THE PREVIOUS SALE DATE REGARDLESS OF WHEN THE
* PREVIOUS SALE TOOK PLACE.
*******************************************************************
* ASSIGN THE APPROPRIATE DIRECTORY HERE
*******************************************************************/
LIBNAME SAS_TAB V8 'X:\PADU\SAS\devLnSale'; *TEST;
/*LIBNAME SAS_TAB V8 '/sas/whse/progrevw'; *LIVE;*/
/*****************************************************************/
DATA SAS_TAB.UTLWO02_R80(
	KEEP=BF_SSN LN_SEQ IF_SLL_OWN IF_BUY_OWN SALEID SALE_DATE JUL1_IND CUR_INT TYPE ECASLA_CAT
	);
	SET TRIGFILE;
	FORMAT SALE_DATE RUN_DATE MMDDYY10.;
	WHERE BF_SSN ^= '';
	RUN_DATE = TODAY();
	LN_SEQ = INPUT(LN_SEQ_X,BEST12.);
	SELECT (TODAY());
		WHEN (P1DATE) SALE_DATE = TODAY();
		WHEN (P2DATE) SALE_DATE = TODAY();
		WHEN (P3DATE) SALE_DATE = TODAY();
		WHEN (P4DATE) SALE_DATE = TODAY();
		WHEN (P5DATE) SALE_DATE = TODAY();
		WHEN (SPDATE) SALE_DATE = TODAY();
		WHEN (PLDATE) SALE_DATE = TODAY();
		WHEN (FDATE) SALE_DATE = TODAY();
		OTHERWISE SALE_DATE=.;
	END;
RUN;
