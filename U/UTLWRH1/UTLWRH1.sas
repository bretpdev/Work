/**********************************************************************************************
* UTLWRH1 - REHABILITATION REPORTS
* THIS JOB IS NOW THE COMBINATION OF LEGACY AND NEW CODE. LOANS THAT ARE BEING REHABILITATED
* BY UHEAA WILL BE IN FILE R8, R9, AND R10. THIS JOB NOW USES A SAS DATA SET TO CALCULATE 
* INTEREST RATES IF THE DC01 REG CAT IS INVALID.
***********************************************************************************************
* LEGACY COMMENTS
***********************************************************************************************
* Includes data dump and references for UNIPAC, promissory note and file full lists for the 
* file room and loan sale report for Teri.
***********************************************************************************************/ 
/*LIBNAME DLGSUTWH DB2 DATABASE=DLGSUTWH OWNER=OLWHRM1;*/
/*%LET RPTLIB = %SYSGET(reportdir);*/
/*%LET TBLLIB = /sas/whse/progrevw;*/
%LET RPTLIB = T:\SAS;
%LET TBLLIB = Q:\Process Automation\TabSAS;
FILENAME REPORTZ "&RPTLIB/ULWRH1.LWRH1RZ";
FILENAME REPORT2 "&RPTLIB/ULWRH1.LWRH1R2";
FILENAME REPORT3 "&RPTLIB/ULWRH1.LWRH1R3";
FILENAME REPORT4 "&RPTLIB/ULWRH1.LWRH1R4";
FILENAME REPORT5 "&RPTLIB/ULWRH1.LWRH1R5";
FILENAME REPORT6 "&RPTLIB/ULWRH1.LWRH1R6";
FILENAME REPORT7 "&RPTLIB/ULWRH1.LWRH1R7";
FILENAME REPORT8 "&RPTLIB/ULWRH1.LWRH1R8";
FILENAME REPORT9 "&RPTLIB/ULWRH1.LWRH1R9";
FILENAME REPORT10 "&RPTLIB/ULWRH1.LWRH1R10";
DATA _NULL_;
runday = today();
/*If job needs to be run manually for a past date use this line:*/
/*runday = '31dec2015'd;	*/
	 CALL SYMPUT('DAYS_AGO_2',"'"||PUT(INTNX('DAY',runday,-2,'B'), MMDDYY10.)||"'");
	 CALL SYMPUT('MTHS_AGO_9',"'"||PUT(INTNX('MONTH',runday,-9,'S'), MMDDYY10.)||"'");
RUN;
/*********************************************************
* DUSTER REG CAT TABLE
**********************************************************/
DATA PREG_CAT;
	FORMAT BEG_DT END_DT MMDDYY10. IRATE 8.3;
	INFILE "&TBLLIB/Pseudo_Cat.txt" DLM=',' MISSOVER FIRSTOBS=2;
	INFORMAT BEG_DT MMDDYY10. END_DT MMDDYY10. AC_LON_TYP $2. IRATE 8.3; 
	INPUT BEG_DT END_DT AC_LON_TYP $ IRATE;
RUN;
/*********************************************************
* DUSTER BOND ID TABLE
**********************************************************/
DATA _NULL_ (WHERE=(BOND_STAT = 'A'));
	FORMAT BOND_ID $20. BOND_STAT $1.;
	INFILE "&TBLLIB/UTLWRH1.Bond.txt" DLM=',' MISSOVER FIRSTOBS=2;
	INFORMAT BOND_ID $20. BOND_STAT $1.; 
	INPUT BOND_ID $ BOND_STAT $;
	DO;
		CALL SYMPUT('BOND_ID',BOND_ID);
	END;
RUN;

%LET MAX_DF = 15;
%SYSLPUT DAYS_AGO_2 = &DAYS_AGO_2;
%SYSLPUT MTHS_AGO_9 = &MTHS_AGO_9;
%SYSLPUT BOND_ID = &BOND_ID;
LIBNAME  DUSTER  REMOTE  SERVER=DUSTER  SLIBREF=WORK;
RSUBMIT;

LIBNAME PROGREVW '/sas/whse/progrevw';

PROC SQL;
CREATE TABLE BOND_IDS AS 
	SELECT DISTINCT
		IF_BND_ISS_OLD,
		IF_BND_ISS_NEW
	FROM
		PROGREVW.BOND_IDS
;
QUIT;


%MACRO SQLCHECK (SQLRPT= );
%IF &SQLXRC NE 0 %THEN %DO;
	DATA _NULL_;
    FILE REPORTZ NOTITLES;
    PUT @01 " ********************************************************************* "
      / @01 " ****  THE SQL CODE ABOVE HAS EXPERIENCED AN ERROR.               **** "
      / @01 " ****  THE SAS LOG IN &SQLRPT SHOULD BE REVIEWED.          **** "       
      / @01 " ********************************************************************* "
      / @01 " ****  THE SQL ERROR CODE IS  &SQLXRC  AND THE SQL ERROR MESSAGE  **** "
      / @01 " ****  &SQLXMSG   **** "
      / @01 " ********************************************************************* ";
	RUN;
%END;
%MEND;
PROC SQL STIMER;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE REHB_1 AS
	SELECT 
	*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT 
			App.AF_APL_ID,
			App.AF_APL_ID_SFX,
			App.BF_SSN,
			App.AF_APL_ID||App.AF_APL_ID_SFX AS CLUID,
			App.LD_TRX_EFF,
			App.BD_TRX_PST_HST,
			App.LC_TRX_TYP,
			App.LA_TRX,
			App.LA_PRI,
			App.LA_INT,
		/*BORROWER INFO*/
			PD01_BR.DM_PRS_1,
			PD01_BR.DM_PRS_LST,
			PD01_BR.DM_PRS_MID,
			PD01_BR.DD_BRT,
			PD01_BR.DX_STR_ADR_1,
			PD01_BR.DX_STR_ADR_2,
			PD01_BR.DM_CT,
			PD01_BR.DC_DOM_ST,
			PD01_BR.DF_ZIP,
			PD01_BR.DM_FGN_CNY,
			PD01_BR.DI_VLD_ADR,
			PD01_BR.DN_PHN,
			PD01_BR.DI_PHN_VLD,
			PD01_BR.DN_ALT_PHN,
			PD01_BR.DI_ALT_PHN_VLD,
			PD01_BR.DF_SPE_ACC_ID,
		/*LOAN INFO*/
			DC01.LI_COL_CST_ASS,
			DC01.LF_CLM_ID,
			GA10.AC_LON_TYP,
			GA10.AD_PRC,
			GA01.AD_IST_TRM_BEG,
			GA01.AD_IST_TRM_END,
			GA10.AA_GTE_LON_AMT,
			GA01.AF_APL_OPS_SCL,
			GA01.AD_BR_SIG,
			GA10.AR_CON_ITR,
			DC01.LC_TYP_DFR,
			GA14.AC_DFR_TYP,
			GA14.AD_DFR_BEG,
			GA14.AD_DFR_END,
			GA14.AC_LON_STA_TYP,
			GA01.AD_APL_RCV,
			GA01.AC_STU_DFR_REQ,
			CASE WHEN GA10.AC_LON_TYP = 'CL' 
				THEN GA01.AF_CUR_APL_OPS_LDR
				ELSE GA01.AF_ORG_APL_OPS_LDR
			 END AS AF_ORG_APL_OPS_LDR,
			DC01.LC_INT_TYP,
			DC01.PF_RGL_CAT,
		/*STUDENT INFO*/	
			GA01.DF_PRS_ID_STU AS STU_SSN,
			PD01_STU.DM_PRS_1 AS STU_DM_PRS_1,
			PD01_STU.DM_PRS_MID AS STU_DM_PRS_MID,
			PD01_STU.DM_PRS_LST AS STU_DM_PRS_LST,
			PD01_STU.DD_BRT AS STU_DD_BRT,
		/*IF STUDENT INFO IS MISSING USE THE PARENTS ADDRESS INFO SELECTED FOR ALL BUT APPLICALBE TO PLUS LOANS*/
			CASE WHEN PD01_STU.DX_STR_ADR_1 = ''
				THEN PD01_BR.DX_STR_ADR_1
				ELSE PD01_STU.DX_STR_ADR_1
			END AS STU_DX_STR_ADR_1,
			CASE WHEN PD01_STU.DX_STR_ADR_2 = ''
				THEN PD01_BR.DX_STR_ADR_2
				ELSE PD01_STU.DX_STR_ADR_2
			END AS STU_DX_STR_ADR_2,
			CASE WHEN PD01_STU.DM_CT = ''
				THEN PD01_BR.DM_CT
				ELSE PD01_STU.DM_CT
			END AS STU_DM_CT,
			CASE WHEN PD01_STU.DC_DOM_ST = ''
				THEN PD01_BR.DC_DOM_ST
				ELSE PD01_STU.DC_DOM_ST
			END AS STU_DC_DOM_ST,
			CASE WHEN PD01_STU.DF_ZIP = ''
				THEN PD01_BR.DF_ZIP
				ELSE PD01_STU.DF_ZIP
			END AS STU_DF_ZIP,
			CASE WHEN PD01_STU.DM_FGN_CNY = ''
				THEN PD01_BR.DM_FGN_CNY
				ELSE PD01_STU.DM_FGN_CNY
			END AS STU_DM_FGN_CNY,
			CASE WHEN PD01_STU.DI_VLD_ADR = ''
				THEN 'N'
				ELSE PD01_STU.DI_VLD_ADR
			END AS STU_DI_VLD_ADR,
			CASE WHEN PD01_STU.DN_PHN = ''
				THEN PD01_BR.DN_PHN
				ELSE PD01_STU.DN_PHN
			END AS STU_DN_PHN,
			CASE WHEN PD01_STU.DI_PHN_VLD = ''
				THEN 'N'
				ELSE PD01_STU.DI_PHN_VLD
			END AS STU_DI_PHN_VLD,
			PD01_STU.DN_ALT_PHN AS STU_DN_ALT_PHN,
			PD01_STU.DI_ALT_PHN_VLD AS STU_DI_ALT_PHN_VLD,
		/*ENDORSER INFO*/
			PD01_EDR.DF_PRS_ID AS EDSR_SSN,
			PD01_EDR.DM_PRS_1 AS EDSR_DM_PRS_1,
			PD01_EDR.DM_PRS_MID AS EDSR_DM_PRS_MID,
			PD01_EDR.DM_PRS_LST AS EDSR_DM_PRS_LST,
			PD01_EDR.DD_BRT AS EDSR_DD_BRT,
			PD01_EDR.DX_STR_ADR_1 AS EDSR_DX_STR_ADR_1,
			PD01_EDR.DX_STR_ADR_2 AS EDSR_DX_STR_ADR_2,
			PD01_EDR.DM_CT AS EDSR_DM_CT,
			PD01_EDR.DC_DOM_ST AS EDSR_DC_DOM_ST,
			PD01_EDR.DF_ZIP AS EDSR_DF_ZIP,
			PD01_EDR.DM_FGN_CNY AS EDSR_DM_FGN_CNY,
			PD01_EDR.DI_VLD_ADR AS EDSR_DI_VLD_ADR,
			PD01_EDR.DN_PHN AS EDSR_DN_PHN,
			PD01_EDR.DI_PHN_VLD AS EDSR_DI_PHN_VLD,
			PD01_EDR.DN_ALT_PHN AS EDSR_DN_ALT_PHN,
			PD01_EDR.DI_ALT_PHN_VLD AS EDSR_DI_ALT_PHN_VLD,
		/*ENROLLMENT INFO*/
			ENR.IF_OPS_SCL_RPT,
			ENR.LC_STU_ENR_TYP,
			ENR.LD_ENR_CER,
			ENR.LD_LDR_NTF,
			ENR.LD_STU_ENR_STA AS LD_LFT_SCL,
		/*MISC INFO	*/
			GA10.AF_CUR_LON_OPS_LDR,
			GA01.AC_EDS_TYP,
			GA01.AX_STU_ENR_BEG_CYM,
			GA10.AC_ORG_INT_TYP,
			GA10.AD_PRC,
			GA10.AA_GTE_LON_AMT,
			GA10.AA_TOT_RFD,
			GA10.AD_RFD_EFF,
			DC01.PF_RGL_CAT,
			GA10.AR_CON_ITR,
			DC01.LA_PAY_XPC,
			DC01.LR_ITR,
			CASE WHEN GA10.AC_LON_TYP = 'CL' AND SBI.SUB_IND = 'Y' 
				THEN 'Y'
				ELSE 'N'
			 END AS SUBSIDY,
			LCO.AA_TOT_EDU_DET_PNT,
		/*IBR INFO*/
			DC01.LD_IBR_25Y_FGV_BEG, /*Field seems right, but process to load borrowers into onelink might be off*/
			CASE WHEN DAYS(DC01.LD_IBR_RPD_SR) < DAYS('2009-07-01') /*Dont allow date to be prior to start of IBR per Jeremy*/
					THEN '2009-07-01'
					ELSE DC01.LD_IBR_RPD_SR
			END AS LD_IBR_RPD_SR,
			DC01.LA_IBR_STD_STD_PAY,
			DC01.LN_IBR_QLF_FGV_MTH,
			DC01.LD_RHB,
		/*BOND INFO*/
			BND.IF_BND_ISS,
		/*REPAY INFO*/
			BR01.BA_STD_PAY,
			DC01.LA_PAY_XPC,
			BL_DC01.BL_LA_PAY_XPC,
			App.PRI_COST
		FROM 
			OLWHRM1.GA01_APP GA01 
			INNER JOIN OLWHRM1.GA10_LON_APP GA10 
				ON GA01.AF_APL_ID = GA10.AF_APL_ID 
			INNER JOIN OLWHRM1.DC01_LON_CLM_INF DC01 
				ON GA10.AF_APL_ID = DC01.AF_APL_ID
				AND GA10.AF_APL_ID_SFX = DC01.AF_APL_ID_SFX
			INNER JOIN OLWHRM1.PD01_PDM_INF PD01_BR 
				ON GA01.DF_PRS_ID_BR = PD01_BR.DF_PRS_ID
			INNER JOIN 
			(
				(
					SELECT 
						DC11.BF_SSN,
						DC11.AF_APL_ID,
						DC11.AF_APL_ID_SFX,
						DC11.LD_TRX_EFF,
						DC11.BD_TRX_PST_HST,
						DC11.LC_TRX_TYP,
						DC11.LA_TRX,
						DC11.LA_APL_PRI AS LA_PRI,
						DC11.LA_APL_INT AS LA_INT,
						COALESCE(DC11.LA_APL_PRI,0.00) + COALESCE(DC11.LA_APL_LEG_CST,0.00) + COALESCE(DC11.LA_APL_OTH_CHR,0.00) + COALESCE(DC11.LA_APL_COL_CST,0.00) AS PRI_COST
					FROM 
						OLWHRM1.DC11_LON_FAT DC11
					WHERE 
						DC11.BD_TRX_PST_HST >= &DAYS_AGO_2
						AND DAYS(DC11.BD_TRX_PST_HST) <= DAYS(&days_ago_2) + 16
						AND DC11.LC_TRX_TYP = 'RH'
				) /*Default Claim Loan Financial Activity Transaction*/
				UNION
				(
					SELECT 
						DC01.BF_SSN,
						DC01.AF_APL_ID,
						DC01.AF_APL_ID_SFX,
						DATE(RM10.LX_RMT_TRX_EFF_DTE) AS LD_TRX_EFF,
						RM10.LD_PAY_SUS AS BD_TRX_PST_HST,
						RM10.LC_RMT_TRX_TYP AS LC_TRX_TYP,
						DECIMAL(RM10.LX_RMT_TRX_AMT,10,2) AS LA_TRX,
						0,
						0,
						0
					FROM 
						OLWHRM1.RM10_RMT_SUS_DTL RM10 
						INNER JOIN OLWHRM1.DC01_LON_CLM_INF DC01 
							ON RM10.LF_CLM_ID = DC01.LF_CLM_ID 
							AND	RM10.LF_PRS_ID = DC01.BF_SSN
					WHERE 
						RM10.LD_PAY_SUS >= &DAYS_AGO_2
						AND DAYS(RM10.LD_PAY_SUS) <= DAYS(&days_ago_2) + 16
						AND RM10.LC_RMT_TRX_TYP = 'RH'
				) /*Remittance Suspense Detail*/
			) App
				ON App.AF_APL_ID = DC01.AF_APL_ID 
				AND App.AF_APL_ID_SFX = DC01.AF_APL_ID_SFX
			INNER JOIN
			(
				SELECT
					MAX(DC01.LD_BIL_STA_UPD) AS LD_BIL_STA_UPD,
					DC01.AF_APL_ID,
					DC01.AF_APL_ID_SFX
				FROM
					OLWHRM1.DC01_LON_CLM_INF DC01
				GROUP BY
					DC01.AF_APL_ID,
					DC01.AF_APL_ID_SFX
			) MaxBill
				ON MaxBill.AF_APL_ID = App.AF_APL_ID
				AND MaxBill.AF_APL_ID_SFX = App.AF_APL_ID_SFX
				AND MaxBill.LD_BIL_STA_UPD = DC01.LD_BIL_STA_UPD
			LEFT JOIN
			(
				SELECT
					LN10.BF_SSN,
					LN10.LN_SEQ,
					LN10.LF_LON_ALT,
					LN10.LN_LON_ALT_SEQ,
					LN35.IF_BND_ISS
				FROM	
					OLWHRM1.LN10_LON LN10 
					INNER JOIN
					(
						SELECT
							BF_SSN,
							LF_LON_ALT, 
							LN_LON_ALT_SEQ,
							MAX(LD_LON_EFF_ADD) AS LAST_UPDATE
						FROM
							OLWHRM1.LN10_LON 
						GROUP BY
							BF_SSN,
							LF_LON_ALT, 
							LN_LON_ALT_SEQ
					)LN10_POP
						ON LN10_POP.BF_SSN = LN10.BF_SSN
						AND LN10_POP.LF_LON_ALT = LN10.LF_LON_ALT
						AND LN10_POP.LN_LON_ALT_SEQ = LN10.LN_LON_ALT_SEQ
						AND LN10_POP.LAST_UPDATE = LN10.LD_LON_EFF_ADD
					/*Getting the bond ID that was in effect on the effective date of the 10/30 payment*/
					INNER JOIN
					(
						SELECT
							LN35.BF_SSN,
							LN35.LN_SEQ,
							LN35.IF_BND_ISS
						FROM
							OLWHRM1.LN35_LON_OWN LN35
							INNER JOIN
							(
								SELECT
									LN90.BF_SSN,
									LN90.LN_SEQ,
									MIN(LN90.LD_FAT_EFF) AS LD_FAT_EFF
								FROM
									OLWHRM1.LN90_FIN_ATY LN90
								WHERE
									LN90.LC_FAT_REV_REA = ' '
									AND LN90.PC_FAT_TYP = '10'
									AND LN90.PC_FAT_SUB_TYP = '30'
									AND LN90.LC_STA_LON90 = 'A'
								GROUP BY 
									LN90.BF_SSN,
									LN90.LN_SEQ
							) POP
								ON POP.BF_SSN = LN35.BF_SSN
								AND POP.LN_SEQ = LN35.LN_SEQ
								AND POP.LD_FAT_EFF BETWEEN LN35.LD_OWN_EFF_SR AND COALESCE(LN35.LD_OWN_EFF_END, CURRENT_DATE)
						WHERE
							LN35.LC_STA_LON35 = 'A'
					) LN35
						ON LN35.BF_SSN = LN10.BF_SSN
						AND LN35.LN_SEQ = LN10.LN_SEQ 
			)BND
				ON GA10.AF_APL_ID = BND.LF_LON_ALT
				AND GA10.AF_APL_ID_SFX = BND.LN_LON_ALT_SEQ
			LEFT JOIN OLWHRM1.PD01_PDM_INF PD01_STU
				ON GA01.DF_PRS_ID_STU = PD01_STU.DF_PRS_ID
			LEFT JOIN OLWHRM1.PD01_PDM_INF PD01_EDR
				ON GA01.DF_PRS_ID_EDS = PD01_EDR.DF_PRS_ID
			LEFT JOIN OLWHRM1.GA14_LON_STA GA14
				ON GA10.AF_APL_ID = GA14.AF_APL_ID 
				AND	GA10.AF_APL_ID_SFX = GA14.AF_APL_ID_SFX 
				AND GA14.AC_STA_GA14 = 'A'
			LEFT JOIN 
			(
				SELECT DISTINCT 
					GA17.AF_APL_ID,
					GA17.AF_APL_ID_SFX,
					'Y' AS SUB_IND
				FROM 
					OLWHRM1.GA17_CON_LON_DTL GA17
				WHERE 
					GA17.AC_CON_UND_LON_TYP IN ('CS','D1','D5','SF') 
			) SBI
				ON DC01.AF_APL_ID = SBI.AF_APL_ID
				AND DC01.AF_APL_ID_SFX = SBI.AF_APL_ID_SFX
			LEFT JOIN 
			(
				SELECT DISTINCT 
					JL1B.AF_APL_ID,
					JL1B.AF_APL_ID_SFX,
					JL1C.IF_OPS_SCL_RPT,
					JL1C.LC_STU_ENR_TYP,
					JL1C.LD_ENR_CER,
					JL1C.LD_LDR_NTF,
					JL1C.LD_STU_ENR_STA
				FROM 
					OLWHRM1.GA01_APP JL1A
					INNER JOIN OLWHRM1.GA16_ENR_RPT_CRF JL1B
						ON JL1A.AF_APL_ID = JL1B.AF_APL_ID 
					INNER JOIN OLWHRM1.SD02_STU_ENR JL1C	
						ON JL1A.DF_PRS_ID_STU = JL1C.DF_PRS_ID_STU
						AND JL1B.LF_STU_ENR_RPT_SEQ = JL1C.LF_STU_ENR_RPT_SEQ
						AND JL1B.LF_CRT_DTS_SD02 = JL1C.LF_CRT_DTS_SD02
			) ENR
				ON DC01.AF_APL_ID = ENR.AF_APL_ID
				AND DC01.AF_APL_ID_SFX = ENR.AF_APL_ID_SFX
			LEFT JOIN 
			(
				SELECT DISTINCT 
					AP1A.DF_LCO_PRS_SSN_BR,
					AP1A.AA_TOT_EDU_DET_PNT
				FROM 
					OLWHRM1.AP1A_LCO_APL AP1A
					INNER JOIN 
					(
						SELECT 
							DF_LCO_PRS_SSN_BR,
							MAX(AD_LCO_APL_RCV) AS MAX_DATE,
							MAX(AA_TOT_EDU_DET_PNT) AS MAX_AMT
						FROM 
							OLWHRM1.AP1A_LCO_APL 
						WHERE 
							IC_LCO_DSB_APV_STA = 'A'
							AND AA_TOT_EDU_DET_PNT IS NOT NULL 
						GROUP BY 
							DF_LCO_PRS_SSN_BR
					) MaxAP1A
						ON AP1A.DF_LCO_PRS_SSN_BR = MaxAP1A.DF_LCO_PRS_SSN_BR
						AND AP1A.AD_LCO_APL_RCV = MaxAP1A.MAX_DATE
						AND AP1A.AA_TOT_EDU_DET_PNT = MaxAP1A.MAX_AMT
				WHERE 
					AP1A.IC_LCO_DSB_APV_STA = 'A'
					AND AP1A.AA_TOT_EDU_DET_PNT IS NOT NULL 
			) LCO
				ON GA01.DF_PRS_ID_BR = LCO.DF_LCO_PRS_SSN_BR
				AND GA10.AC_LON_TYP = 'CL'
			LEFT JOIN OLWHRM1.BR01_BR_CRF BR01
				ON GA01.DF_PRS_ID_BR = BR01.BF_SSN
			LEFT JOIN 
			(
				SELECT
					DC01.BF_SSN,
					SUM(DC01.LA_PAY_XPC) AS BL_LA_PAY_XPC
				FROM
					OLWHRM1.DC01_LON_CLM_INF DC01
				GROUP BY 
					DC01.BF_SSN
			) BL_DC01
				ON GA01.DF_PRS_ID_BR = BL_DC01.BF_SSN 
	FOR READ ONLY WITH UR 
	);
/*********************************************************
* DISBURSEMENT INFORMATION 
**********************************************************/
CREATE TABLE DISB AS	
	SELECT 
		R1.BF_SSN,
		GA11.*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT	
			GA11.AF_APL_ID||GA11.AF_APL_ID_SFX AS CLUID,
			GA11.AN_DSB_SEQ,
			GA11.AC_DSB_ADJ,
			GA11.AA_DSB_ADJ,
			GA11.AD_DSB_ADJ,
			GA11.AA_GTE_FEE_ADJ,
			GA11.AA_ORG_FEE_ADJ
		FROM 
			OLWHRM1.GA11_LON_DSB_ATY GA11 
		WHERE 
			GA11.AC_DSB_ADJ IN ('A','C','P','S','U') 
			AND GA11.AC_DSB_ADJ_STA = 'A' 
			AND	GA11.AN_DSB_SEQ < 5
		
			FOR READ ONLY WITH UR
	) GA11
	INNER JOIN REHB_1 R1
		ON GA11.CLUID = R1.CLUID
;
/*********************************************************************
* UNDERLYING CONSOLIDATON LOAN AMOUNTS 
**********************************************************************/
CREATE TABLE CONDTL AS
	SELECT 
		GA17.*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT	
			GA17.AF_APL_ID||GA17.AF_APL_ID_SFX AS CLUID,
			GA17.AC_CON_UND_LON_TYP,
			GA17.AA_TOT_CON
		FROM 
			OLWHRM1.GA17_CON_LON_DTL GA17
		FOR READ ONLY WITH UR
	) GA17
	INNER JOIN REHB_1 R1
		ON GA17.CLUID = R1.CLUID
;
/*********************************************************
* SELECT REFERENCE INFORMATION 
**********************************************************/
CREATE TABLE REFS AS
	SELECT DISTINCT 
		BR03.*
	FROM CONNECTION TO DB2 
	(
		SELECT 
			BR03.DF_PRS_ID_RFR,
			BR03.DF_PRS_ID_BR AS BF_SSN,
			BR03.BM_RFR_LST,
			BR03.BM_RFR_1,
			BR03.BM_RFR_MID,
			BR03.BN_RFR_DOM_PHN,
			BR03.BN_RFR_ALT_PHN,
			BR03.BC_RFR_REL_BR,
			BR03.BX_RFR_STR_ADR_1,
			BR03.BX_RFR_STR_ADR_2,
			BR03.BM_RFR_CT,
			BR03.BC_RFR_ST,
			BR03.BF_RFR_ZIP,
			BR03.BX_RFR_STR_ADR_1,
			BR03.BX_RFR_STR_ADR_2,
			BR03.BM_RFR_FGN_CNY,
			BR03.BI_VLD_ADR,
			BR03.BI_DOM_PHN_VLD,
			BR03.BI_ALT_PHN_VLD
		FROM 
			OLWHRM1.BR03_BR_REF BR03
		WHERE 
			BR03.BC_STA_BR03 = 'A'
			AND BR03.BC_HME_CNC_RSL != '04'

			FOR READ ONLY WITH UR
	) BR03 
	INNER JOIN REHB_1 R1
		ON BR03.BF_SSN = R1.BF_SSN
;
/**************************************************************************
* CREATE DATASET FOR NEW LENDER ASSIGNMENT PROCESSING 
***************************************************************************/
CREATE TABLE LAP AS
	SELECT 
		Cluid.*
	FROM CONNECTION TO DB2 
	(
		SELECT 
			GA01.DF_PRS_ID_BR,
			GA10.AF_APL_ID||GA10.AF_APL_ID_SFX AS CLUID
		FROM 
			OLWHRM1.GA01_APP GA01
			INNER JOIN OLWHRM1.GA10_LON_APP GA10
				ON GA01.AF_APL_ID = GA10.AF_APL_ID
			INNER JOIN OLWHRM1.GA14_LON_STA GA14
				ON GA10.AF_APL_ID = GA14.AF_APL_ID
				AND GA10.AF_APL_ID_SFX = GA14.AF_APL_ID_SFX
		WHERE 
			COALESCE(GA10.AA_CUR_PRI,0) > 0
			AND GA10.AF_CUR_LON_SER_AGY = '700121'
			AND GA14.AC_STA_GA14 = 'A'
			AND GA14.AC_LON_STA_TYP IN ('CR','DA','FB','IA','IG','IM','RP','UA','UB')

		FOR READ ONLY WITH UR
	) Cluid
	INNER JOIN REHB_1 R1
		ON Cluid.DF_PRS_ID_BR = R1.BF_SSN
;
/**************************************************************************
* CREATE TABLE WITH ONELINK DEFERMENT DATA
***************************************************************************/
CREATE TABLE OL_DEFR AS
	SELECT DISTINCT 
		OLDEFR.*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT 
			GA01.DF_PRS_ID_BR AS OL_DEFR_SSN,
			GA14.AC_LON_STA_REA,
			GA14.AD_DFR_BEG,
			GA14.AD_DFR_END
		FROM 
			OLWHRM1.GA01_APP GA01
			INNER JOIN OLWHRM1.GA10_LON_APP GA10
				ON GA01.AF_APL_ID = GA10.AF_APL_ID
			INNER JOIN OLWHRM1.GA14_LON_STA GA14
				ON GA10.AF_APL_ID = GA14.AF_APL_ID
				AND GA10.AF_APL_ID_SFX = GA14.AF_APL_ID_SFX
		WHERE 
			GA14.AC_LON_STA_TYP = 'DA'
			AND GA14.AC_LON_STA_REA NOT IN ('FT','HT','GF','31')

		FOR READ ONLY WITH UR
	) OLDEFR
	INNER JOIN REHB_1 R1
		ON OLDEFR.OL_DEFR_SSN = R1.BF_SSN
;

/**************************************************************************
* CREATE TABLE WITH COMPASS DEFERMENT DATA
***************************************************************************/
CREATE TABLE CO_DEFR AS
	SELECT DISTINCT 
		CODEFR.*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT 
			LN10.BF_SSN AS CO_DEFR_SSN,
			DF10.LC_DFR_TYP,
			LN50.LD_DFR_BEG,
			LN50.LD_DFR_END,
			COALESCE(TRIM(DF10.LF_DOE_SCL_DFR),LN10.LF_DOE_SCL_ORG) AS LF_DOE_SCL_DFR,
			DF10.LD_DFR_INF_CER
		FROM 
			OLWHRM1.LN10_LON LN10
			INNER JOIN OLWHRM1.LN50_BR_DFR_APV LN50
				ON LN10.BF_SSN = LN50.BF_SSN
				AND LN10.LN_SEQ = LN50.LN_SEQ
			INNER JOIN OLWHRM1.DF10_BR_DFR_REQ DF10
				ON DF10.BF_SSN = LN50.BF_SSN
				AND DF10.LF_DFR_CTL_NUM = LN50.LF_DFR_CTL_NUM
		WHERE 
			DF10.LC_STA_DFR10 = 'A'
			AND LN50.LC_STA_LON50 = 'A'
			AND DF10.LC_DFR_STA = 'A'
			AND LN50.LC_DFR_RSP != '003'
			
		FOR READ ONLY WITH UR
	) CODEFR
	INNER JOIN REHB_1 R1
		ON CODEFR.CO_DEFR_SSN = R1.BF_SSN
;

/**************************************************************************
* CREATE TABLE BORROWER PAYMENT DATA
***************************************************************************/
CREATE TABLE BRPMTS AS
	SELECT 
		DC11.*
	FROM CONNECTION TO DB2 
	(
		SELECT 
			DC11.AF_APL_ID||DC11.AF_APL_ID_SFX AS CLUID,
			SUM(COALESCE(DC11.LA_TRX,0))/9 AS ARPA
		FROM 
			OLWHRM1.DC11_LON_FAT DC11
		WHERE 
			DC11.LC_TRX_TYP IN ('BR','EP')
			AND DC11.LC_REV_IND_TYP = ''
			AND DC11.LD_TRX_EFF BETWEEN &MTHS_AGO_9 AND &DAYS_AGO_2
		GROUP BY 
			DC11.AF_APL_ID||DC11.AF_APL_ID_SFX 
			
		FOR READ ONLY WITH UR
	) DC11
	INNER JOIN REHB_1 R1
		ON DC11.CLUID = R1.CLUID
;

/**************************************************************************
* REG CAT DATA FOR SLS LOANS
***************************************************************************/
CREATE TABLE RG02 AS
	SELECT 
		*
	FROM CONNECTION TO DB2 
	(
		SELECT 
			RG02.PF_RGL_CAT,
			RG02.PR_RPD_FOR_ITR AS RATE,
			RG02.PD_ITR_EFF_BEG AS BEG_DT,
			RG02.PD_ITR_EFF_END AS END_DT
		FROM 
			OLWHRM1.RG02_ITR_DFN RG02
		
		FOR READ ONLY WITH UR
	);
DISCONNECT FROM DB2;

ENDRSUBMIT;

DATA REHB_1; SET DUSTER.REHB_1; RUN;
DATA DISB; SET DUSTER.DISB; RUN;
DATA CONDTL; SET DUSTER.CONDTL; RUN;
DATA REFS; SET DUSTER.REFS; RUN;
DATA LAP; SET DUSTER.LAP; RUN;
DATA OL_DEFR; SET DUSTER.OL_DEFR; RUN;
DATA CO_DEFR; SET DUSTER.CO_DEFR; RUN;
DATA BRPMTS; SET DUSTER.BRPMTS; RUN;
DATA RG02; SET DUSTER.RG02; RUN;
DATA BOND_IDS; SET DUSTER.BOND_IDS; RUN;

PROC SQL;
CREATE TABLE REHB_1 AS
	SELECT
		R1.*,
		COALESCE(B.IF_BND_ISS_NEW,"&BOND_ID") AS BOND_ID
	FROM
		REHB_1 R1
		LEFT JOIN BOND_IDS B
			ON B.IF_BND_ISS_OLD = R1.IF_BND_ISS
;
QUIT;

/**************************************************************
* IF NO DATA RETURNED END THE JOB - COMMENT FOR LOCAL RUNS BUT 
* SHOULD BE LIVE IN PRODUCTION
***************************************************************/
/*%MACRO ABORTIF;*/
/*%LET DSID=%SYSFUNC(OPEN(WORK.REHB_1));*/
/*%LET HASOBS=%SYSFUNC(ATTRN(&DSID,ANY));*/
/*%LET RC=%SYSFUNC(CLOSE(&DSID));*/
/*%IF &HASOBS=0 %THEN	%DO;*/
/*	%DO I=2 %TO 10;*/
/*		DATA _NULL_;*/
/*			FILE REPORT&I;*/
/*		RUN;*/
/*	%END;*/
/*	DATA _NULL_;*/
/*		PUT 37*'*';*/
/*	    PUT "NO DATA FOR REHABS - &SYSDATE9.";*/
/*		PUT 37*'*';*/
/*		ABORT ABEND 99;*/
/*	RUN;*/
/*%END;*/
/*%MEND ABORTIF;*/
/*%ABORTIF;*/

PROC SORT DATA=DISB; BY BF_SSN CLUID AN_DSB_SEQ; RUN;
DATA DISB(DROP=AN_DSB_SEQ AA_DSB_ADJ AD_DSB_ADJ AA_GTE_FEE_ADJ AA_ORG_FEE_ADJ AC_DSB_ADJ I BF_SSN COUNTED) MULT_LOANS(KEEP=BF_SSN COUNTED);
	SET DISB;
	BY BF_SSN CLUID;
	ARRAY AA_DISB_{4} ;
	ARRAY AD_DISB_{4} ;
	ARRAY GTE_{4} ;
	ARRAY ORG_{4} ;
	ARRAY AC_DISB_{4} $;
	ARRAY AN_DISB_{4} $;
	ARRAY CA_DISB_{4} ;
	ARRAY CD_DISB_{4} ;
	ARRAY CO_DISB_{4} ;
	ARRAY CC_DISB_{4} $;
	RETAIN AA_DISB_1 - AA_DISB_4 
		AD_DISB_1-AD_DISB_4 
		GTE_1-GTE_4 
		ORG_1-ORG_4 
		AC_DISB_1-AC_DISB_4 
		AN_DISB_1-AN_DISB_4 
		CA_DISB_1-CA_DISB_4
		CD_DISB_1-CD_DISB_4
		CO_DISB_1-CO_DISB_4
		CC_DISB_1-CC_DISB_4
		COUNTED;
	IF FIRST.BF_SSN THEN COUNTED = 0;
	IF AN_DSB_SEQ = 1 AND AD_DSB_ADJ < '01JUL1998'D
		THEN COUNTED = COUNTED + 1;
	IF FIRST.CLUID THEN DO I=1 TO 4;
		AC_DISB_(I) = '';
		AN_DISB_(I) = '';
		AA_DISB_(I) = .;
		AD_DISB_(I) = .;
		GTE_(I) = .;
		ORG_(I) = .;
		CA_DISB_(I) = .;
		CD_DISB_(I) = .;
		CO_DISB_(I) = .;
		CC_DISB_(I) = '';
	END;
	IF AC_DSB_ADJ = 'A' THEN DO;
		AC_DISB_(AN_DSB_SEQ) = 'A';
		AN_DISB_(AN_DSB_SEQ) = AN_DSB_SEQ;
		AA_DISB_(AN_DSB_SEQ) = AA_DSB_ADJ;
		AD_DISB_(AN_DSB_SEQ) = AD_DSB_ADJ;
		GTE_(AN_DSB_SEQ) = AA_GTE_FEE_ADJ;
		ORG_(AN_DSB_SEQ) = AA_ORG_FEE_ADJ;
	END;
	ELSE DO;
		CA_DISB_(AN_DSB_SEQ) = AA_DSB_ADJ;
		CD_DISB_(AN_DSB_SEQ) = AD_DSB_ADJ;
		CO_DISB_(AN_DSB_SEQ) = AA_ORG_FEE_ADJ;
		CC_DISB_(AN_DSB_SEQ) = AC_DSB_ADJ;
	END;
	IF LAST.CLUID THEN OUTPUT DISB;
	IF LAST.BF_SSN AND COUNTED = 1 THEN OUTPUT MULT_LOANS;
RUN;

PROC SORT DATA=CONDTL; BY CLUID AC_CON_UND_LON_TYP; RUN;
DATA CONDTL(DROP=AA_TOT_CON AC_CON_UND_LON_TYP I SUB UNSUB) CNSL(KEEP=CLUID SUB UNSUB); 
	SET CONDTL;
	BY CLUID;
	IF _N_ = 1 THEN DO;
		DECLARE HASH TYP( );
		TYP.DEFINEKEY("AC_CON_UND_LON_TYP");
		TYP.DEFINEDATA("I");
		TYP.DEFINEDONE( );
		TYP.ADD(KEY:'SF', DATA: 1);
		TYP.ADD(KEY:'SU', DATA: 2);
		TYP.ADD(KEY:'PL', DATA: 3);
		TYP.ADD(KEY:'SL', DATA: 4);
		TYP.ADD(KEY:'CS', DATA: 5);
		TYP.ADD(KEY:'CU', DATA: 6);
		TYP.ADD(KEY:'D1', DATA: 7);
		TYP.ADD(KEY:'D2', DATA: 8);
		TYP.ADD(KEY:'D3', DATA: 9);
		TYP.ADD(KEY:'D4', DATA:10);
		TYP.ADD(KEY:'D5', DATA:11);
		TYP.ADD(KEY:'D6', DATA:12);
		TYP.ADD(KEY:'PK', DATA:13);
		TYP.ADD(KEY:'FI', DATA:14);
		TYP.ADD(KEY:'HP', DATA:15);
		TYP.ADD(KEY:'NS', DATA:16);
		TYP.ADD(KEY:'HL', DATA:17);
	END;
	ARRAY LON_TYP{19} SF SU PL SL CS CU D1 D2 D3 D4 D5 D6 PK FI HP NS HL SUB UNSUB(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) ;
	RETAIN SF SU PL SL CS CU D1 D2 D3 D4 D5 D6 PK FI HP NS HL SUB UNSUB; 
	IF FIRST.CLUID THEN DO I = 1 TO 19;
		LON_TYP(I) = 0;
	END;
	TYP.FIND();
	LON_TYP(I) = AA_TOT_CON;
	IF I IN (1,5,7,11) THEN SUB = SUB + AA_TOT_CON;
	ELSE IF I OR AC_CON_UND_LON_TYP IN ('GB','D7') THEN UNSUB = UNSUB + AA_TOT_CON;
	IF LAST.CLUID THEN OUTPUT;
RUN;

/***************************************************************************************
* TRANSPOSITION MACRO FOR DEFERMENTS AND REFERENECES
****************************************************************************************/
%MACRO TRSP_RS(DSI,PFIX,NEWCOL,BYVAR,DS_NEW);
PROC TRANSPOSE DATA=&DSI OUT=&PFIX._&NEWCOL(DROP=_NAME_ _LABEL_) PREFIX=&NEWCOL._;
	VAR &NEWCOL;
	BY &BYVAR;
RUN;
DATA &DS_NEW;
	MERGE &DS_NEW &PFIX._&NEWCOL ;
	BY &BYVAR;
RUN;
PROC DATASETS;
	DELETE &PFIX._&NEWCOL ;
QUIT;
%MEND TRSP_RS;

/***************************************************************************************
* INTEREST RATE PROCESSING
****************************************************************************************/
PROC SQL;
CREATE TABLE INTR_DATA AS
	SELECT DISTINCT 
		ITRData.CLUID,
		ITRData.RATE FORMAT = 8.3
	FROM 
	(
		SELECT DISTINCT 
			R1.CLUID,
			C.IRATE AS RATE 
		FROM 
			REHB_1 R1
			INNER JOIN DISB D
				ON R1.CLUID = D.CLUID
			INNER JOIN PREG_CAT C
				ON R1.AC_LON_TYP = C.AC_LON_TYP
		WHERE
			D.AD_DISB_1 BETWEEN C.BEG_DT AND C.END_DT

		UNION

		SELECT DISTINCT 
			R1.CLUID,
			CASE WHEN R1.AC_LON_TYP ^= 'CL' 
				THEN RG02.RATE	
				ELSE COALESCE(R1.AR_CON_ITR,RG02.RATE)
			END AS RATE
		FROM 
			REHB_1 R1
			LEFT JOIN RG02 RG02
				ON R1.PF_RGL_CAT = RG02.PF_RGL_CAT 
				AND R1.LD_TRX_EFF BETWEEN RG02.BEG_DT AND RG02.END_DT
	) ITRData
	WHERE
		ITRData.RATE ^= .
;
QUIT;
/***************************************************************************************
* ORIGINAL INTEREST RATE PROCESSING
****************************************************************************************/
PROC SQL;
CREATE TABLE ORG_INTR_DATA AS
	SELECT DISTINCT 
		ORGInt.CLUID,
		ORGInt.ORG_INT_RATE FORMAT = 8.3
	FROM 
	(
		SELECT DISTINCT 
			R1.CLUID,
			R1.LR_ITR AS ORG_INT_RATE 
		FROM
			REHB_1 R1
			INNER JOIN DISB D
				ON R1.CLUID = D.CLUID
		WHERE 
			D.AD_DISB_1 BETWEEN '15dec1968'd AND '03oct1980'd
			AND R1.AX_STU_ENR_BEG_CYM < '198101'
			AND R1.AC_ORG_INT_TYP = 'F'
			AND R1.LR_ITR = 7

		UNION

		SELECT DISTINCT 
			R1.CLUID,
			R1.LR_ITR AS ORG_INT_RATE 
		FROM 
			REHB_1 R1
			INNER JOIN DISB D
				ON R1.CLUID = D.CLUID
		WHERE 
			D.AD_DISB_1 BETWEEN '03oct1980'd AND '13sep1983'd
			AND R1.AX_STU_ENR_BEG_CYM < '198101'
			AND R1.AC_ORG_INT_TYP = 'F'
			AND R1.LR_ITR = 9

		UNION
		
		SELECT DISTINCT 
			R1.CLUID,
			R1.LR_ITR AS ORG_INT_RATE 
		FROM 
			REHB_1 R1
			INNER JOIN DISB D
				ON R1.CLUID = D.CLUID
		WHERE 
			D.AD_DISB_1 BETWEEN '13sep1983'd AND '01jul1988'd
			AND R1.AC_ORG_INT_TYP = 'F'
			AND R1.LR_ITR = 8
			AND 
			(
				R1.AX_STU_ENR_BEG_CYM < '198807'
				OR R1.BF_SSN IN (SELECT COALESCE(BF_SSN,'000000000') FROM MULT_LOANS WHERE COUNTED = 1)
			)
	) ORGInt
;
QUIT;

PROC SORT DATA=REHB_1; BY CLUID; RUN;
PROC SORT DATA=INTR_DATA; BY CLUID; RUN; 
PROC SORT DATA=ORG_INTR_DATA; BY CLUID; RUN;
DATA REHB_1;
	MERGE REHB_1 INTR_DATA ORG_INTR_DATA;
	BY CLUID;
RUN;

/***************************************************************************************
* ONELINK DEFERMENT PROCESSING
****************************************************************************************/
PROC SORT DATA=OL_DEFR;
BY OL_DEFR_SSN AC_LON_STA_REA AD_DFR_END;
RUN;

DATA OL_DEFR(KEEP=OL_DEFR_SSN AC_LON_STA_REA_1-AC_LON_STA_REA_&MAX_DF
	AD_DFR_BEG_1-AD_DFR_BEG_&MAX_DF
	AD_DFR_END_1-AD_DFR_END_&MAX_DF);
	SET OL_DEFR;
	BY OL_DEFR_SSN AC_LON_STA_REA AD_DFR_END;
	ARRAY AC_LON_STA_REA_{&MAX_DF} $;
	ARRAY AD_DFR_BEG_{&MAX_DF};
	ARRAY AD_DFR_END_{&MAX_DF};
	RETAIN AC_LON_STA_REA_1-AC_LON_STA_REA_&MAX_DF
		AD_DFR_BEG_1-AD_DFR_BEG_&MAX_DF
		AD_DFR_END_1-AD_DFR_END_&MAX_DF A;

	IF FIRST.OL_DEFR_SSN THEN DO;
		DO A = 2 TO DIM(AD_DFR_BEG_);
			AC_LON_STA_REA_(A) = ''	;
			AD_DFR_BEG_(A) = . ;
			AD_DFR_END_(A) = . ;
		END;
		A=1;
	END;

	IF FIRST.AD_DFR_END AND A < &MAX_DF + 1 THEN DO;
		AC_LON_STA_REA_(A) = AC_LON_STA_REA	;
		AD_DFR_BEG_(A) = AD_DFR_BEG ;
		AD_DFR_END_(A) = AD_DFR_END	;
		A = A+1;
	END;

	IF LAST.OL_DEFR_SSN THEN OUTPUT;
RUN;


/***************************************************************************************
* COMPASS DEFERMENT PROCESSING 
****************************************************************************************/
PROC SORT DATA=CO_DEFR;
	BY CO_DEFR_SSN LC_DFR_TYP LD_DFR_BEG LD_DFR_END;
RUN;

DATA CO_DEFR;
	SET CO_DEFR;
	BY CO_DEFR_SSN LC_DFR_TYP LD_DFR_BEG LD_DFR_END;
	IF FIRST.LD_DFR_END THEN OUTPUT;
RUN;

PROC SORT DATA=CO_DEFR NODUPKEY; BY CO_DEFR_SSN LD_DFR_BEG LD_DFR_END LC_DFR_TYP; RUN;
PROC SORT DATA=CO_DEFR OUT=CO_DEFR_LINE (KEEP=CO_DEFR_SSN) NODUPKEY; BY CO_DEFR_SSN; RUN;

%TRSP_RS(CO_DEFR,DEF,LC_DFR_TYP,CO_DEFR_SSN,CO_DEFR_LINE);
%TRSP_RS(CO_DEFR,DEF,LD_DFR_BEG,CO_DEFR_SSN,CO_DEFR_LINE);
%TRSP_RS(CO_DEFR,DEF,LD_DFR_END,CO_DEFR_SSN,CO_DEFR_LINE);
%TRSP_RS(CO_DEFR,DEF,LF_DOE_SCL_DFR,CO_DEFR_SSN,CO_DEFR_LINE);
%TRSP_RS(CO_DEFR,DEF,LD_DFR_INF_CER,CO_DEFR_SSN,CO_DEFR_LINE);
/**********************************************
* MERGE MOST OF THE DATA 
***********************************************/
PROC SQL;
CREATE TABLE REHABM (DROP=OL_DEFR_SSN CO_DEFR_SSN) AS 
	SELECT DISTINCT 
		R1.*,
		DISBS.*,
		UCONSOL.*,
		Refs.REF_IND,
		Pmts.ARPA,
		OLDef.*,
		CDef.*,
		CASE WHEN R1.AC_LON_TYP = 'CL' AND UCONSOL.PL + UCONSOL.D3 + UCONSOL.D4 + UCONSOL.PK > 0 
			THEN 'N'
			ELSE ' '
		END AS IBR_ELIG_IND 
	FROM 
		REHB_1 R1
		LEFT JOIN DISB DISBS
			ON R1.CLUID = DISBS.CLUID
		LEFT JOIN CONDTL UCONSOL
			ON R1.CLUID = UCONSOL.CLUID
		LEFT JOIN 
		(
			SELECT 
				BF_SSN,
				COUNT(*) AS COUNT,
				'X' AS REF_IND
			FROM 
				REFS
			GROUP BY 
				BF_SSN
			HAVING 
				COUNT(*) > 2
		) Refs
			ON R1.BF_SSN = Refs.BF_SSN
		LEFT JOIN OL_DEFR OLDef
			ON R1.BF_SSN = OLDef.OL_DEFR_SSN
		LEFT JOIN CO_DEFR_LINE CDef
			ON R1.BF_SSN = CDef.CO_DEFR_SSN
		LEFT JOIN BRPMTS Pmts
			ON R1.CLUID = Pmts.CLUID
;
QUIT;
/***************************************************************************************
* LENDER ASSIGNMENT PROCESSING
****************************************************************************************/
PROC SQL;
CREATE TABLE LAPROC AS
	SELECT DISTINCT 
		Rehab.BF_SSN,
		'X' AS NELIND
	FROM 
		REHABM Rehab
		INNER JOIN LAP L	
			ON Rehab.BF_SSN = L.DF_PRS_ID_BR
	WHERE 
		L.CLUID NOT IN (SELECT DISTINCT CLUID FROM REHABM)
;
QUIT;

PROC SORT DATA=REHABM; BY BF_SSN; RUN;
PROC SORT DATA=LAPROC; BY BF_SSN; RUN;

DATA REHABM;
	MERGE REHABM LAPROC;
	BY BF_SSN;
	IF NELIND = 'X' THEN RH_LNDR = '826717';
	ELSE DO;
		RH_LNDR = '828476';	
		BONDID = BOND_ID;
		END;
RUN;
/***************************************************************************************
* CALCULATE AA_TOT_EDU_DET_PNT IF NECESSARY
****************************************************************************************/
PROC SQL;
CREATE TABLE DIMSUM AS 
	SELECT 
		BF_SSN,
		SUM(RehabSum.D1 + RehabSum.D2 + RehabSum.D3 + RehabSum.D4) AS GTOT
	FROM 
	(
		SELECT 
			BF_SSN,
			SUM(COALESCE(AA_DISB_1,0)) AS D1,
			SUM(COALESCE(AA_DISB_2,0)) AS D2,
			SUM(COALESCE(AA_DISB_3,0)) AS D3,
			SUM(COALESCE(AA_DISB_4,0)) AS D4
		FROM 
			REHABM
		GROUP BY 
			BF_SSN
	) RehabSum
	GROUP BY
		BF_SSN
;
QUIT;

PROC SORT DATA=DIMSUM; BY BF_SSN; RUN;
PROC SORT DATA=REHABM; BY BF_SSN; RUN;

DATA REHABM (DROP=GTOT);
	MERGE REHABM DIMSUM;
	BY BF_SSN;
	IF AA_TOT_EDU_DET_PNT = . 
		THEN AA_TOT_EDU_DET_PNT = GTOT;
	ELSE AA_TOT_EDU_DET_PNT = AA_TOT_EDU_DET_PNT;
RUN;

/***************************************************************************************
* REFERENCE PROCESSING
****************************************************************************************
* GET INFO FOR TWO (ONLY) REFERENCES ON ONE LINE PER BORROWER
****************************************************************************************/
PROC SORT DATA=REFS; BY BF_SSN DESCENDING BI_VLD_ADR BI_DOM_PHN_VLD; RUN;
PROC SORT DATA=REFS OUT=REF_LINE (KEEP=BF_SSN) NODUPKEY; BY BF_SSN; RUN;

%TRSP_RS(REFS,REF,BM_RFR_1,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BM_RFR_MID,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BM_RFR_LST,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BX_RFR_STR_ADR_1,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BX_RFR_STR_ADR_2,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BM_RFR_CT,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BC_RFR_ST,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BF_RFR_ZIP,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BM_RFR_FGN_CNY,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BI_VLD_ADR,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BN_RFR_DOM_PHN,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BI_DOM_PHN_VLD,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BN_RFR_ALT_PHN,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BI_ALT_PHN_VLD,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BC_RFR_REL_BR,BF_SSN,REF_LINE);

/*TIE INFORMATION TO ONE LINE FOR BORROWER*/
PROC SORT DATA=REHABM; BY BF_SSN CLUID; RUN;

DATA REHABM REHABM_TEMP;
	SET REHABM;
	BY BF_SSN;
	IF FIRST.BF_SSN 
		THEN OUTPUT REHABM_TEMP;
	ELSE DO; 
		REF_IND = '';
		OUTPUT REHABM;
		END;
RUN;

PROC SORT DATA=REHABM_TEMP; BY BF_SSN; RUN;
PROC SORT DATA=REF_LINE; BY BF_SSN; RUN;

DATA REHABM_TEMP;
	MERGE REHABM_TEMP REF_LINE;
	BY BF_SSN ;
RUN;

DATA REHABM;
	SET REHABM REHABM_TEMP;
RUN;

PROC SORT DATA=REHABM; BY BF_SSN CLUID; RUN;
/*MERGE LENDER TO REFERNCES FOR LEGACY PROCESSING*/
PROC SORT DATA=REHABM OUT=REHAB_REF_MERGE(KEEP=BF_SSN RH_LNDR) NODUPKEY; BY BF_SSN RH_LNDR; RUN;
PROC SORT DATA=REFS; BY BF_SSN; RUN;

DATA REFS;
	MERGE REFS REHAB_REF_MERGE;
	BY BF_SSN ;
RUN;

/********************************************************
* LEGACY PROCESSING  
*********************************************************/
DATA REHABM;
	SET REHABM;
		NAME = TRIM(DM_PRS_LST)||', '||TRIM(DM_PRS_1);
		NAME2 = TRIM(DM_PRS_1)||' '||TRIM(DM_PRS_MID)||' '||TRIM(DM_PRS_LST);
		SSN = BF_SSN;
	IF AC_ORG_INT_TYP = '7' THEN RATE = 7.000;
	ELSE IF AC_ORG_INT_TYP = '8' THEN RATE = 8.000;
	ELSE IF AC_ORG_INT_TYP = '9' THEN RATE = 9.000; 
	ELSE IF AC_ORG_INT_TYP = 'A' AND PF_RGL_CAT = '' THEN RATE = 10.000;
	ELSE RATE = RATE;
	IF AC_LON_TYP = 'CL' THEN PR_SCH_GRC_DFR_ITR = AR_CON_ITR; 
RUN;

/*GET STUDENT AND ENDORSER INFO IF APPLICALBE*/
%MACRO DT_CONCAT(CRT_DT);
DATA REHABM (DROP=MONTH DAY YEAR);
	SET REHABM;
	IF LENGTH(LEFT(MONTH(&CRT_DT))) EQ 1 THEN MONTH = '0'||TRIM(LEFT(MONTH(&CRT_DT)));
	ELSE MONTH = TRIM(LEFT(MONTH(&CRT_DT)));
	IF LENGTH(LEFT(DAY(&CRT_DT))) EQ 1 THEN DAY = '0'||TRIM(LEFT(DAY(&CRT_DT)));
	ELSE DAY = TRIM(LEFT(DAY(&CRT_DT)));
	YEAR = TRIM(LEFT(YEAR(&CRT_DT)));
	CHAR_&CRT_DT = LEFT(TRIM(MONTH)||'/'||TRIM(DAY)||'/'||TRIM(YEAR));
	RUN;
%MEND DT_CONCAT;

%DT_CONCAT(EDSR_DD_BRT);
%DT_CONCAT(STU_DD_BRT);

%MACRO GET_DEMOS (PREFIX,SSN,FNAME,MNAME,LNAME,BDAY,BDAY_CHAR);
DATA REHABM (DROP=&BDAY_CHAR);
	SET REHABM;
	LENGTH &PREFIX._INFO $ 75;
	IF &SSN = ' ' THEN &PREFIX._INFO = 'NONE' ;

	ELSE IF &SSN NE ' ' AND &MNAME = ' ' 
	THEN &PREFIX._INFO = TRIM(&FNAME)||',,'||TRIM(&LNAME)||','||TRIM(&SSN)||','||&BDAY_CHAR ;

	ELSE IF &SSN NE ' ' AND &MNAME NE ' ' 
		THEN &PREFIX._INFO = TRIM(&FNAME)||','||TRIM(&MNAME)||','||TRIM(&LNAME)||','||TRIM(&SSN)||','||&BDAY_CHAR ;
RUN;
%MEND GET_DEMOS;

%GET_DEMOS(ENDR,EDSR_SSN,EDSR_DM_PRS_1,EDSR_DM_PRS_MID,EDSR_DM_PRS_LST,EDSR_DD_BRT,CHAR_EDSR_DD_BRT);
%GET_DEMOS(STU,STU_SSN,STU_DM_PRS_1,STU_DM_PRS_MID,STU_DM_PRS_LST,STU_DD_BRT,CHAR_STU_DD_BRT);

DATA REHABM;
	SET REHABM;
	IF STU_SSN = BF_SSN THEN STU_INFO = 'NONE';
	ELSE STU_INFO = STU_INFO;
RUN;

/********************************************************************
* CONSOLIDATION PROCESSING STARTS HERE
*********************************************************************
* SET UNDERLYING CONSOL SUB AND UNSUB INDICATOR
*********************************************************************/
PROC SQL;
CREATE TABLE REHABMT AS 
	SELECT DISTINCT 
		Rehab.*,
		CASE WHEN CNSL.UNSUB AND CNSL.SUB THEN 2 
			 WHEN CNSL.UNSUB OR CNSL.SUB THEN 1
		END AS ULCT,
		CASE WHEN CNSL.UNSUB THEN 'UNSUB' END AS UNSUB_LN
	FROM 
		REHABM Rehab
		LEFT JOIN CNSL CNSL
			ON Rehab.CLUID = CNSL.CLUID
;
QUIT;

/*CLEAN UP DATA SETS*/
DATA REHABM; SET REHABMT; RUN;
PROC DATASETS; DELETE REHABMT; QUIT;

/*IF LOAN IS CONSOL WITH BOTH SUB AND UNSUB AMOUNTS THEN PROCESS OTHERWISE PUT BACK IN REPUR DATA SET*/
DATA REHABM CNSLA(DROP=SUBSIDY AA_DISB_1);
SET REHABM;
IF AC_LON_TYP = 'CL' THEN DO;
	IF AD_APL_RCV >= '13NOV1997'D & ULCT = 2 THEN 
		OUTPUT CNSLA;
	ELSE DO;
		IF AD_APL_RCV < '13NOV1997'D | UNSUB_LN ^= '' THEN 
			SUBSIDY = 'N';
		ELSE 
			SUBSIDY = 'Y';
		OUTPUT REHABM;
	END;
END;	
ELSE 
	OUTPUT REHABM;
RUN;

DATA CNSL(KEEP=CLUID CNSL_TYP AA_TOT_CON);
SET CNSL;
IF UNSUB THEN DO;
	CNSL_TYP = 'UNSUB';
	AA_TOT_CON = UNSUB;
	OUTPUT;
END;
IF SUB THEN DO;
	CNSL_TYP = 'SUB';
	AA_TOT_CON = SUB;
	OUTPUT;
END;
RUN;

/*CALCULATE SUB AND UNSUB PERCENTAGE OF GUARANTY AMOUNT*/
PROC SQL;
CREATE TABLE CNSLB AS
	SELECT DISTINCT
		CNSLA.*,
		CNSL.CNSL_TYP,
		CNSL.AA_TOT_CON,
		ROUND(CNSL.AA_TOT_CON / CNSLA.AA_GTE_LON_AMT,.01) AS PCAL
	FROM 
		CNSLA CNSLA
		INNER JOIN CNSL CNSL
			ON CNSLA.CLUID = CNSL.CLUID
;
QUIT;

/*SORT AND CALCULATE VALUES*/
PROC SORT DATA=CNSLB; BY CLUID CNSL_TYP;RUN;

DATA CNSLB (DROP=TEMP_VAR CNSL_TYP AA_TOT_CON PCAL);
	SET CNSLB;
	BY CLUID;
	RETAIN TEMP_VAR;
		AA_DISB_1 = AA_TOT_CON;
		AA_GTE_LON_AMT = AA_TOT_CON;

	IF FIRST.CLUID THEN DO;
		SUBSIDY = 'Y';

		TEMP_VAR = ROUND(LA_TRX*PCAL,.01);
		LA_TRX = TEMP_VAR;
	END;
	ELSE DO;
		SUBSIDY = 'N';
		AF_APL_ID_SFX = '02';
		SUBSTR(CLUID,18,2) = AF_APL_ID_SFX;

		TEMP_VAR = ROUND(LA_TRX-TEMP_VAR,.01);
		LA_TRX = TEMP_VAR;
	END;
RUN;

/*PUT EVERYTHING BACK IN ONE DATASET*/
DATA REHABM; SET CNSLB REHABM; RUN;

/********************************************************************
* CREATE BATCHES AND BATCH DATA
*********************************************************************/
DATA BATCH_A; SET REHABM; RUN;

PROC SORT DATA=BATCH_A; BY SSN CLUID; RUN;

DATA BATCH_A;
	SET BATCH_A;
	BY SSN CLUID;
	RETAIN SUB_BAT_ID;
	IF FIRST.SSN THEN DO;
		IF SUB_BAT_ID = 5 THEN SUB_BAT_ID = 1;
			ELSE SUB_BAT_ID+1;
		END;
RUN;

PROC SORT DATA=BATCH_A(KEEP=SSN CLUID SUB_BAT_ID LA_TRX); BY SSN CLUID SUB_BAT_ID; RUN;

DATA BATCH_A (KEEP=SSN CLUID SUB_BAT_ID BAT_ID LA_TRX);
	SET BATCH_A;
	BY SUB_BAT_ID NOTSORTED;
	RETAIN BAT_ID;
	IF FIRST.SUB_BAT_ID AND SUB_BAT_ID = 1 
		THEN BAT_ID+1;
	ELSE BAT_ID=BAT_ID;
RUN;

PROC SQL;
CREATE TABLE BATCH_B AS 
	SELECT 
		BAT_ID,
		COUNT(DISTINCT SSN) AS BAT_BR_CT,
		COUNT(DISTINCT CLUID) AS BAT_LN_CT,
		SUM(LA_TRX) AS BAT_TOT_SUM
	FROM 
		BATCH_A
	GROUP BY 
		BAT_ID
	;
QUIT;

PROC SORT DATA=BATCH_A; BY BAT_ID; RUN;
PROC SORT DATA=BATCH_B; BY BAT_ID; RUN;

DATA BATCH_A (DROP=SUB_BAT_ID LA_TRX);
	MERGE BATCH_A BATCH_B;
	BY BAT_ID;
RUN;

PROC SORT DATA=BATCH_A; BY SSN CLUID; RUN;
PROC SORT DATA=REHABM; BY SSN CLUID; RUN;

DATA REHABM;
	MERGE REHABM BATCH_A;
	BY SSN CLUID;
RUN;

DATA _NULL_;
	EFFDT = PUT(TODAY()-1, MMDDYY10.);
	CALL SYMPUT('EFFDATE',EFFDT);
RUN;

/********************************************************************
* FILE AND REPORT CREATION
*********************************************************************
* UHEAA FILE 
*********************************************************************/
DATA _NULL_;
SET  WORK.REHABM ;
FILE REPORT8 DELIMITER=',' DSD DROPOVER LRECL=32767;
	FORMAT DD_BRT AD_PRC AD_IST_TRM_BEG AD_IST_TRM_END AD_BR_SIG AD_DFR_BEG 
		AD_DFR_END AD_APL_RCV LD_LFT_SCL STU_DD_BRT	EDSR_DD_BRT	LD_ENR_CER
		LD_LDR_NTF AD_DISB_1-AD_DISB_4 CD_DISB_1-CD_DISB_4 LD_TRX_EFF
		AD_DFR_BEG_1-AD_DFR_BEG_&MAX_DF AD_DFR_END_1-AD_DFR_END_&MAX_DF
		LD_DFR_BEG_1-LD_DFR_BEG_&MAX_DF	LD_DFR_END_1-LD_DFR_END_&MAX_DF
		LD_DFR_INF_CER_1-LD_DFR_INF_CER_&MAX_DF	LD_ENR_CER_1-LD_ENR_CER_&MAX_DF
  		LD_IBR_25Y_FGV_BEG LD_IBR_RPD_SR LD_RHB MMDDYY10. ;
	FORMAT AA_GTE_LON_AMT 10.2 ;
	FORMAT AR_CON_ITR PR_RPD_FOR_ITR RATE ORG_INT_RATE 8.3 ;
	FORMAT AA_DISB_1 BEST12. ;
	FORMAT AN_DISB_1 6. ;
	FORMAT AA_DISB_2 BEST12. ;
	FORMAT AN_DISB_2 6. ;
	FORMAT AA_DISB_3 BEST12. ;
	FORMAT AN_DISB_3 6. ;
	FORMAT AA_DISB_4 BEST12. ;
	FORMAT AN_DISB_4 6. ;
	FORMAT ORG_1 BEST12. ;
	FORMAT ORG_2 BEST12. ;
	FORMAT ORG_3 BEST12. ;
	FORMAT ORG_4 BEST12. ;
	FORMAT CA_DISB_1 BEST12.;
	FORMAT CA_DISB_2 BEST12.;
	FORMAT CA_DISB_3 BEST12.;
	FORMAT CA_DISB_4 BEST12.;
	FORMAT GTE_1 BEST12.;
	FORMAT GTE_2 BEST12.;
	FORMAT GTE_3 BEST12.;
	FORMAT GTE_4 BEST12.;
	FORMAT LA_TRX BEST12.;
	FORMAT AA_TOT_EDU_DET_PNT ARPA 14.2 ;
	FORMAT BAT_ID BEST12.;
	FORMAT BAT_BR_CT BEST12.;
	FORMAT BAT_LN_CT BEST12.;
	FORMAT BAT_TOT_SUM BEST12.;
	FORMAT LA_IBR_STD_STD_PAY BEST12. ;
	FORMAT LN_IBR_QLF_FGV_MTH BEST12. ;
IF _N_ = 1 THEN        /* WRITE COLUMN NAMES */
 DO;
   PUT
	'BF_SSN' ','
	'DM_PRS_1' ','
	'DM_PRS_MID' ','
	'DM_PRS_LST' ','
	'DD_BRT' ','
	'DX_STR_ADR_1' ','
	'DX_STR_ADR_2' ','
	'DM_CT' ','
	'DC_DOM_ST' ','
	'DF_ZIP' ','
	'DM_FGN_CNY' ','
	'DI_VLD_ADR' ','
	'DN_PHN' ','
	'DI_PHN_VLD' ','
	'DN_ALT_PHN' ','
	'DI_ALT_PHN_VLD' ','
	'AC_LON_TYP' ','
	'SUBSIDY' ','
	'AD_PRC' ','
	'AF_ORG_APL_OPS_LDR' ','
	'AF_APL_ID' ','
	'AF_APL_ID_SFX' ','
	'AD_IST_TRM_BEG' ','
	'AD_IST_TRM_END' ','
	'AA_GTE_LON_AMT' ','
	'AF_APL_OPS_SCL' ','
	'AD_BR_SIG' ','
	'LD_LFT_SCL' ','
	'PR_RPD_FOR_ITR' ','
	'LC_INT_TYP' ','
	'LD_TRX_EFF' ','
	'LA_TRX' ','
	'LD_RHB' ','
	'LA_PRI' ','
	'LA_INT' ','
	'IF_OPS_SCL_RPT' ','
	'LC_STU_ENR_TYP' ','
	'LD_ENR_CER' ','
	'LD_LDR_NTF' ','
	'AR_CON_ITR' ','
	'AD_APL_RCV' ','
	'AC_STU_DFR_REQ' ','
	'AN_DISB_1' ','
	'AC_DISB_1' ','
	'AD_DISB_1' ',' 
	'AA_DISB_1' ','
	'ORG_1' ','
	'CD_DISB_1' ','
	'CA_DISB_1' ','
	'GTE_1' ','
	'AN_DISB_2' ','
	'AC_DISB_2' ','
	'AD_DISB_2' ',' 
	'AA_DISB_2' ','
	'ORG_2' ','
	'CD_DISB_2' ','
	'CA_DISB_2' ','
	'GTE_2' ','
	'AN_DISB_3' ','
	'AC_DISB_3' ','
	'AD_DISB_3' ',' 
	'AA_DISB_3' ','
	'ORG_3' ','
	'CD_DISB_3' ','
	'CA_DISB_3' ','
	'GTE_3' ','
	'AN_DISB_4' ','
	'AC_DISB_4' ','
	'AD_DISB_4' ',' 
	'AA_DISB_4' ','
	'ORG_4' ','
	'CD_DISB_4' ','
	'CA_DISB_4' ','
	'GTE_4' ','
	'AA_TOT_EDU_DET_PNT' ',' @;
	DO I=1 TO &MAX_DF;PUT 'LC_DFR_TYP' I @;END;
	DO I=1 TO &MAX_DF;PUT 'LD_DFR_BEG' I @;END;
	DO I=1 TO &MAX_DF;PUT 'LD_DFR_END' I @;END;
	DO I=1 TO &MAX_DF;PUT 'LF_DOE_SCL_DFR' I @;END;
	DO I=1 TO &MAX_DF;PUT 'LD_DFR_INF_CER' I @;END;
	DO I=1 TO &MAX_DF;PUT 'AC_LON_STA_REA' I @;END;
	DO I=1 TO &MAX_DF;PUT 'AD_DFR_BEG' I @;END;
	DO I=1 TO &MAX_DF;PUT 'AD_DFR_END' I  @;END;
	DO I=1 TO &MAX_DF;PUT 'IF_OPS_SCL_RPT' I  @;END;
	DO I=1 TO &MAX_DF;PUT 'LD_ENR_CER' I  @;END;
	PUT
	'STU_SSN' ','
	'STU_DM_PRS_1' ','
	'STU_DM_PRS_MID' ','
	'STU_DM_PRS_LST' ','
	'STU_DD_BRT' ','
	'STU_DX_STR_ADR_1' ','
	'STU_DX_STR_ADR_2' ','
	'STU_DM_CT' ','
	'STU_DC_DOM_ST' ','
	'STU_DF_ZIP' ','
	'STU_DM_FGN_CNY' ','
	'STU_DI_VLD_ADR' ','
	'STU_DN_PHN' ','
	'STU_DI_PHN_VLD' ','
	'STU_DN_ALT_PHN' ','
	'STU_DI_ALT_PHN_VLD' ','
	'EDSR_SSN' ','
	'EDSR_DM_PRS_1' ','
	'EDSR_DM_PRS_MID' ','
	'EDSR_DM_PRS_LST' ','
	'EDSR_DD_BRT' ','
	'EDSR_DX_STR_ADR_1' ','
	'EDSR_DX_STR_ADR_2' ','
	'EDSR_DM_CT' ','
	'EDSR_DC_DOM_ST' ','
	'EDSR_DF_ZIP' ','
	'EDSR_DM_FGN_CNY' ','
	'EDSR_DI_VLD_ADR' ','
	'EDSR_DN_PHN' ','
	'EDSR_DI_PHN_VLD' ','
	'EDSR_DN_ALT_PHN' ','
	'EDSR_DI_ALT_PHN_VLD' ','
	'AC_EDS_TYP' ','
	'REF_IND' ','
	'BM_RFR_1_1' ','
	'BM_RFR_MID_1' ','
	'BM_RFR_LST_1' ','
	'BX_RFR_STR_ADR_1_1' ','
	'BX_RFR_STR_ADR_2_1' ','
	'BM_RFR_CT_1' ','
	'BC_RFR_ST_1' ','
	'BF_RFR_ZIP_1' ','
	'BM_RFR_FGN_CNY_1' ','
	'BI_VLD_ADR_1' ','
	'BN_RFR_DOM_PHN_1' ','
	'BI_DOM_PHN_VLD_1' ','
	'BN_RFR_ALT_PHN_1' ','
	'BI_ALT_PHN_VLD_1' ','
	'BC_RFR_REL_BR_1' ','
	'BM_RFR_1_2' ','
	'BM_RFR_MID_2' ','
	'BM_RFR_LST_2' ','
	'BX_RFR_STR_ADR_1_2' ','
	'BX_RFR_STR_ADR_2_2' ','
	'BM_RFR_CT_2' ','
	'BC_RFR_ST_2' ','
	'BF_RFR_ZIP_2' ','
	'BM_RFR_FGN_CNY_2' ','
	'BI_VLD_ADR_2' ','
	'BN_RFR_DOM_PHN_2' ','
	'BI_DOM_PHN_VLD_2' ','
	'BN_RFR_ALT_PHN_2' ','
	'BI_ALT_PHN_VLD_2' ','
	'BC_RFR_REL_BR_2' ','
	'BONDID' ','
	'AVE_REHB_PAY_AMT' ','
	'BAT_ID' ','
	'BAT_BR_CT' ','
	'BAT_LN_CT' ','
	'BAT_TOT_SUM' ','
	'BR_ELIG_IND' ','
	'LD_IBR_25Y_FGV_BEG' ','
	'LD_IBR_RPD_SR' ','
	'LA_IBR_STD_STD_PAY' ','
	'LN_IBR_QLF_FGV_MTH' ','
	'ORG_INT_RATE' ','
	'BA_STD_PAY' ','
	'LA_PAY_XPC' ','
	'BL_LA_PAY_XPC' ','
	'PRI_COST' 
;
END;
DO;
	PUT BF_SSN $ @;
	PUT DM_PRS_1 $ @;
	PUT DM_PRS_MID $ @;
	PUT DM_PRS_LST $ @;
	PUT DD_BRT @;
	PUT DX_STR_ADR_1 $ @;
	PUT DX_STR_ADR_2 $ @;
	PUT DM_CT $ @;
	PUT DC_DOM_ST $ @;
	PUT DF_ZIP $ @;
	PUT DM_FGN_CNY $ @;
	PUT DI_VLD_ADR $ @;
	PUT DN_PHN $ @;
	PUT DI_PHN_VLD $ @;
	PUT DN_ALT_PHN $ @;
	PUT DI_ALT_PHN_VLD $ @;
	PUT AC_LON_TYP $ @;
	PUT SUBSIDY $ @;
	PUT AD_PRC @;
	PUT AF_ORG_APL_OPS_LDR $ @;
	PUT AF_APL_ID $ @;
	PUT AF_APL_ID_SFX $ @;
	PUT AD_IST_TRM_BEG @;
	PUT AD_IST_TRM_END @;
	PUT AA_GTE_LON_AMT @;
	PUT AF_APL_OPS_SCL $ @;
	PUT AD_BR_SIG @;
	PUT LD_LFT_SCL @;
	PUT RATE @;
	PUT LC_INT_TYP $ @;
	PUT LD_TRX_EFF @;
	PUT LA_TRX @;
	PUT LD_RHB @;
	PUT LA_PRI @;
	PUT LA_INT @;
	PUT IF_OPS_SCL_RPT @;
	PUT LC_STU_ENR_TYP $ @;
	PUT LD_ENR_CER @;
	PUT LD_LDR_NTF @;
	PUT AR_CON_ITR @;
	PUT AD_APL_RCV @;
	PUT AC_STU_DFR_REQ $ @;
/*DISBURSEMENT INFO*/
	PUT AN_DISB_1 @;
	PUT AC_DISB_1 @;
	PUT AD_DISB_1 @; 
	PUT AA_DISB_1 @;
	PUT ORG_1 @;
	PUT CD_DISB_1 @;
	PUT CA_DISB_1 @;
	PUT GTE_1 @;
	PUT AN_DISB_2 @;
	PUT AC_DISB_2 @;
	PUT AD_DISB_2 @; 
	PUT AA_DISB_2 @;
	PUT ORG_2 @;
	PUT CD_DISB_2 @;
	PUT CA_DISB_2 @;
	PUT GTE_2 @;
	PUT AN_DISB_3 @;
	PUT AC_DISB_3 @;
	PUT AD_DISB_3 @; 
	PUT AA_DISB_3 @;
	PUT ORG_3 @;
	PUT CD_DISB_3 @;
	PUT CA_DISB_3 @;
	PUT GTE_3 @;
	PUT AN_DISB_4 @;
	PUT AC_DISB_4 @;
	PUT AD_DISB_4 @; 
	PUT AA_DISB_4 @;
	PUT ORG_4 @;
	PUT CD_DISB_4 @;
	PUT CA_DISB_4 @;
	PUT GTE_4 @;
	PUT AA_TOT_EDU_DET_PNT @;
/*DEFERMENT INFO*/
	PUT LC_DFR_TYP_1-LC_DFR_TYP_&MAX_DF $ @;
	PUT LD_DFR_BEG_1-LD_DFR_BEG_&MAX_DF @;
	PUT LD_DFR_END_1-LD_DFR_END_&MAX_DF @;
	PUT LF_DOE_SCL_DFR_1-LF_DOE_SCL_DFR_&MAX_DF $ @;
	PUT LD_DFR_INF_CER_1-LD_DFR_INF_CER_&MAX_DF @;
	PUT AC_LON_STA_REA_1-AC_LON_STA_REA_&MAX_DF @;
	PUT AD_DFR_BEG_1-AD_DFR_BEG_&MAX_DF @;
	PUT AD_DFR_END_1-AD_DFR_END_&MAX_DF @;
/*ENROLLMENT INFO*/
	PUT IF_OPS_SCL_RPT_1-IF_OPS_SCL_RPT_&MAX_DF $ @;
	PUT LD_ENR_CER_1-LD_ENR_CER_&MAX_DF @;
/*STUDENT INFO*/
	PUT STU_SSN $ @;
	PUT STU_DM_PRS_1 $ @;
	PUT STU_DM_PRS_MID $ @;
	PUT STU_DM_PRS_LST $ @;
	PUT STU_DD_BRT @;
	PUT STU_DX_STR_ADR_1 $ @;
	PUT STU_DX_STR_ADR_2 $ @;
	PUT STU_DM_CT $ @;
	PUT STU_DC_DOM_ST $ @;
	PUT STU_DF_ZIP $ @;
	PUT STU_DM_FGN_CNY $ @;
	PUT STU_DI_VLD_ADR $ @;
	PUT STU_DN_PHN $ @;
	PUT STU_DI_PHN_VLD $ @;
	PUT STU_DN_ALT_PHN $ @;
	PUT STU_DI_ALT_PHN_VLD $ @;
/*ENDORSER INFO*/
	PUT EDSR_SSN $ @;
	PUT EDSR_DM_PRS_1 $ @;
	PUT EDSR_DM_PRS_MID $ @;
	PUT EDSR_DM_PRS_LST $ @;
	PUT EDSR_DD_BRT @;
	PUT EDSR_DX_STR_ADR_1 $ @;
	PUT EDSR_DX_STR_ADR_2 $ @;
	PUT EDSR_DM_CT $ @;
	PUT EDSR_DC_DOM_ST $ @;
	PUT EDSR_DF_ZIP $ @;
	PUT EDSR_DM_FGN_CNY $ @;
	PUT EDSR_DI_VLD_ADR $ @;
	PUT EDSR_DN_PHN $ @;
	PUT EDSR_DI_PHN_VLD $ @;
	PUT EDSR_DN_ALT_PHN $ @;
	PUT EDSR_DI_ALT_PHN_VLD $ @;
	PUT AC_EDS_TYP $ @;
/*REFERENCE INFO*/
	PUT REF_IND $ @;
	PUT BM_RFR_1_1 $ @;
	PUT BM_RFR_MID_1 $ @;
	PUT BM_RFR_LST_1 $ @;
	PUT BX_RFR_STR_ADR_1_1 $ @;
	PUT BX_RFR_STR_ADR_2_1 $ @;
	PUT BM_RFR_CT_1 $ @;
	PUT BC_RFR_ST_1 $ @;
	PUT BF_RFR_ZIP_1 $ @;
	PUT BM_RFR_FGN_CNY_1 $ @;
	PUT BI_VLD_ADR_1 $ @;
	PUT BN_RFR_DOM_PHN_1 $ @;
	PUT BI_DOM_PHN_VLD_1 $ @;
	PUT BN_RFR_ALT_PHN_1 $ @;
	PUT BI_ALT_PHN_VLD_1 $ @;
	PUT BC_RFR_REL_BR_1 $ @;
	PUT BM_RFR_1_2 $ @;
	PUT BM_RFR_MID_2 $ @;
	PUT BM_RFR_LST_2 $ @;
	PUT BX_RFR_STR_ADR_1_2 $ @;
	PUT BX_RFR_STR_ADR_2_2 $ @;
	PUT BM_RFR_CT_2 $ @;
	PUT BC_RFR_ST_2 $ @;
	PUT BF_RFR_ZIP_2 $ @;
	PUT BM_RFR_FGN_CNY_2 $ @;
	PUT BI_VLD_ADR_2 $ @;
	PUT BN_RFR_DOM_PHN_2 $ @;
	PUT BI_DOM_PHN_VLD_2 $ @;
	PUT BN_RFR_ALT_PHN_2 $ @;
	PUT BI_ALT_PHN_VLD_2 $ @;
	PUT BC_RFR_REL_BR_2 $ @;
	PUT BONDID $ @;
	PUT ARPA @;
/*BATCH INFO*/
	PUT BAT_ID @;
	PUT BAT_BR_CT @;
	PUT BAT_LN_CT @;
	PUT BAT_TOT_SUM @;
/*IBR INFO*/
	PUT IBR_ELIG_IND $ @;
	PUT LD_IBR_25Y_FGV_BEG @;
	PUT LD_IBR_RPD_SR @;
	PUT LA_IBR_STD_STD_PAY @;
	PUT LN_IBR_QLF_FGV_MTH @;
	PUT ORG_INT_RATE @;
	PUT BA_STD_PAY @;
	PUT LA_PAY_XPC @;
	PUT BL_LA_PAY_XPC @;
	PUT PRI_COST;
END;
RUN;


%MACRO LEG_REP(LDR_ID,REPA,REPB,REPC,REPD,REPE,REPF);
/*CREATE DATA SET AND MACRO VARIABLES FOR LEGACY FILE CREATION*/
DATA REHAB;
	SET REHABM;
WHERE RH_LNDR = "&LDR_ID";
RUN;
%LET BOND = 1999L;

/************************************************************************
* LEGACY FILE CREATION
*************************************************************************
* PRINT PROMISSORY NOTE PULL LIST 
*************************************************************************/
PROC PRINTTO PRINT=REPORT&REPA NEW; RUN;
OPTIONS PAGENO=1 LS=80;

PROC PRINT NOOBS SPLIT='/' DATA=REHAB;
	BY SSN NAME;
	VAR CLUID
		AD_DISB_1
		AA_GTE_LON_AMT
		;
	LABEL	CLUID = 'UNIQUE ID'
			AD_DISB_1 = 'DISBURSEMENT DATE'
			AA_GTE_LON_AMT = 'LOAN AMOUNT'	
			;
	FORMAT	AD_DISB_1 MMDDYY10.;
	TITLE1	' ';
	TITLE2	' ';
	TITLE3  'PROMISSORY NOTE PULL LIST';
	TITLE4  "FOR LOANS REHABILITATED EFFECTIVE &EFFDATE";
	FOOTNOTE "JOB = UTLWRH1     REPORT = ULWRH1.LWRH1R&REPA";
RUN;

PROC SORT DATA=REHAB; BY NAME; RUN;

/* PRINT FILE PULL LIST. */
PROC PRINTTO PRINT=REPORT&REPB NEW;RUN;
OPTIONS PAGENO=1 LS=80;

PROC PRINT NOOBS SPLIT='/' DATA=REHAB;
	BY NAME SSN;
	VAR CLUID
		AD_DISB_1
		AA_GTE_LON_AMT
		;
	LABEL	CLUID = 'UNIQUE ID'
			AD_DISB_1 = 'DISBURSEMENT DATE'
			AA_GTE_LON_AMT = 'LOAN AMOUNT'	
			;
	FORMAT	AD_DISB_1 MMDDYY10.;
	TITLE1	' ';
	TITLE2	' ';
	TITLE3  'FILE PULL LIST';
	TITLE4  "FOR LOANS REHABILITATED EFFECTIVE &EFFDATE";
	FOOTNOTE "JOB = UTLWRH1     REPORT = ULWRH1.LWRH1R&REPB";
RUN;

PROC SORT DATA=REHAB;
	BY AC_LON_TYP SSN;
RUN;
/* PRINT DATA DUMP REPORT TO FILE 'REPORT4'. */
DATA REHAB;
	SET REHAB;
	FILE REPORT&REPC PRINT;
	TITLE;
	PUT 'LOAN TYPE:' @14 AC_LON_TYP @21 'UNIQUE ID:' @33 CLUID @58 'SSN:' @64 BF_SSN
		/
		/'LAST:' @14 DM_PRS_LST  @46 'FIRST:' @54 DM_PRS_1 @68 'MI:' @72 DM_PRS_MID
		/'ADDRESS 1:' @14 DX_STR_ADR_1
		/'ADDRESS 2:' @14 DX_STR_ADR_2
		/'CITY:' @14 DM_CT @46 'STATE:' @54 DC_DOM_ST @59 'ZIP:' @64 DF_ZIP
		/'COND:' @14 DI_VLD_ADR @46 'COUNTRY:' @56 DM_FGN_CNY
		/'HOME PHONE:' @14 DN_PHN @29 'COND:' @36 DI_PHN_VLD
		/'ALT PHONE:' @14 DN_ALT_PHN @29 'COND:' @36 DI_ALT_PHN_VLD
		/'BIRTHDATE:' @14 DD_BRT MMDDYY8.
		/
		/'CURR PRINC BAL:' @20 LA_TRX DOLLAR13.2 
/*<2>	/'SCHOOL ID:'  @25 IF_OPS_SCL_RPT @38 'PRIOR SCHOOL:' @54 AF_APL_OPS_SCL*/
		/@38 'PRIOR SCHOOL:' @54 AF_APL_OPS_SCL
		/'LN PERIOD BEGIN:' @25 AD_IST_TRM_BEG MMDDYY8. @38 'LN PERIOD END:' @54 AD_IST_TRM_END MMDDYY8.
		/'INTEREST TYPE:' @25 AC_ORG_INT_TYP @38 'CURR INT RATE:' @54 RATE
		/
		/'GUAR DATE:' @25 AD_PRC MMDDYY8. @38 'SIGNED DATE:' @54 AD_BR_SIG MMDDYY8.
		/'NT AMT:' @20 AA_GTE_LON_AMT DOLLAR13.2
		/'COS/COM:' @25 AC_EDS_TYP @38 'REG CAT:' @54 PF_RGL_CAT
		/'NT REFUND/DT:' @20 AA_TOT_RFD DOLLAR13.2 @38 AD_RFD_EFF MMDDYY8.
		/
		/'DISB 1:  DISB DATE:' @25 AD_DISB_1 MMDDYY8. @38 'DISB AMT:' @49 AA_DISB_1 DOLLAR13.2
		/'         GNTE FEE:' @23 GTE_1 DOLLAR10.2 @38 'ORIG FEE:' @49 ORG_1 DOLLAR13.2
		/@30 'UNCON/CANC CD/DT:'  @50 CC_DISB_1 @54 CD_DISB_1 MMDDYY8.
		/'DISB 2:  DISB DATE:' @25 AD_DISB_2 MMDDYY8. @38 'DISB AMT:' @49 AA_DISB_2 DOLLAR13.2
		/'         GNTE FEE:' @23 GTE_2 DOLLAR10.2 @38 'ORIG FEE:' @49 ORG_2 DOLLAR13.2
		/@30 'UNCON/CANC CD/DT:'  @50 CC_DISB_2 @54 CD_DISB_2 MMDDYY8.
		/'DISB 3:  DISB DATE:' @25 AD_DISB_3 MMDDYY8. @38 'DISB AMT:' @49 AA_DISB_3 DOLLAR13.2
		/'         GNTE FEE:' @23 GTE_3 DOLLAR10.2 @38 'ORIG FEE:' @49 ORG_3 DOLLAR13.2
		/@30 'UNCON/CANC CD/DT:'  @50 CC_DISB_3 @54 CD_DISB_3 MMDDYY8.
		/'DISB 4:  DISB DATE:' @25 AD_DISB_4 MMDDYY8. @38 'DISB AMT:' @49 AA_DISB_4 DOLLAR13.2
		/'         GNTE FEE:' @23 GTE_4 DOLLAR10.2 @38 'ORIG FEE:' @49 ORG_4 DOLLAR13.2
		/@30 'UNCON/CANC CD/DT:'  @50 CC_DISB_4 @54 CD_DISB_4 MMDDYY8.
		/
		/'PAYMENT AMOUNT:' @20 LA_PAY_XPC DOLLAR13.2
		/'SEP DATE:' @25 LD_LFT_SCL MMDDYY8.
/*		(NONE, OR FIRST NAME, MI, LAST NAME, SSN, DOB */
		/'STUDENT: ' @10 STU_INFO
/*<1>*/ /'CO-MAKER, ENDORSER: '@21 ENDR_INFO 
		/
		/'UNDERLYING CONSOLIDATION INFORMATION'
		/
		/'SF STAFSUB'  @13 SF DOLLAR11.2 @26 'DSS DSUBSTAF'    @42 D1 DOLLAR11.2 @55 'PK PERKINS' @66 PK DOLLAR11.2
		/'SU STAFUNS'  @13 SU DOLLAR11.2 @26 'DUS DUNSUBSTAF'  @42 D2 DOLLAR11.2 @55 'FI FISL'    @66 FI DOLLAR11.2
		/'PL PLUS'     @13 PL DOLLAR11.2 @26 'DPLUS DIRPLUS'   @42 D3 DOLLAR11.2 @55 'HP HPSL'    @66 HP DOLLAR11.2
		/'SL SLS'      @13 SL DOLLAR11.2 @26 'DPLUSCON'        @42 D4 DOLLAR11.2 @55 'NS NSLP'    @66 NS DOLLAR11.2
		/'CS CONSUB'   @13 CS DOLLAR11.2 @26 'DSCON DCONSUB'   @42 D5 DOLLAR11.2 @55 'HL HEAL'    @66 HL DOLLAR11.2
		/'CU CONUNSUB' @13 CU DOLLAR11.2 @26 'DUCON DCONUNSUB' @42 D6 DOLLAR11.2
/*</1>*/;
	PUT _PAGE_;
RUN;
DATA REFS;
	SET REFS;
		LAST = TRIM(BM_RFR_LST);
		FIRST = TRIM(BM_RFR_1);
		ADDRESS = TRIM(BX_RFR_STR_ADR_1)||TRIM(BX_RFR_STR_ADR_2);
		CITY = TRIM(BM_RFR_CT);
		ZIP = TRIM(BF_RFR_ZIP);
RUN;

PROC SORT DATA=REFS; BY BF_SSN; RUN;
/* PRINT REFERENCES INFORMATION. */
PROC PRINTTO PRINT=REPORT&REPD NEW; RUN;
OPTIONS PAGENO=1 LS=132;

PROC PRINT NOOBS SPLIT='/' DATA=REFS;
	WHERE RH_LNDR = "&LDR_ID";
	BY BF_SSN;
	VAR	LAST
		FIRST
		BM_RFR_MID
		ADDRESS
		CITY
		BC_RFR_ST
		ZIP
		BN_RFR_DOM_PHN
		BN_RFR_ALT_PHN
		BC_RFR_REL_BR;
	LABEL	BF_SSN = 'BORROWER SSN'
			BM_RFR_MID = 'MI'
			BC_RFR_ST = 'ST'
			BN_RFR_DOM_PHN = 'PHONE'
			BN_RFR_ALT_PHN = 'ALT PHONE'
			BC_RFR_REL_BR = 'REL';
	TITLE1  "REFERENCES FOR LOANS REHABILITATED EFFECTIVE &EFFDATE";
	TITLE2	'SORTED BY BORROWER SSN';
	FOOTNOTE "JOB = UTLWRH1     REPORT = ULWRH1.LWRH1R&REPD";
RUN;

PROC SORT DATA=REHAB;
	BY SSN CLUID;
RUN;
/* PRINT LOAN SALE REPORT. */
PROC PRINTTO PRINT=REPORT&REPE NEW;RUN;
OPTIONS PAGENO=1 LS=80;

PROC PRINT NOOBS SPLIT='/' DATA = REHAB;
	BY SSN;
	VAR	CLUID
		BD_TRX_PST_HST
		AF_CUR_LON_OPS_LDR
		RH_LNDR;
	LABEL	CLUID = 'UNIQUE ID'
			BD_TRX_PST_HST = 'REPURCHASE DATE'
			AF_CUR_LON_OPS_LDR = 'CURRENT LENDER'
			RH_LNDR = 'REPURCHASING LENDER';
	FORMAT	BD_TRX_PST_HST MMDDYY10.;
	TITLE1	' ';
	TITLE2	' ';
	TITLE3	'REHABILITATION LOAN SALES';
	TITLE4  "FOR LOANS REHABILITATED EFFECTIVE &EFFDATE";
	FOOTNOTE "JOB = UTLWRH1     REPORT = ULWRH1.LWRH1R&REPE";
RUN;

PROC SQL;
CREATE TABLE TRANS AS
	SELECT DISTINCT
		SSN,
		NAME,
		LA_TRX AS PRINC,
		BOND_ID,
		CLUID,
		RH_LNDR
	FROM 
		REHAB
	GROUP BY
		SSN,
		NAME
;
/* PRINT TRANSMITTAL. */
PROC PRINTTO PRINT=REPORT&REPF NEW;
RUN;

OPTIONS PAGENO=1 LS=80;

PROC PRINT NOOBS SPLIT='/' DATA = TRANS N='TOTAL NUMBER OF ACCOUNTS REPURCHASED = ';
	VAR	SSN
		NAME
		PRINC
		BOND_ID
		CLUID
		RH_LNDR;
	SUM PRINC;
	LABEL	PRINC = 'CPB';
	FORMAT	PRINC DOLLAR13.2;
	TITLE1	;
	TITLE2	;
	TITLE3	'REHABILITATION LOANS TRANSMITTAL';
	TITLE4  "FOR REPURCHASES EFFECTIVE &EFFDATE";
	FOOTNOTE "JOB = UTLWRH1     REPORT = ULWRH1.LWRH1R&REPF";
RUN;

PROC PRINTTO; RUN;
%MEND LEG_REP;

%LEG_REP(826717,2,3,4,5,6,7);
%LEG_REP(828476,,,,,9,);

/*Output R10 to CSV file*/
%MACRO CSV_OUTPUT(LDR_ID, RNUM); 

DATA REHAB;
	SET REHABM;
WHERE RH_LNDR = "&LDR_ID";
RUN;

PROC SQL;
CREATE TABLE TRANS AS
	SELECT DISTINCT
		SSN,
		NAME,
		LA_TRX AS CPB,
		BOND_ID,
		CLUID,
		RH_LNDR
	FROM 
		REHAB
	GROUP BY
		SSN,
		NAME
;

DATA _NULL_; 
	SET  TRANS; 
	FILE REPORT&RNUM DELIMITER=',' DSD DROPOVER LRECL=32767; 
	IF _N_ = 1 THEN        /* WRITE COLUMN NAMES OR LABELS */ 
	  DO; 
		PUT 
		   'SSN'
		',' 
		   'NAME' 
		',' 
		   'CPB'
		',' 
		   'BOND_ID' 
		',' 
		   'CLUID'
		',' 
		   'RH_LNDR'
		;
	END; 

 DO; 
	PUT SSN $ @; 
    PUT NAME $ @; 
    PUT CPB $ @; 
    PUT BOND_ID $ @; 
    PUT CLUID $ @; 
    PUT RH_LNDR; 
  END; 
RUN; 
%MEND CSV_OUTPUT; 


%CSV_OUTPUT(828476,10); 

