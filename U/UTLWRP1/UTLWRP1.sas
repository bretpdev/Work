/********************************************************************************************** 
* UTLWRP1 - REPURCHASE REPORTS
* THIS JOB IS NOW THE COMBINATION OF LEGACY AND NEW CODE. LOANS THAT ARE BEING REPURCHASED
* BY UHEAA WILL BE IN FILES R26 - R30. OTHER REPORTS ARE AS FOLLOWS:
* R2 - R9 FILES FOR SLMA
* R10 - R17 FILES FOR CHELA - THESE WILL ALWAYS BE BLANK AND ARE NOT EVEN CREATED
* R18 - R25 FILES FOR NELNET
***********************************************************************************************
* LEGACY COMMENTS
***********************************************************************************************
* INCLUDES DATA SHEET AND REFERENCES FOR UNIPAC, PROMISSORY NOTE AND FILE FULL LISTS FOR 
* THE FILE ROOM, LOAN SALE REPORT FOR TERI, AND PAYMENT REQUEST/POSTING REPORT FOR ACCOUNTING.
* ALSO CREATES DATA FILE FOR SCRIPT LETTER CREATION.
***********************************************************************************************/ 
/*LIBNAME DLGSUTWH DB2 DATABASE=DLGSUTWH OWNER=OLWHRM1;*/
/*%LET RPTLIB = %SYSGET(reportdir);*/
/*%LET TBLLIB = /sas/whse/progrevw;*/
%LET RPTLIB = T:\SAS;
%LET TBLLIB = Q:\Process Automation\TabSAS;
FILENAME REPORTZ "&RPTLIB/ULWRP1.LWRP1RZ";
FILENAME REPORT2 "&RPTLIB/ULWRP1.LWRP1R2";
FILENAME REPORT3 "&RPTLIB/ULWRP1.LWRP1R3";
FILENAME REPORT4 "&RPTLIB/ULWRP1.LWRP1R4";
FILENAME REPORT5 "&RPTLIB/ULWRP1.LWRP1R5";
FILENAME REPORT6 "&RPTLIB/ULWRP1.LWRP1R6";
FILENAME REPORT7 "&RPTLIB/ULWRP1.LWRP1R7";
FILENAME REPORT8 "&RPTLIB/ULWRP1.LWRP1R8";
FILENAME REPORT9 "&RPTLIB/ULWRP1.LWRP1R9";
FILENAME REPORT10 "&RPTLIB/ULWRP1.LWRP1R10";
FILENAME REPORT11 "&RPTLIB/ULWRP1.LWRP1R11";
FILENAME REPORT12 "&RPTLIB/ULWRP1.LWRP1R12";
FILENAME REPORT13 "&RPTLIB/ULWRP1.LWRP1R13";
FILENAME REPORT14 "&RPTLIB/ULWRP1.LWRP1R14";
FILENAME REPORT15 "&RPTLIB/ULWRP1.LWRP1R15";
FILENAME REPORT16 "&RPTLIB/ULWRP1.LWRP1R16";
FILENAME REPORT17 "&RPTLIB/ULWRP1.LWRP1R17";
FILENAME REPORT18 "&RPTLIB/ULWRP1.LWRP1R18";
FILENAME REPORT19 "&RPTLIB/ULWRP1.LWRP1R19";
FILENAME REPORT20 "&RPTLIB/ULWRP1.LWRP1R20";
FILENAME REPORT21 "&RPTLIB/ULWRP1.LWRP1R21";
FILENAME REPORT22 "&RPTLIB/ULWRP1.LWRP1R22";
FILENAME REPORT23 "&RPTLIB/ULWRP1.LWRP1R23";
FILENAME REPORT24 "&RPTLIB/ULWRP1.LWRP1R24";
FILENAME REPORT25 "&RPTLIB/ULWRP1.LWRP1R25";
FILENAME REPORT26 "&RPTLIB/ULWRP1.LWRP1R26";
FILENAME REPORT27 "&RPTLIB/ULWRP1.LWRP1R27";
FILENAME REPORT28 "&RPTLIB/ULWRP1.LWRP1R28";
FILENAME REPORT29 "&RPTLIB/ULWRP1.LWRP1R29";
FILENAME REPORT30 "&RPTLIB/ULWRP1.LWRP1R30";
DATA _NULL_;	
     CALL SYMPUT('FOM',"'"||PUT(INTNX('MONTH',TODAY(),0,'beginning'), MMDDYYD10.)||"'");
	 CALL SYMPUT('TODAY',"'"||PUT(INTNX('DAY',TODAY(),0,'beginning'), MMDDYYD10.)||"'");
	 CALL SYMPUT('DAYS_AGO_2',"'"||PUT(INTNX('DAY',TODAY(),-2,'B'), MMDDYY10.)||"'");
RUN;
/***************************************************************
* DUSTER BOND ID TABLE - THIS IS THE SAME TABLE USED IN UTLWRH1 
****************************************************************/
DATA _NULL_ (WHERE=(BOND_STAT = 'A'));
	FORMAT BOND_ID $20. BOND_STAT $1.;
	INFILE "&TBLLIB/UTLWRH1.Bond.txt" DLM=',' MISSOVER FIRSTOBS=2;
	INFORMAT BOND_ID $20. BOND_STAT $1.; 
	INPUT BOND_ID $ BOND_STAT $;
	DO;
		CALL SYMPUT('BOND_ID',BOND_ID);
	END;
RUN;
%LET MAX_NUM = 15;
%SYSLPUT FOM = &FOM;
%SYSLPUT TODAY = &TODAY;
%SYSLPUT DAYS_AGO_2 = &DAYS_AGO_2;
%SYSLPUT BOND_ID = &BOND_ID;
LIBNAME  WORKLOCL  REMOTE  SERVER=DUSTER  SLIBREF=WORK;
RSUBMIT;

LIBNAME PROGREVW '/sas/whse/progrevw';

PROC SQL;
	CREATE TABLE BOND_IDS AS 
		SELECT DISTINCT
			IF_BND_ISS_OLD,
			IF_BND_ISS_NEW
		FROM
			PROGREVW.BOND_IDS
;
QUIT;

%MACRO SQLCHECK (SQLRPT= );
%IF &SQLXRC NE 0 %THEN %DO;
	DATA _NULL_;
    FILE REPORTZ NOTITLES;
    PUT @01 " ********************************************************************* "
      / @01 " ****  THE SQL CODE ABOVE HAS EXPERIENCED AN ERROR.               **** "
      / @01 " ****  THE SAS LOG IN &SQLRPT SHOULD BE REVIEWED.          **** "       
      / @01 " ********************************************************************* "
      / @01 " ****  THE SQL ERROR CODE IS  &SQLXRC  AND THE SQL ERROR MESSAGE  **** "
      / @01 " ****  &SQLXMSG   **** "
      / @01 " ********************************************************************* ";
	RUN;
%END;
%MEND;
PROC SQL;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
/***********************************************
* IDENTIFY NON-BANKRUPTCY AND BANKRUPTCY LOANS
************************************************/
CREATE TABLE RP1_A AS
	SELECT 
		*
	FROM CONNECTION TO DB2 
	(
/***********************************************
* NON-BANKRUPTCY REPURCHASES
************************************************/
		SELECT DISTINCT	
			DC01.BF_SSN,									
			DC01.AF_APL_ID||DC01.AF_APL_ID_SFX AS CLUID,
			'NOBK' AS BTYPE
		FROM  
			OLWHRM1.DC01_LON_CLM_INF DC01 
		WHERE 
			DC01.LC_TYP_DFR = '03'
			AND DC01.LC_STA_DC10 = '03'  
			AND DC01.LD_DFR_END >= CURRENT DATE
			AND DC01.BF_SSN NOT IN	
			(
				SELECT 
					CT30.DF_PRS_ID_BR
				FROM 
					OLWHRM1.CT30_CALL_QUE CT30
				WHERE 
					CT30.IF_WRK_GRP IN ('REPURCH1','REPURCH2')
					AND	CT30.LD_LST_WRK < &FOM
			)

		UNION
/***********************************************
* BANKRUPTCY REPURCHASES
************************************************/
		SELECT DISTINCT 
			DC01.BF_SSN,
			DC01.AF_APL_ID||DC01.AF_APL_ID_SFX AS CLUID,
			'BKRP' AS BTYPE
		FROM
			OLWHRM1.DC01_LON_CLM_INF DC01 
		INNER JOIN OLWHRM1.DC18_BKR DC18
			ON	DC01.AF_APL_ID = DC18.AF_APL_ID 
			AND	DC01.AF_APL_ID_SFX = DC18.AF_APL_ID_SFX
		WHERE 
			DC18.LC_BKR_STA = '06'	
			AND DC18.LD_BKR_FIL =		
			(
				SELECT 
					MAX(DC18Max.LD_BKR_FIL)
				FROM 
					OLWHRM1.DC18_BKR DC18Max
				WHERE
					DC01.AF_APL_ID = DC18Max.AF_APL_ID
					AND DC01.AF_APL_ID_SFX = DC18Max.AF_APL_ID_SFX
			)
			AND DC01.LC_PCL_REA IN ('BC','BH','BO')
			AND DC01.LD_LDR_POF =		
			(
				SELECT 
					MAX(DC01Max.LD_LDR_POF)
				FROM 
					OLWHRM1.DC01_LON_CLM_INF DC01Max
				WHERE
					DC01.AF_APL_ID = DC01Max.AF_APL_ID 
					AND	DC01.AF_APL_ID_SFX = DC01Max.AF_APL_ID_SFX
					AND DC01Max.LC_STA_DC10 = '03'
			)
			AND DC01.LD_LDR_POF < CURRENT DATE
			AND DC01.BF_SSN NOT IN
			(
				SELECT 
					CT30.DF_PRS_ID_BR
				FROM 
					OLWHRM1.CT30_CALL_QUE CT30
				WHERE 
					CT30.IF_WRK_GRP IN ('REPURCH1','REPURCH2')
					AND	CT30.LD_LST_WRK < &FOM
			)
			AND NOT EXISTS 
			(
				SELECT 
					*
				FROM 
					OLWHRM1.DC18_BKR DC1801
				WHERE 
					DC01.AF_APL_ID = DC1801.AF_APL_ID
					AND DC01.AF_APL_ID_SFX = DC1801.AF_APL_ID_SFX
					AND DC1801.LC_BKR_STA = '01'
					AND DC1801.LD_BKR_FIL =		
					(
						SELECT 
							MAX(DC18MaxFile.LD_BKR_FIL)
						FROM 
							OLWHRM1.DC18_BKR DC18MaxFile
						WHERE
							DC01.AF_APL_ID = DC18MaxFile.AF_APL_ID
							AND DC01.AF_APL_ID_SFX = DC18MaxFile.AF_APL_ID_SFX
					)
			)
			AND DC01.LC_STA_DC10 = '03'

	FOR READ ONLY WITH UR
	);

/***********************************************
* GATHER DATA FOR THE LOANS SELECTED ABOVE
************************************************/
CREATE TABLE RP2_B AS
	SELECT DISTINCT 
		B.BF_SSN AS BR_ID,
		B.CLUID AS LN_ID,
		B.BTYPE,
		A.*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT	
			DC01.BF_SSN,
			DC01.AF_APL_ID||DC01.AF_APL_ID_SFX AS CLUID,
		/*BORROWER INFO*/
			PD01.DM_PRS_1,
			PD01.DM_PRS_LST,
			PD01.DM_PRS_MID,
			PD01.DD_BRT,
			PD01.DX_STR_ADR_1,
			PD01.DX_STR_ADR_2,
			PD01.DM_CT,
			PD01.DC_DOM_ST,
			PD01.DF_ZIP,
			PD01.DM_FGN_CNY,
			PD01.DI_VLD_ADR,
			PD01.DN_PHN,
			PD01.DI_PHN_VLD,
			PD01.DN_ALT_PHN,
			PD01.DI_ALT_PHN_VLD,
			PD01.DF_SPE_ACC_ID,
		/*LOAN INFO*/
			DC01.LA_CLM_PRI + DC01.LA_CLM_INT - DC01.LA_PRI_COL AS DC10PRINC,
			DC01.LA_LEG_CST_ACR - DC01.LA_LEG_CST_COL + DC01.LA_OTH_CHR_ACR - DC01.LA_OTH_CHR_COL AS DC10OTHER,
			DC01.LA_COL_CST_ACR - DC01.LA_COL_CST_COL AS DC10CC,
			DC01.LI_COL_CST_ASS,
			DC01.LF_CLM_ID,
			GA10.AC_LON_TYP,
			GA10.AD_PRC,
			DC01.AF_APL_ID,
			DC01.AF_APL_ID_SFX,
			GA01.AD_IST_TRM_BEG,
			GA01.AD_IST_TRM_END,
			GA10.AA_GTE_LON_AMT,
			GA01.AF_APL_OPS_SCL,
			GA01.AD_BR_SIG,
			RG02.PR_RPD_FOR_ITR,
			DC01.LC_TYP_DFR,
			GA14.AC_DFR_TYP,
			GA14.AD_DFR_BEG,
			GA14.AD_DFR_END,
			GA01.AD_APL_RCV,
			GA01.AC_STU_DFR_REQ,
			CASE WHEN GA10.AC_LON_TYP = 'CL' 
				THEN GA01.AF_CUR_APL_OPS_LDR
				ELSE GA01.AF_ORG_APL_OPS_LDR
			END AS AF_ORG_APL_OPS_LDR,
		/*STUDENT INFO*/
			GA01.DF_PRS_ID_STU AS STU_SSN,
			PD01Stu.DM_PRS_1 AS STU_DM_PRS_1,
			PD01Stu.DM_PRS_MID AS STU_DM_PRS_MID,
			PD01Stu.DM_PRS_LST AS STU_DM_PRS_LST,
			PD01Stu.DD_BRT AS STU_DD_BRT,
		/*IF STUDENT INFO IS MISSING USE PARENTS ADDRESS INFO - SELECTED FOR ALL BUT APPLICALBE TO PLUS LOANS*/
			CASE WHEN PD01Stu.DX_STR_ADR_1 = '' 
				THEN PD01.DX_STR_ADR_1 
				ELSE PD01Stu.DX_STR_ADR_1 
			END AS STU_DX_STR_ADR_1,
			CASE WHEN PD01Stu.DX_STR_ADR_2 = '' 
				THEN PD01.DX_STR_ADR_2 
				ELSE PD01Stu.DX_STR_ADR_2 
			END AS STU_DX_STR_ADR_2,
			CASE WHEN PD01Stu.DM_CT = ''
				THEN PD01.DM_CT
				ELSE PD01Stu.DM_CT
			END AS STU_DM_CT,
			CASE WHEN PD01Stu.DC_DOM_ST = ''
				THEN PD01.DC_DOM_ST
				ELSE PD01Stu.DC_DOM_ST
			END AS STU_DC_DOM_ST,
			CASE WHEN PD01Stu.DF_ZIP = ''
				THEN PD01.DF_ZIP
				ELSE PD01Stu.DF_ZIP
			END AS STU_DF_ZIP,
			CASE WHEN PD01Stu.DM_FGN_CNY = ''
				THEN PD01.DM_FGN_CNY
				ELSE PD01Stu.DM_FGN_CNY
			END AS STU_DM_FGN_CNY,
			CASE WHEN PD01Stu.DI_VLD_ADR = ''
				THEN 'N'
				ELSE PD01Stu.DI_VLD_ADR
			END AS STU_DI_VLD_ADR,
			CASE WHEN PD01Stu.DN_PHN = ''
				THEN PD01.DN_PHN
				ELSE PD01Stu.DN_PHN
			END AS STU_DN_PHN,
			CASE WHEN PD01Stu.DI_PHN_VLD = ''
				THEN 'N'
				ELSE PD01Stu.DI_PHN_VLD
			END AS STU_DI_PHN_VLD,
			PD01Stu.DN_ALT_PHN AS STU_DN_ALT_PHN,
			PD01Stu.DI_ALT_PHN_VLD AS STU_DI_ALT_PHN_VLD,
		/*ENDORSER INFO*/
			PD01Ends.DF_PRS_ID AS EDSR_SSN,
			PD01Ends.DM_PRS_1 AS EDSR_DM_PRS_1,
			PD01Ends.DM_PRS_MID AS EDSR_DM_PRS_MID,
			PD01Ends.DM_PRS_LST AS EDSR_DM_PRS_LST,
			PD01Ends.DD_BRT AS EDSR_DD_BRT,
			PD01Ends.DX_STR_ADR_1 AS EDSR_DX_STR_ADR_1,
			PD01Ends.DX_STR_ADR_2 AS EDSR_DX_STR_ADR_2,
			PD01Ends.DM_CT AS EDSR_DM_CT,
			PD01Ends.DC_DOM_ST AS EDSR_DC_DOM_ST,
			PD01Ends.DF_ZIP AS EDSR_DF_ZIP,
			PD01Ends.DM_FGN_CNY AS EDSR_DM_FGN_CNY,
			PD01Ends.DI_VLD_ADR AS EDSR_DI_VLD_ADR,
			PD01Ends.DN_PHN AS EDSR_DN_PHN,
			PD01Ends.DI_PHN_VLD AS EDSR_DI_PHN_VLD,
			PD01Ends.DN_ALT_PHN AS EDSR_DN_ALT_PHN,
			PD01Ends.DI_ALT_PHN_VLD AS EDSR_DI_ALT_PHN_VLD,
		/*ENROLLMENT INFO*/
			CASE WHEN ENR.LC_STU_ENR_STA = 'O' THEN ENR.LD_STU_ENR_STA
				 WHEN ENR.LC_STU_ENR_STA = 'I' THEN ENR.LD_XPC_GRD
			END AS LD_LFT_SCL,
			ENR.IF_OPS_SCL_RPT,
			ENR.LC_STU_ENR_TYP,
			ENR.LD_ENR_CER,
			ENR.LD_LDR_NTF,
		/*MISC INFO	*/
			GA10.AF_CUR_LON_OPS_LDR,
			GA01.AC_EDS_TYP,
			GA10.AC_ORG_INT_TYP,
			GA10.AD_PRC,
			GA10.AA_TOT_RFD,
			GA10.AD_RFD_EFF,
			DC01.PF_RGL_CAT,
			DC02.LA_CLM_BAL AS DC02BAL,
			DC02.LA_CLM_PRJ_COL_CST AS DCO2CC,
			DC02.LD_ETR AS DC02LTD,
			DC02.LR_CUR_INT AS RATE,
			COALESCE(DC01.LA_INT_ACR,0.00) + COALESCE(DC02.LA_CLM_INT_ACR,0.00) - COALESCE(DC01.LA_INT_COL,0.00) AS CURINT,
			GA10.AR_CON_ITR,
			CASE WHEN GA10.AC_LON_TYP = 'CL' AND SBI.SUB_IND = 'Y' 
				THEN 'Y'
				ELSE 'N'
			END AS SUBSIDY,
			LCO.AA_TOT_EDU_DET_PNT,
			DC01.LC_INT_TYP,
			GA01.AC_EDS_TYP,
			DC01.LR_ITR,
			GA10.AC_ORG_INT_TYP,
			GA01.AX_STU_ENR_BEG_CYM,
		/*IBR INFO*/
			DC01.LD_IBR_25Y_FGV_BEG, /*Field seems right, but process to load borrowers into onelink might be off*/
			CASE WHEN DAYS(DC01.LD_IBR_RPD_SR) < DAYS('2009-07-01') /*Dont allow date to be prior to start of IBR per Jeremy*/
				THEN '2009-07-01'
				ELSE DC01.LD_IBR_RPD_SR
			END AS LD_IBR_RPD_SR,
			DC01.LA_IBR_STD_STD_PAY,
			DC01.LN_IBR_QLF_FGV_MTH,
			BND.IF_BND_ISS
		FROM 
			OLWHRM1.DC01_LON_CLM_INF DC01 
			INNER JOIN OLWHRM1.PD01_PDM_INF PD01 
				ON DC01.BF_SSN = PD01.DF_PRS_ID
			INNER JOIN OLWHRM1.GA01_APP GA01 
				ON	DC01.AF_APL_ID = GA01.AF_APL_ID 
			INNER JOIN OLWHRM1.GA10_LON_APP GA10 
				ON	DC01.AF_APL_ID = GA10.AF_APL_ID 
				AND	DC01.AF_APL_ID_SFX = GA10.AF_APL_ID_SFX 
			INNER JOIN OLWHRM1.DC02_BAL_INT DC02 
				ON	DC01.AF_APL_ID = DC02.AF_APL_ID 
				AND	DC01.AF_APL_ID_SFX = DC02.AF_APL_ID_SFX
			LEFT JOIN
			(
				SELECT
					LN10.BF_SSN,
					LN10.LN_SEQ,
					LN10.LF_LON_ALT,
					LN10.LN_LON_ALT_SEQ,
					LN35.IF_BND_ISS
				FROM	
					OLWHRM1.LN10_LON LN10 
					INNER JOIN
					(
						SELECT
							BF_SSN,
							LF_LON_ALT, 
							LN_LON_ALT_SEQ,
							MAX(LD_LON_EFF_ADD) AS LAST_UPDATE
						FROM
							OLWHRM1.LN10_LON 
						GROUP BY
							BF_SSN,
							LF_LON_ALT, 
							LN_LON_ALT_SEQ
					)LN10_POP
						ON LN10_POP.BF_SSN = LN10.BF_SSN
						AND LN10_POP.LF_LON_ALT = LN10.LF_LON_ALT
						AND LN10_POP.LN_LON_ALT_SEQ = LN10.LN_LON_ALT_SEQ
						AND LN10_POP.LAST_UPDATE = LN10.LD_LON_EFF_ADD
					/*Getting the bond ID that was in effect on the effective date of the 10/30 payment*/
					INNER JOIN
					(
						SELECT
							LN35.BF_SSN,
							LN35.LN_SEQ,
							LN35.IF_BND_ISS
						FROM
							OLWHRM1.LN35_LON_OWN LN35
							INNER JOIN
							(
								SELECT
									LN90.BF_SSN,
									LN90.LN_SEQ,
									MIN(LN90.LD_FAT_EFF) AS LD_FAT_EFF
								FROM
									OLWHRM1.LN90_FIN_ATY LN90
								WHERE
									LN90.LC_FAT_REV_REA = ' '
									AND	LN90.PC_FAT_TYP = '10'
									AND	LN90.PC_FAT_SUB_TYP = '30'
									AND LN90.LC_STA_LON90 = 'A'
								GROUP BY 
									LN90.BF_SSN,
									LN90.LN_SEQ
							) POP
								ON POP.BF_SSN = LN35.BF_SSN
								AND POP.LN_SEQ = LN35.LN_SEQ
								AND POP.LD_FAT_EFF BETWEEN LN35.LD_OWN_EFF_SR AND COALESCE(LN35.LD_OWN_EFF_END, CURRENT_DATE)
						WHERE
							LN35.LC_STA_LON35 = 'A'
					) LN35
						ON LN35.BF_SSN = LN10.BF_SSN
						AND LN35.LN_SEQ = LN10.LN_SEQ 
			)BND
				ON GA10.AF_APL_ID = BND.LF_LON_ALT
				AND GA10.AF_APL_ID_SFX = BND.LN_LON_ALT_SEQ
			LEFT JOIN 
			(
				SELECT DISTINCT 
					PF_RGL_CAT,
					PR_RPD_FOR_ITR
				FROM 
					OLWHRM1.RG02_ITR_DFN 
				WHERE 
					&TODAY BETWEEN PD_ITR_EFF_BEG AND PD_ITR_EFF_END
			) RG02
				ON DC01.PF_RGL_CAT = RG02.PF_RGL_CAT
			LEFT JOIN OLWHRM1.PD01_PDM_INF PD01Stu
				ON GA01.DF_PRS_ID_STU = PD01Stu.DF_PRS_ID
			LEFT JOIN OLWHRM1.DC12_EDS_CMK_ATY DC12
				ON	GA10.AF_APL_ID = DC12.AF_APL_ID 
				AND	GA10.AF_APL_ID_SFX = DC12.AF_APL_ID_SFX 
			LEFT JOIN OLWHRM1.PD01_PDM_INF PD01Ends
				ON DC12.DF_PRS_ID = PD01Ends.DF_PRS_ID
			LEFT JOIN OLWHRM1.GA14_LON_STA GA14
				ON GA10.AF_APL_ID = GA14.AF_APL_ID 
				AND	GA10.AF_APL_ID_SFX = GA14.AF_APL_ID_SFX 
				AND GA14.AC_STA_GA14 = 'A'
			LEFT JOIN 
			(
				SELECT DISTINCT 
					AF_APL_ID,
					AF_APL_ID_SFX,
					'Y' AS SUB_IND
				FROM 
					OLWHRM1.GA17_CON_LON_DTL 
				WHERE 
					AC_CON_UND_LON_TYP IN ('CS','D1','D5','SF') 
			) SBI
				ON DC01.AF_APL_ID = SBI.AF_APL_ID
				AND DC01.AF_APL_ID_SFX = SBI.AF_APL_ID_SFX
			LEFT JOIN 
			(
				SELECT DISTINCT 
					JL1B.AF_APL_ID,
					JL1B.AF_APL_ID_SFX,
					JL1C.IF_OPS_SCL_RPT,
					JL1C.LC_STU_ENR_TYP,
					JL1C.LD_ENR_CER,
					JL1C.LD_LDR_NTF,
					JL1C.LD_STU_ENR_STA,
					JL1C.LD_XPC_GRD,
					JL1C.LC_STU_ENR_STA
				FROM 
					OLWHRM1.GA01_APP JL1A
					INNER JOIN OLWHRM1.GA16_ENR_RPT_CRF JL1B
						ON JL1A.AF_APL_ID = JL1B.AF_APL_ID 
					INNER JOIN OLWHRM1.SD02_STU_ENR JL1C	
						ON JL1A.DF_PRS_ID_STU = JL1C.DF_PRS_ID_STU
						AND JL1B.LF_STU_ENR_RPT_SEQ = JL1C.LF_STU_ENR_RPT_SEQ
						AND JL1B.LF_CRT_DTS_SD02 = JL1C.LF_CRT_DTS_SD02
			) ENR
				ON DC01.AF_APL_ID = ENR.AF_APL_ID
				AND DC01.AF_APL_ID_SFX = ENR.AF_APL_ID_SFX
			LEFT JOIN 
			(
				SELECT DISTINCT 	
					AP1A.DF_LCO_PRS_SSN_BR,
					AP1A.AA_TOT_EDU_DET_PNT,
					'CL' AS AC_LON_TYP
				FROM 
					OLWHRM1.AP1A_LCO_APL AP1A
					INNER JOIN 
					(
						SELECT 
							DF_LCO_PRS_SSN_BR,
							MAX(AD_LCO_APL_RCV) AS MAX_DATE,
							MAX(AA_TOT_EDU_DET_PNT) AS MAX_AMT
						FROM 
							OLWHRM1.AP1A_LCO_APL 
						WHERE 
							IC_LCO_DSB_APV_STA = 'A'
							AND AA_TOT_EDU_DET_PNT IS NOT NULL 
						GROUP BY 
							DF_LCO_PRS_SSN_BR
					) AP1AMax
						ON AP1A.DF_LCO_PRS_SSN_BR = AP1AMax.DF_LCO_PRS_SSN_BR
						AND AP1A.AD_LCO_APL_RCV = AP1AMax.MAX_DATE
						AND AP1A.AA_TOT_EDU_DET_PNT = AP1AMax.MAX_AMT
				WHERE 
					AP1A.IC_LCO_DSB_APV_STA = 'A'
					AND AP1A.AA_TOT_EDU_DET_PNT IS NOT NULL 
			) LCO
				ON GA01.DF_PRS_ID_BR = LCO.DF_LCO_PRS_SSN_BR
				AND GA10.AC_LON_TYP = LCO.AC_LON_TYP
		WHERE 
			DC01.LC_STA_DC10 = '03'

		FOR READ ONLY WITH UR
	) A
	RIGHT OUTER JOIN RP1_A B
		ON B.CLUID = A.CLUID
	;
/*********************************************************
* MULTIPLE LOANS BEFORE 07/01/1998
**********************************************************/
CREATE TABLE MULT_LOANS AS	
	SELECT DISTINCT 
		Loans.BF_SSN,
		COUNT(Loans.BF_SSN) AS COUNTED
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT	
			GA11.AF_APL_ID||GA11.AF_APL_ID_SFX AS CLUID,
			GA11.AD_DSB_ADJ,
			DC01.BF_SSN
		FROM 
			OLWHRM1.GA11_LON_DSB_ATY GA11
			INNER JOIN OLWHRM1.DC01_LON_CLM_INF DC01
				ON GA11.AF_APL_ID = DC01.AF_APL_ID 
				AND GA11.AF_APL_ID_SFX = DC01.AF_APL_ID_SFX
		WHERE 
			GA11.AN_DSB_SEQ = 1
			AND GA11.AD_DSB_ADJ < '07/01/1998'
		
		FOR READ ONLY WITH UR

	) Loans
	WHERE 
		Loans.BF_SSN IN (SELECT BF_SSN FROM RP2_B)
	GROUP BY 
		Loans.BF_SSN
;

/*********************************************************
* ACTUAL DISBURSEMENT INFORMATION 
**********************************************************/
CREATE TABLE DISB_ACT AS	
	SELECT DISTINCT 
		GA11.CLUID,
		MAX(GA11.AC_DISB_1) AS AC_DISB_1,
		MAX(GA11.AN_DISB_1) AS AN_DISB_1,
		SUM(GA11.GTE_1) AS GTE_1,
		MAX(GA11.AD_DISB_1) AS AD_DISB_1,
		SUM(GA11.AA_DISB_1) AS AA_DISB_1,
		SUM(GA11.ORG_1) AS ORG_1,
		MAX(GA11.AC_DISB_2) AS AC_DISB_2,
		MAX(GA11.AN_DISB_2) AS AN_DISB_2,
		SUM(GA11.GTE_2) AS GTE_2,
		MAX(GA11.AD_DISB_2) AS AD_DISB_2,
		SUM(GA11.AA_DISB_2) AS AA_DISB_2,
		SUM(GA11.ORG_2) AS ORG_2,
		MAX(GA11.AC_DISB_3) AS AC_DISB_3,
		MAX(GA11.AN_DISB_3) AS AN_DISB_3,
		SUM(GA11.GTE_3) AS GTE_3,
		MAX(GA11.AD_DISB_3) AS AD_DISB_3,
		SUM(GA11.AA_DISB_3) AS AA_DISB_3,
		SUM(GA11.ORG_3) AS ORG_3,
		MAX(GA11.AC_DISB_4) AS AC_DISB_4,
		MAX(GA11.AN_DISB_4) AS AN_DISB_4,
		SUM(GA11.GTE_4) AS GTE_4,
		MAX(GA11.AD_DISB_4) AS AD_DISB_4,
		SUM(GA11.AA_DISB_4) AS AA_DISB_4,
		SUM(GA11.ORG_4) AS ORG_4
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT	
			GA11.AF_APL_ID||GA11.AF_APL_ID_SFX AS CLUID,
			CASE WHEN GA11.AN_DSB_SEQ = 1 THEN GA11.AA_DSB_ADJ END AS AA_DISB_1,
			CASE WHEN GA11.AN_DSB_SEQ = 1 THEN GA11.AD_DSB_ADJ END AS AD_DISB_1,
			CASE WHEN GA11.AN_DSB_SEQ = 1 THEN GA11.AA_GTE_FEE_ADJ END AS GTE_1,
			CASE WHEN GA11.AN_DSB_SEQ = 1 THEN GA11.AA_ORG_FEE_ADJ END AS ORG_1,
			CASE WHEN GA11.AN_DSB_SEQ = 1 THEN GA11.AC_DSB_ADJ END AS AC_DISB_1,
			CASE WHEN GA11.AN_DSB_SEQ = 1 THEN GA11.AN_DSB_SEQ END AS AN_DISB_1,
			CASE WHEN GA11.AN_DSB_SEQ = 2 THEN GA11.AA_DSB_ADJ END AS AA_DISB_2,
			CASE WHEN GA11.AN_DSB_SEQ = 2 THEN GA11.AD_DSB_ADJ END AS AD_DISB_2,
			CASE WHEN GA11.AN_DSB_SEQ = 2 THEN GA11.AA_GTE_FEE_ADJ END AS GTE_2,
			CASE WHEN GA11.AN_DSB_SEQ = 2 THEN GA11.AA_ORG_FEE_ADJ END AS ORG_2,
			CASE WHEN GA11.AN_DSB_SEQ = 2 THEN GA11.AC_DSB_ADJ END AS AC_DISB_2,
			CASE WHEN GA11.AN_DSB_SEQ = 2 THEN GA11.AN_DSB_SEQ END AS AN_DISB_2,
			CASE WHEN GA11.AN_DSB_SEQ = 3 THEN GA11.AA_DSB_ADJ END AS AA_DISB_3,
			CASE WHEN GA11.AN_DSB_SEQ = 3 THEN GA11.AD_DSB_ADJ END AS AD_DISB_3,
			CASE WHEN GA11.AN_DSB_SEQ = 3 THEN GA11.AA_GTE_FEE_ADJ END AS GTE_3,
			CASE WHEN GA11.AN_DSB_SEQ = 3 THEN GA11.AA_ORG_FEE_ADJ END AS ORG_3,
			CASE WHEN GA11.AN_DSB_SEQ = 3 THEN GA11.AC_DSB_ADJ END AS AC_DISB_3,
			CASE WHEN GA11.AN_DSB_SEQ = 3 THEN GA11.AN_DSB_SEQ END AS AN_DISB_3,
			CASE WHEN GA11.AN_DSB_SEQ = 4 THEN GA11.AA_DSB_ADJ END AS AA_DISB_4,
			CASE WHEN GA11.AN_DSB_SEQ = 4 THEN GA11.AD_DSB_ADJ END AS AD_DISB_4,
			CASE WHEN GA11.AN_DSB_SEQ = 4 THEN GA11.AA_GTE_FEE_ADJ END AS GTE_4,
			CASE WHEN GA11.AN_DSB_SEQ = 4 THEN GA11.AA_ORG_FEE_ADJ END AS ORG_4,
			CASE WHEN GA11.AN_DSB_SEQ = 4 THEN GA11.AC_DSB_ADJ END AS AC_DISB_4,
			CASE WHEN GA11.AN_DSB_SEQ = 4 THEN GA11.AN_DSB_SEQ END AS AN_DISB_4
		FROM 
			OLWHRM1.GA11_LON_DSB_ATY GA11 
		WHERE
			GA11.AC_DSB_ADJ = 'A' 
			AND GA11.AC_DSB_ADJ_STA = 'A' 
			AND	GA11.AN_DSB_SEQ IN (1,2,3,4)

		FOR READ ONLY WITH UR
	) GA11
	INNER JOIN RP1_A RP1
		ON GA11.CLUID = RP1.CLUID
	GROUP BY 
		GA11.CLUID
	ORDER BY 
		GA11.CLUID
;
/*********************************************************
* CANCELED DISBURSEMENT INFORMATION 
**********************************************************/
CREATE TABLE DISB_CAN AS
	SELECT 	
		GA11.CLUID,
		SUM(GA11.CA_DISB_1) AS CA_DISB_1,
		MAX(GA11.CD_DISB_1) AS CD_DISB_1,	
		MAX(GA11.CC_DISB_1) AS CC_DISB_1,
		MAX(GA11.CO_DISB_1) AS CO_DISB_1,
		SUM(GA11.CA_DISB_2) AS CA_DISB_2,
		MAX(GA11.CD_DISB_2) AS CD_DISB_2,	
		MAX(GA11.CC_DISB_2) AS CC_DISB_2,
		MAX(GA11.CO_DISB_2) AS CO_DISB_2,
		SUM(GA11.CA_DISB_3) AS CA_DISB_3,
		MAX(GA11.CD_DISB_3) AS CD_DISB_3,	
		MAX(GA11.CC_DISB_3) AS CC_DISB_3,
		MAX(GA11.CO_DISB_3) AS CO_DISB_3,
		SUM(GA11.CA_DISB_4) AS CA_DISB_4,
		MAX(GA11.CD_DISB_4) AS CD_DISB_4,	
		MAX(GA11.CC_DISB_4) AS CC_DISB_4,
		MAX(GA11.CO_DISB_4) AS CO_DISB_4
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT
			GA11.AF_APL_ID||GA11.AF_APL_ID_SFX AS CLUID,
			CASE WHEN GA11.AN_DSB_SEQ = 1 THEN GA11.AA_DSB_ADJ END AS CA_DISB_1,
			CASE WHEN GA11.AN_DSB_SEQ = 1 THEN GA11.AD_DSB_ADJ END AS CD_DISB_1,
			CASE WHEN GA11.AN_DSB_SEQ = 1 THEN GA11.AC_DSB_ADJ END AS CC_DISB_1,
			CASE WHEN GA11.AN_DSB_SEQ = 1 THEN GA11.AA_ORG_FEE_ADJ END AS CO_DISB_1,
			CASE WHEN GA11.AN_DSB_SEQ = 2 THEN GA11.AA_DSB_ADJ END AS CA_DISB_2,
			CASE WHEN GA11.AN_DSB_SEQ = 2 THEN GA11.AD_DSB_ADJ END AS CD_DISB_2,
			CASE WHEN GA11.AN_DSB_SEQ = 2 THEN GA11.AC_DSB_ADJ END AS CC_DISB_2,
			CASE WHEN GA11.AN_DSB_SEQ = 2 THEN GA11.AA_ORG_FEE_ADJ END AS CO_DISB_2,
			CASE WHEN GA11.AN_DSB_SEQ = 3 THEN GA11.AA_DSB_ADJ END AS CA_DISB_3,
			CASE WHEN GA11.AN_DSB_SEQ = 3 THEN GA11.AD_DSB_ADJ END AS CD_DISB_3,
			CASE WHEN GA11.AN_DSB_SEQ = 3 THEN GA11.AC_DSB_ADJ END AS CC_DISB_3,
			CASE WHEN GA11.AN_DSB_SEQ = 3 THEN GA11.AA_ORG_FEE_ADJ END AS CO_DISB_3,
			CASE WHEN GA11.AN_DSB_SEQ = 4 THEN GA11.AA_DSB_ADJ END AS CA_DISB_4,
			CASE WHEN GA11.AN_DSB_SEQ = 4 THEN GA11.AD_DSB_ADJ END AS CD_DISB_4,
			CASE WHEN GA11.AN_DSB_SEQ = 4 THEN GA11.AC_DSB_ADJ END AS CC_DISB_4,
			CASE WHEN GA11.AN_DSB_SEQ = 4 THEN GA11.AA_ORG_FEE_ADJ END AS CO_DISB_4
		FROM 
			OLWHRM1.GA11_LON_DSB_ATY GA11 
		WHERE
			GA11.AC_DSB_ADJ IN ('C','P','S','U') 
			AND	GA11.AN_DSB_SEQ IN (1,2,3,4)

		FOR READ ONLY WITH UR
	) GA11
	INNER JOIN RP1_A RP1
		ON GA11.CLUID = RP1.CLUID
	GROUP BY 
		GA11.CLUID
	ORDER BY 
		GA11.CLUID
;
/*********************************************************************
* UNDERLYING CONSOLIDATON LOAN AMOUNTS 
**********************************************************************/
CREATE TABLE CONDTL_BK AS
	SELECT 
		GA17.CLUID,
		SUM(GA17.SF) AS SF,
		SUM(GA17.SU) AS SU,
		SUM(GA17.PL) AS PL,
		SUM(GA17.SL) AS SL,
		SUM(GA17.CS) AS CS,
		SUM(GA17.CU) AS CU,
		SUM(GA17.D1) AS D1,
		SUM(GA17.D2) AS D2,
		SUM(GA17.D3) AS D3,
		SUM(GA17.D4) AS D4,
		SUM(GA17.D5) AS D5,
		SUM(GA17.D6) AS D6,
		SUM(GA17.PK) AS PK,
		SUM(GA17.FI) AS FI,
		SUM(GA17.HP) AS HP,
		SUM(GA17.NS) AS NS,
		SUM(GA17.HL) AS HL
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT	
			GA17.AF_APL_ID||GA17.AF_APL_ID_SFX AS CLUID,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'SF' THEN GA17.AA_TOT_CON ELSE 0 END AS SF,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'SU' THEN GA17.AA_TOT_CON ELSE 0 END AS SU,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'PL' THEN GA17.AA_TOT_CON ELSE 0 END AS PL,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'SL' THEN GA17.AA_TOT_CON ELSE 0 END AS SL,	
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'CS' THEN GA17.AA_TOT_CON ELSE 0 END AS CS,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'CU' THEN GA17.AA_TOT_CON ELSE 0 END AS CU,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'D1' THEN GA17.AA_TOT_CON ELSE 0 END AS D1,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'D2' THEN GA17.AA_TOT_CON ELSE 0 END AS D2,	
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'D3' THEN GA17.AA_TOT_CON ELSE 0 END AS D3,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'D4' THEN GA17.AA_TOT_CON ELSE 0 END AS D4,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'D5' THEN GA17.AA_TOT_CON ELSE 0 END AS D5,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'D6' THEN GA17.AA_TOT_CON ELSE 0 END AS D6,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'PK' THEN GA17.AA_TOT_CON ELSE 0 END AS PK,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'FI' THEN GA17.AA_TOT_CON ELSE 0 END AS FI,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'HP' THEN GA17.AA_TOT_CON ELSE 0 END AS HP,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'NS' THEN GA17.AA_TOT_CON ELSE 0 END AS NS,
			CASE WHEN GA17.AC_CON_UND_LON_TYP = 'HL' THEN GA17.AA_TOT_CON ELSE 0 END AS HL
		FROM 
			OLWHRM1.GA17_CON_LON_DTL GA17

		FOR READ ONLY WITH UR
	) GA17
	INNER JOIN RP1_A RP1
		ON GA17.CLUID = RP1.CLUID
	GROUP BY 
		GA17.CLUID
	ORDER BY 
		GA17.CLUID
;
/*********************************************************
* SELECT REFERENCE INFORMATION 
**********************************************************/
CREATE TABLE REFS AS
	SELECT DISTINCT 
		BR03.*
	FROM CONNECTION TO DB2 
	(
		SELECT 
			BR03.DF_PRS_ID_RFR,
			/*THESE ARE NEEDED FOR LEGACY PROCESSING*/
			INTEGER(BR03.DF_PRS_ID_BR) AS DF_PRS_ID_BR,
			RTRIM(BR03.BM_RFR_LST) AS LAST,
			RTRIM(BR03.BM_RFR_1) AS FIRST,
			RTRIM(BR03.BF_RFR_ZIP) AS ZIP,
			RTRIM(BR03.BX_RFR_STR_ADR_1)||' '||RTRIM(BR03.BX_RFR_STR_ADR_2)	AS ADDRESS,
			RTRIM(BR03.BM_RFR_CT) AS CITY,
			/*THESE ARE FOR NEW REPURCHASE LENDER PROCESSING*/
			BR03.BM_RFR_LST,
			BR03.BM_RFR_1,
			BR03.BF_RFR_ZIP,
			BR03.BX_RFR_STR_ADR_1,
			BR03.BX_RFR_STR_ADR_2,
			BR03.BM_RFR_CT,
			BR03.BC_RFR_ST,
			BR03.BM_RFR_MID,
			BR03.BM_RFR_FGN_CNY,
			BR03.BI_VLD_ADR,
			BR03.BN_RFR_DOM_PHN,
			BR03.BI_DOM_PHN_VLD,
			BR03.BN_RFR_ALT_PHN,
			BR03.BI_ALT_PHN_VLD,
			BR03.BC_RFR_REL_BR,
			BR03.BX_RFR_STR_ADR_1,
			BR03.BX_RFR_STR_ADR_2,
			BR03.DF_PRS_ID_BR AS BF_SSN
		FROM 
			OLWHRM1.BR03_BR_REF BR03
		WHERE 
			BR03.BC_STA_BR03 = 'A'

		FOR READ ONLY WITH UR
	) BR03 
	INNER JOIN RP1_A RP1
		ON BR03.BF_SSN = RP1.BF_SSN
	;
/**************************************************************************
* CREATE DATASET FOR REPURCHASE LENDER ASSIGNMENT PROCESSING 
***************************************************************************/
CREATE TABLE RLAP AS
	SELECT 
		RLAP.*
	FROM CONNECTION TO DB2 
	(
		SELECT 
			GA01.DF_PRS_ID_BR,
			GA10.AF_APL_ID||GA10.AF_APL_ID_SFX AS CLUID,
			GA10.AF_CUR_LON_OPS_LDR AS OLN_LDRS,
			CASE WHEN GA10.AF_CUR_LON_OPS_LDR IN ('830151','831053','899993','899986','829587','833253','888885','831474','830084') THEN 'SLMA'
			     WHEN GA10.AF_CUR_LON_OPS_LDR IN ('826717','829769','830248') THEN 'NLNT'
			END AS RPLR,
			CASE WHEN GA14.AC_LON_STA_TYP IS NULL 
				THEN ''	
				ELSE 'X' 
			END AS GA14_IND
		FROM 
			OLWHRM1.GA01_APP GA01
			INNER JOIN OLWHRM1.GA10_LON_APP GA10
				ON GA01.AF_APL_ID = GA10.AF_APL_ID
			LEFT JOIN OLWHRM1.GA14_LON_STA GA14
				ON GA10.AF_APL_ID = GA14.AF_APL_ID
				AND GA10.AF_APL_ID_SFX = GA14.AF_APL_ID_SFX
				AND GA14.AC_STA_GA14 = 'A'
				AND GA14.AC_LON_STA_TYP IN ('CR','DA','FB','IA','IG','IM','RP','UA','UB')
	WHERE 
		COALESCE(GA10.AA_CUR_PRI,0) > 0
		AND GA10.AF_CUR_LON_OPS_LDR IN ('830151','831053','899993','899986','829587','833253','888885','831474','830084','826717','829769','830248')

	FOR READ ONLY WITH UR
	) RLAP 
	INNER JOIN RP1_A RP1
		ON RLAP.DF_PRS_ID_BR = RP1.BF_SSN
	;
/**************************************************************************
* CREATE TABLE WITH ONELINK DEFERMENT DATA
***************************************************************************/
CREATE TABLE OL_DEFR AS
	SELECT DISTINCT 
		OLDEFR.*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT 
			GA01.DF_PRS_ID_BR AS OL_DEFR_SSN,
			GA14.AC_LON_STA_REA,
			GA14.AD_DFR_BEG,
			GA14.AD_DFR_END
		FROM 
			OLWHRM1.GA01_APP GA01
			INNER JOIN OLWHRM1.GA10_LON_APP GA10
				ON GA01.AF_APL_ID = GA10.AF_APL_ID
			INNER JOIN OLWHRM1.GA14_LON_STA GA14
				ON GA10.AF_APL_ID = GA14.AF_APL_ID
				AND GA10.AF_APL_ID_SFX = GA14.AF_APL_ID_SFX
		WHERE 
			GA14.AC_LON_STA_TYP = 'DA'
			AND GA14.AC_LON_STA_REA NOT IN ('FT','HT','GF','31')
			AND GA14.AD_DFR_END <= CURRENT DATE 

		FOR READ ONLY WITH UR
	) OLDEFR
	INNER JOIN RP1_A RP1
		ON OLDEFR.OL_DEFR_SSN = RP1.BF_SSN
	;
/**************************************************************************
* CREATE TABLE WITH COMPASS DEFERMENT DATA
***************************************************************************/
CREATE TABLE CO_DEFR AS
	SELECT DISTINCT 
		CODEFR.*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT 
			LN10.BF_SSN AS CO_DEFR_SSN,
			LN10.LF_LON_ALT||RIGHT('00'||LN10.LN_LON_ALT_SEQ,2) AS CLUID,
		    DF10.LC_DFR_TYP,
		    LN50.LD_DFR_BEG,
		    LN50.LD_DFR_END,
		    COALESCE(TRIM(DF10.LF_DOE_SCL_DFR),LN10.LF_DOE_SCL_ORG) AS LF_DOE_SCL_DFR,
		    DF10.LD_DFR_INF_CER
		FROM 
			OLWHRM1.LN10_LON LN10
			INNER JOIN
			(
				SELECT
					LN10.BF_SSN,
					LN10.LF_LON_ALT||RIGHT('00'||LN10.LN_LON_ALT_SEQ,2) AS Cluid,
					MAX(LN10.LN_SEQ) OVER(PARTITION BY LN10.BF_SSN, LN10.LF_LON_ALT||RIGHT('00'||LN10.LN_LON_ALT_SEQ,2)) AS LN_SEQ,
					MAX(LN40.LN_SEQ_CLM_PCL) OVER(PARTITION BY LN10.BF_SSN, LN10.LF_LON_ALT||RIGHT('00'||LN10.LN_LON_ALT_SEQ,2)) AS LN_SEQ_CLM_PCL					
				FROM
					OLWHRM1.LN40_LON_CLM_PCL LN40
					INNER JOIN OLWHRM1.LN10_LON LN10
						ON LN40.BF_SSN = LN10.BF_SSN
						AND LN40.LN_SEQ = LN10.LN_SEQ
				WHERE
					LN40.LC_REA_CAN_CLM_PCL = ''
					AND LN40.LC_REA_CLP_LON IN('03','06')
					AND LN40.LC_TYP_REC_CLP_LON = '1'
					AND LN40.LC_TYP_REJ_RTN = ' '
			) LN40
				ON LN40.BF_SSN = LN10.BF_SSN
				AND LN40.LN_SEQ = LN10.LN_SEQ
				AND LN40.Cluid = LN10.LF_LON_ALT||RIGHT('00'||LN10.LN_LON_ALT_SEQ,2)
			INNER JOIN OLWHRM1.LN50_BR_DFR_APV LN50
			    ON LN10.BF_SSN = LN50.BF_SSN
			    AND LN10.LN_SEQ = LN50.LN_SEQ
			INNER JOIN OLWHRM1.DF10_BR_DFR_REQ DF10
			    ON DF10.BF_SSN = LN50.BF_SSN
			    AND DF10.LF_DFR_CTL_NUM = LN50.LF_DFR_CTL_NUM
		WHERE 
			DF10.LC_STA_DFR10 = 'A'
			AND LN50.LC_STA_LON50 = 'A'

		FOR READ ONLY WITH UR
	) CODEFR
	INNER JOIN RP1_A RP1
		ON CODEFR.CO_DEFR_SSN = RP1.BF_SSN
		AND CODEFR.CLUID = RP1.CLUID
	;
/**************************************************************************
* CREATE TABLE WITH ONELINK FORBEARANCE DATA
***************************************************************************/
CREATE TABLE OL_FORB AS
	SELECT 
		*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT 
			GA01.DF_PRS_ID_BR AS OL_FORB_SSN,
			GA14.AC_LON_STA_TYP,
			GA14.AD_LON_STA AS OL_FRB_BEG
		FROM 
			OLWHRM1.GA01_APP GA01
			INNER JOIN OLWHRM1.GA10_LON_APP GA10
				ON GA01.AF_APL_ID = GA10.AF_APL_ID
			INNER JOIN OLWHRM1.GA14_LON_STA GA14
				ON GA10.AF_APL_ID = GA14.AF_APL_ID
				AND GA10.AF_APL_ID_SFX = GA14.AF_APL_ID_SFX

		FOR READ ONLY WITH UR
	) OLFORB
	INNER JOIN RP1_A RP1
		ON OLFORB.OL_FORB_SSN = RP1.BF_SSN
	;
/**************************************************************************
* CREATE TABLE WITH COMPASS FORBEARANCE DATA
***************************************************************************/
CREATE TABLE CO_FORB AS
	SELECT 
		*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT 
			LN10.BF_SSN AS CO_FORB_SSN,
			LN10.LF_LON_ALT||RIGHT('00'||LN10.LN_LON_ALT_SEQ,2) AS CLUID,
		    FB10.LC_FOR_TYP,
		    LN60.LD_FOR_BEG,
		    LN60.LD_FOR_END,
		    FB10.LI_CAP_FOR_INT_REQ
		FROM 
			OLWHRM1.LN10_LON LN10
			INNER JOIN
			(
				SELECT
					LN10.BF_SSN,
					LN10.LF_LON_ALT||RIGHT('00'||LN10.LN_LON_ALT_SEQ,2) AS Cluid,
					MAX(LN10.LN_SEQ) OVER(PARTITION BY LN10.BF_SSN, LN10.LF_LON_ALT||RIGHT('00'||LN10.LN_LON_ALT_SEQ,2)) AS LN_SEQ,
					MAX(LN40.LN_SEQ_CLM_PCL) OVER(PARTITION BY LN10.BF_SSN, LN10.LF_LON_ALT||RIGHT('00'||LN10.LN_LON_ALT_SEQ,2)) AS LN_SEQ_CLM_PCL					
				FROM
					OLWHRM1.LN40_LON_CLM_PCL LN40
					INNER JOIN OLWHRM1.LN10_LON LN10
						ON LN40.BF_SSN = LN10.BF_SSN
						AND LN40.LN_SEQ = LN10.LN_SEQ
				WHERE
					LN40.LC_REA_CAN_CLM_PCL = ''
					AND LN40.LC_REA_CLP_LON IN('03','06')
					AND LN40.LC_TYP_REC_CLP_LON = '1'
					AND LN40.LC_TYP_REJ_RTN = ' '
			) LN40
				ON LN40.BF_SSN = LN10.BF_SSN
				AND LN40.LN_SEQ = LN10.LN_SEQ
				AND LN40.Cluid = LN10.LF_LON_ALT||RIGHT('00'||LN10.LN_LON_ALT_SEQ,2)
			INNER JOIN OLWHRM1.LN60_BR_FOR_APV LN60
			    ON LN10.BF_SSN = LN60.BF_SSN
			    AND LN10.LN_SEQ = LN60.LN_SEQ
			INNER JOIN OLWHRM1.FB10_BR_FOR_REQ FB10
			    ON FB10.BF_SSN = LN60.BF_SSN
			    AND FB10.LF_FOR_CTL_NUM = LN60.LF_FOR_CTL_NUM
		WHERE 
			FB10.LC_STA_FOR10 = 'A'
			AND LN60.LC_STA_LON60 = 'A'
			AND LN60.LD_FOR_END <= CURRENT DATE

		FOR READ ONLY WITH UR
	) COFORB
	INNER JOIN RP1_A RP1
		ON COFORB.CO_FORB_SSN = RP1.BF_SSN
		AND COFORB.CLUID = RP1.CLUID
	;
/**************************************************************************
* CREATE TABLE WITH ENROLLMENT DATA
***************************************************************************/
CREATE TABLE ENR AS
	SELECT 
		ENR.*
	FROM CONNECTION TO DB2 
	(
		SELECT DISTINCT 
			GA10.AF_APL_ID||GA10.AF_APL_ID_SFX AS ENR_CLUID,
			SD02.LC_STU_ENR_STA,
			SD02.LD_STU_ENR_STA,
			SD02.IF_OPS_SCL_RPT,
			SD02.LD_ENR_CER
		FROM 
			OLWHRM1.GA01_APP GA01
			INNER JOIN OLWHRM1.GA10_LON_APP GA10
				ON GA01.AF_APL_ID = GA10.AF_APL_ID 
			INNER JOIN OLWHRM1.SD02_STU_ENR SD02
				ON GA01.DF_PRS_ID_STU = SD02.DF_PRS_ID_STU

		FOR READ ONLY WITH UR
	) ENR
	INNER JOIN RP1_A RP1
		ON ENR.ENR_CLUID = RP1.CLUID
	;
/**************************************************************************
* CREATE TABLE WITH CONSOL INFO FOR CL LOANS
***************************************************************************/
CREATE TABLE CNSL AS
	SELECT 
		RP1.CLUID,
		GA17.CNSL_TYP,
		SUM(GA17.AA_TOT_CON) AS AA_TOT_CON
	FROM CONNECTION TO DB2 
	(
		SELECT
			AF_APL_ID||AF_APL_ID_SFX AS CNSL_CLUID,
			CASE WHEN AC_CON_UND_LON_TYP IN ('CS','D1','D5','SF')
				THEN 'SUB'
				 WHEN AC_CON_UND_LON_TYP IN	('CU','D2','D3','D4','D6','D7','FI','GB','HL','HP','NS','PK','PL','SL','SU')
				THEN 'UNSUB'
			END AS CNSL_TYP,
			AA_TOT_CON
		FROM 
			OLWHRM1.GA17_CON_LON_DTL 

		FOR READ ONLY WITH UR
	) GA17
	INNER JOIN RP1_A RP1
		ON GA17.CNSL_CLUID = RP1.CLUID
	GROUP BY 
		RP1.CLUID
		,GA17.CNSL_TYP
	;

DISCONNECT FROM DB2;
ENDRSUBMIT;

DATA RP2_B; SET WORKLOCL.RP2_B; RUN;
DATA DISB_ACT; SET WORKLOCL.DISB_ACT; RUN;
DATA DISB_CAN; SET WORKLOCL.DISB_CAN; RUN;
DATA CONDTL_BK; SET WORKLOCL.CONDTL_BK; RUN;
DATA REFS; SET WORKLOCL.REFS; RUN;
DATA RLAP; SET WORKLOCL.RLAP; RUN;
DATA OL_DEFR; SET WORKLOCL.OL_DEFR; RUN;
DATA CO_DEFR; SET WORKLOCL.CO_DEFR; RUN;
DATA OL_FORB; SET WORKLOCL.OL_FORB; RUN;
DATA CO_FORB; SET WORKLOCL.CO_FORB; RUN;
DATA ENR; SET WORKLOCL.ENR; RUN;
DATA CNSL; SET WORKLOCL.CNSL; RUN;
DATA MULT_LOANS; SET WORKLOCL.MULT_LOANS; RUN;
DATA BOND_IDS; SET WORKLOCL.BOND_IDS; RUN;

PROC SQL;
CREATE TABLE RP2_B AS
	SELECT
		R.*,
		COALESCE(B.IF_BND_ISS_NEW,"&BOND_ID") AS BOND_ID
	FROM
		RP2_B R
		LEFT JOIN BOND_IDS B
			ON B.IF_BND_ISS_OLD = R.IF_BND_ISS
;
QUIT;


/**************************************************************
* IF NO DATA RETURNED END THE JOB - COMMENT FOR LOCAL RUNS BUT 
* SHOULD BE LIVE IN PRODUCTION
***************************************************************/
/*%MACRO ABORTIF;*/
/*%LET DSID=%SYSFUNC(OPEN(WORK.RP2_B));*/
/*%LET HASOBS=%SYSFUNC(ATTRN(&DSID,ANY));*/
/*%LET RC=%SYSFUNC(CLOSE(&DSID));*/
/*%IF &HASOBS=0 %THEN	%DO;*/
/*	%DO I=2 %TO 30;*/
/*		DATA _NULL_;*/
/*			FILE REPORT&I;*/
/*		RUN;*/
/*	%END;*/
/*	DATA _NULL_;*/
/*		PUT 37*'*';*/
/*	    PUT "NO DATA FOR REPURCHASES - &SYSDATE9.";*/
/*		PUT 37*'*';*/
/*		ABORT ABEND 99;*/
/*	RUN;*/
/*%END;*/
/*%MEND ABORTIF;*/
/*%ABORTIF;*/
/***************************************************************************************
* TRANSPOSITION MACRO 
****************************************************************************************/
%MACRO TRSP_RS(DSI,PFIX,NEWCOL,BYVAR,DS_NEW);
PROC TRANSPOSE DATA=&DSI OUT=&PFIX._&NEWCOL(DROP=_NAME_ _LABEL_) PREFIX=&NEWCOL._;
	VAR &NEWCOL;
	BY &BYVAR;
RUN;
DATA &DS_NEW;
	MERGE &DS_NEW &PFIX._&NEWCOL ;
	BY &BYVAR;
RUN;
PROC DATASETS;
	DELETE &PFIX._&NEWCOL ;
QUIT;
%MEND TRSP_RS;
/***************************************************************************************
* ORIGINAL INTEREST RATE PROCESSING
****************************************************************************************/
PROC SQL;
CREATE TABLE ORG_INTR_DATA AS
	SELECT DISTINCT 
		ORGITR.CLUID,
		ORGITR.ORG_INT_RATE FORMAT = 8.3
	FROM 
	(
		SELECT DISTINCT 
			RP2.CLUID,
			RP2.LR_ITR AS ORG_INT_RATE 
		FROM 
			RP2_B RP2
			INNER JOIN DISB_ACT DISB
				ON RP2.CLUID = DISB.CLUID
		WHERE 
			DISB.AD_DISB_1 BETWEEN '15dec1968'd AND '03oct1980'd
			AND RP2.AX_STU_ENR_BEG_CYM < '198101'
			AND RP2.AC_ORG_INT_TYP = 'F'
			AND RP2.LR_ITR = 7

		UNION
		
		SELECT DISTINCT 
			RP2.CLUID,
			RP2.LR_ITR AS ORG_INT_RATE 
		FROM 
			RP2_B RP2
			INNER JOIN DISB_ACT DISB
				ON RP2.CLUID = DISB.CLUID
		WHERE 
			DISB.AD_DISB_1 BETWEEN '03oct1980'd AND '13sep1983'd
			AND RP2.AX_STU_ENR_BEG_CYM < '198101'
			AND RP2.AC_ORG_INT_TYP = 'F'
			AND RP2.LR_ITR = 9

		UNION

		SELECT DISTINCT 
			RP2.CLUID,
			RP2.LR_ITR AS ORG_INT_RATE 
		FROM 
			RP2_B RP2
			INNER JOIN DISB_ACT DISB
				ON RP2.CLUID = DISB.CLUID
		WHERE 
			DISB.AD_DISB_1 BETWEEN '13sep1983'd AND '01jul1988'd
			AND RP2.AC_ORG_INT_TYP = 'F'
			AND RP2.LR_ITR = 8
			AND 
			(
				RP2.AX_STU_ENR_BEG_CYM < '198807'
				OR RP2.BF_SSN IN (SELECT COALESCE(BF_SSN,'000000000') FROM MULT_LOANS WHERE COUNTED = 1)
			)
	) ORGITR
	;
QUIT;
PROC SORT DATA=RP2_B; BY CLUID; RUN;
PROC SORT DATA=ORG_INTR_DATA; BY CLUID; RUN;

DATA REHB_1;
	MERGE RP2_B ORG_INTR_DATA;
	BY CLUID;
RUN;

/***************************************************************************************
* ONELINK DEFERMENT PROCESSING
****************************************************************************************/
PROC SORT DATA=OL_DEFR;
BY OL_DEFR_SSN AC_LON_STA_REA AD_DFR_END AD_DFR_BEG;
RUN;

DATA OL_DEFR;
SET OL_DEFR;
BY OL_DEFR_SSN AC_LON_STA_REA AD_DFR_END;
IF FIRST.AD_DFR_END THEN OUTPUT;
RUN;

PROC SORT DATA=OL_DEFR NODUPKEY; BY OL_DEFR_SSN AC_LON_STA_REA AD_DFR_BEG AD_DFR_END; RUN;
PROC SORT DATA=OL_DEFR OUT=OL_DEFR_LINE (KEEP=OL_DEFR_SSN) NODUPKEY; BY OL_DEFR_SSN; RUN;

%TRSP_RS(OL_DEFR,DEF,AC_LON_STA_REA,OL_DEFR_SSN,OL_DEFR_LINE);
%TRSP_RS(OL_DEFR,DEF,AD_DFR_BEG,OL_DEFR_SSN,OL_DEFR_LINE);
%TRSP_RS(OL_DEFR,DEF,AD_DFR_END,OL_DEFR_SSN,OL_DEFR_LINE);

/***************************************************************************************
* COMPASS DEFERMENT PROCESSING
****************************************************************************************/
PROC SORT DATA=CO_DEFR;
BY CO_DEFR_SSN LC_DFR_TYP LD_DFR_END LD_DFR_BEG;
RUN;

DATA CO_DEFR;
SET CO_DEFR;
BY CO_DEFR_SSN LC_DFR_TYP LD_DFR_END;
IF FIRST.LD_DFR_END THEN OUTPUT;
RUN;

PROC SORT DATA=CO_DEFR NODUPKEY;BY CO_DEFR_SSN LD_DFR_BEG LD_DFR_END LC_DFR_TYP ;RUN;
PROC SORT DATA=CO_DEFR OUT=CO_DEFR_LINE (KEEP=CO_DEFR_SSN) NODUPKEY; BY CO_DEFR_SSN ;RUN;

%TRSP_RS(CO_DEFR,DEF,LC_DFR_TYP,CO_DEFR_SSN,CO_DEFR_LINE);
%TRSP_RS(CO_DEFR,DEF,LD_DFR_BEG,CO_DEFR_SSN,CO_DEFR_LINE);
%TRSP_RS(CO_DEFR,DEF,LD_DFR_END,CO_DEFR_SSN,CO_DEFR_LINE);
%TRSP_RS(CO_DEFR,DEF,LF_DOE_SCL_DFR,CO_DEFR_SSN,CO_DEFR_LINE);
%TRSP_RS(CO_DEFR,DEF,LD_DFR_INF_CER,CO_DEFR_SSN,CO_DEFR_LINE);

/***************************************************************************************
* ONELINK FORBEARANCE PROCESSING
****************************************************************************************/
PROC SORT DATA=OL_FORB NODUPKEY;BY OL_FORB_SSN DESCENDING OL_FRB_BEG;RUN;

DATA OL_FORB (DROP=TEMP);
	SET OL_FORB ;
	LABEL OL_FRB_END = OL_FRB_END;
	FORMAT OL_FRB_END TEMP MMDDYY10.;
	BY OL_FORB_SSN;
	RETAIN TEMP;
	IF FIRST.OL_FORB_SSN THEN DO;
		OL_FRB_END= .;
		TEMP = OL_FRB_BEG;
		END;
	ELSE DO;
		OL_FRB_END= TEMP;
		TEMP = OL_FRB_BEG;
		END;
RUN;

DATA OL_FORB;
	SET OL_FORB;
	WHERE AC_LON_STA_TYP = 'FB' AND OL_FRB_BEG >= '01JUN2001'D;
	IF OL_FRB_END= . THEN OL_FRB_END= INTNX('YEAR',OL_FRB_BEG,+1,'S');
RUN;

PROC SORT DATA=OL_FORB;
	BY OL_FORB_SSN OL_FRB_BEG OL_FRB_END;
RUN;

PROC SORT DATA=OL_FORB NODUPKEY; BY OL_FORB_SSN OL_FRB_BEG OL_FRB_END; RUN;
PROC SORT DATA=OL_FORB OUT=OL_FORB_LINE (KEEP=OL_FORB_SSN) NODUPKEY; BY OL_FORB_SSN; RUN;

%TRSP_RS(OL_FORB,FRB,OL_FRB_BEG,OL_FORB_SSN,OL_FORB_LINE);
%TRSP_RS(OL_FORB,FRB,OL_FRB_END,OL_FORB_SSN,OL_FORB_LINE);

/***************************************************************************************
* COMPASS FORBEARANCE PROCESSING
****************************************************************************************/
PROC SORT DATA=CO_FORB;
	BY CO_FORB_SSN LC_FOR_TYP LD_FOR_END LD_FOR_BEG;
RUN;

DATA CO_FORB;
	SET CO_FORB;
	BY CO_FORB_SSN LC_FOR_TYP LD_FOR_END;
	IF FIRST.LD_FOR_END THEN OUTPUT;
RUN;

PROC SORT DATA=CO_FORB NODUPKEY; BY CO_FORB_SSN LD_FOR_BEG LD_FOR_END LC_FOR_TYP; RUN;
PROC SORT DATA=CO_FORB OUT=CO_FORB_LINE (KEEP=CO_FORB_SSN) NODUPKEY; BY CO_FORB_SSN; RUN;

%TRSP_RS(CO_FORB,DEF,LC_FOR_TYP,CO_FORB_SSN,CO_FORB_LINE);
%TRSP_RS(CO_FORB,DEF,LD_FOR_BEG,CO_FORB_SSN,CO_FORB_LINE);
%TRSP_RS(CO_FORB,DEF,LD_FOR_END,CO_FORB_SSN,CO_FORB_LINE);
%TRSP_RS(CO_FORB,DEF,LI_CAP_FOR_INT_REQ,CO_FORB_SSN,CO_FORB_LINE);

/**********************************************
* MERGE MOST OF THE DATA 
***********************************************/
PROC SQL;
CREATE TABLE REPUR (DROP=OL_DEFR_SSN BR_ID LN_ID CO_DEFR_SSN OL_FORB_SSN CO_FORB_SSN) AS 
	SELECT DISTINCT 
		RP2.*,
	/*ACTUAL DISBS*/
		DISBA.AA_DISB_1,
		DISBA.AD_DISB_1,
		DISBA.AC_DISB_1,
		DISBA.AN_DISB_1,
		DISBA.GTE_1,
		DISBA.ORG_1,
		DISBA.AA_DISB_2,
		DISBA.AD_DISB_2,
		DISBA.AC_DISB_2,
		DISBA.AN_DISB_2,
		DISBA.GTE_2,
		DISBA.ORG_2,
		DISBA.AA_DISB_3,
		DISBA.AD_DISB_3,
		DISBA.AC_DISB_3,
		DISBA.AN_DISB_3,
		DISBA.GTE_3,
		DISBA.ORG_3,
		DISBA.AA_DISB_4,
		DISBA.AD_DISB_4,
		DISBA.AC_DISB_4,
		DISBA.AN_DISB_4,
		DISBA.GTE_4,
		DISBA.ORG_4,
	/*CANCELED DISBS*/
		DISBC.CA_DISB_1,
		DISBC.CD_DISB_1,
		DISBC.CC_DISB_1,
		DISBC.CO_DISB_1,
		DISBC.CA_DISB_2,
		DISBC.CD_DISB_2,
		DISBC.CC_DISB_2,
		DISBC.CO_DISB_2,
		DISBC.CA_DISB_3,
		DISBC.CD_DISB_3,
		DISBC.CC_DISB_3,
		DISBC.CO_DISB_3,
		DISBC.CA_DISB_4,
		DISBC.CD_DISB_4,
		DISBC.CC_DISB_4,
		DISBC.CO_DISB_4,
	/*UNDERLYING CONSOLS*/
		CONTDTL.SF,
		CONTDTL.SU,
		CONTDTL.PL,
		CONTDTL.SL,
		CONTDTL.CS,
		CONTDTL.CU,
		CONTDTL.D1,
		CONTDTL.D2,
		CONTDTL.D3,
		CONTDTL.D4,
		CONTDTL.D5,
		CONTDTL.D6,
		CONTDTL.PK,
		CONTDTL.FI,
		CONTDTL.HP,
		CONTDTL.NS,
		CONTDTL.HL,
	/*REFERENCE INDICATOR FOR BORROWERS WITH > 2 REFERENCES*/
		REF2.REF_IND,
	/*DEFERMENT INFO*/
		OLDEFR.*,
		CODEFR.*,
	/*FORBEARANCE INFO*/
		OLFORB.*,
		COFORB.*,
	/*MASKED SSN*/
		CATX('-','XXX','XX',SUBSTR(RP2.BF_SSN,6,4)) LENGTH=11 AS MASKED_SSN,
	/*IBR ELIGIBLE INDICATOR*/
		CASE WHEN RP2.AC_LON_TYP = 'CL' AND CONTDTL.PL + CONTDTL.D3 + CONTDTL.D4 + CONTDTL.PK > 0 
			THEN 'N'
			ELSE ' '
		END AS IBR_ELIG_IND
	FROM 
		RP2_B RP2
		LEFT JOIN DISB_ACT DISBA
			ON RP2.CLUID = DISBA.CLUID
		LEFT JOIN DISB_CAN DISBC
			ON RP2.CLUID = DISBC.CLUID
		LEFT JOIN CONDTL_BK CONTDTL
			ON RP2.CLUID = CONTDTL.CLUID
		LEFT JOIN 
		(
			SELECT 
				BF_SSN,
				COUNT(*) AS COUNT,
				'X' AS REF_IND
			FROM 
				REFS
			GROUP BY 
				BF_SSN
			HAVING 
				COUNT(*) > 2
		) REF2
			ON RP2.BF_SSN = REF2.BF_SSN
		LEFT JOIN 
		(
			SELECT 
				*
			FROM 
				OL_DEFR_LINE
		) OLDEFR
			ON RP2.BF_SSN = OLDEFR.OL_DEFR_SSN
		LEFT JOIN 
		(
			SELECT 
				*
			FROM 
				CO_DEFR_LINE
		) CODEFR
			ON RP2.BF_SSN = CODEFR.CO_DEFR_SSN
		LEFT JOIN 
		(
			SELECT 
				*
			FROM 
				OL_FORB_LINE
		) OLFORB
			ON RP2.BF_SSN = OLFORB.OL_FORB_SSN
		LEFT JOIN 
		(
			SELECT 
				*
			FROM 
				CO_FORB_LINE
		) COFORB
			ON RP2.BF_SSN = COFORB.CO_FORB_SSN
	;
QUIT;

/***************************************************************************************
* CALCULATE AA_TOT_EDU_DET_PNT IF NECESSARY
****************************************************************************************/
PROC SQL;
CREATE TABLE DIMSUM AS 
	SELECT 
		BF_SSN,
		SUM(REPUR.D1 + REPUR.D2 + REPUR.D3 + REPUR.D4 ) AS GTOT		
	FROM 
	(
		SELECT 
			BF_SSN,
			SUM(COALESCE(AA_DISB_1,0)) AS D1,
			SUM(COALESCE(AA_DISB_2,0)) AS D2,
			SUM(COALESCE(AA_DISB_3,0)) AS D3,
			SUM(COALESCE(AA_DISB_4,0)) AS D4
		FROM 
			REPUR
		GROUP BY 
			BF_SSN
	) REPUR
	GROUP BY 
		BF_SSN
	;
QUIT;

PROC SORT DATA=DIMSUM; BY BF_SSN; RUN;
PROC SORT DATA=REPUR; BY BF_SSN; RUN;

DATA REPUR (DROP=GTOT);
	MERGE REPUR DIMSUM;
	BY BF_SSN;
	IF AA_TOT_EDU_DET_PNT = . 
		THEN AA_TOT_EDU_DET_PNT = GTOT;
	ELSE AA_TOT_EDU_DET_PNT = AA_TOT_EDU_DET_PNT;
RUN;

/***************************************************************************************
* LENDER ASSIGNMENT PROCESSING 
* SLMA: '830151','831053','899993','899986','829587','833253','888885','831474','830084'
* NELNET: '826717','829769','830248'
****************************************************************************************/
PROC SQL;
CREATE TABLE LAP AS
	SELECT DISTINCT 
		REPUR.BF_SSN
		,'NELNET' AS REPUR_IND
	FROM 
		(
			SELECT 
				BF_SSN,
				CLUID,
				BTYPE,
				CASE WHEN AF_CUR_LON_OPS_LDR IN ('830151','831053','899993','899986','829587','833253','888885','831474','830084') THEN 'SLMA'
				     WHEN AF_CUR_LON_OPS_LDR IN ('826717','829769','830248') THEN 'NLNT' 
					 ELSE 'INHS'
				END AS RPLR
			FROM 
				REPUR
		) REPUR
		INNER JOIN 
		(
			SELECT 
				DF_PRS_ID_BR,
				CLUID,
				RPLR
			FROM
				RLAP
			WHERE
				RPLR = 'NLNT'
				AND GA14_IND = 'X'
		) RLAP
			ON REPUR.BF_SSN = RLAP.DF_PRS_ID_BR
			AND REPUR.RPLR = RLAP.RPLR
	WHERE 
		REPUR.CLUID NOT IN (SELECT DISTINCT CLUID FROM RLAP)
	ORDER BY 
		BF_SSN
	;
QUIT;

PROC SORT DATA=REPUR; BY BF_SSN; RUN;

DATA REPUR;
	MERGE REPUR LAP;
	BY BF_SSN;	
RUN;

/*MAKE THE ACTUAL LENDER ASSIGNMENT*/
DATA REPUR;
	SET REPUR;
	IF BTYPE = 'NOBK' AND AF_CUR_LON_OPS_LDR IN ('830151','831053','899993','899986','829587','833253','888885','831474','830084') 
		THEN REP_LDR = '888885';
	ELSE IF REPUR_IND = 'NELNET' 
		THEN REP_LDR = '826717';
	ELSE DO;
		REP_LDR = '828476';
		BONDID = BOND_ID;
		END;
RUN;

/***************************************************************************************
* REFERENCE PROCESSING
****************************************************************************************
* GET INFO FOR TWO (ONLY) REFERENCES ON ONE LINE PER BORROWER
****************************************************************************************/
PROC SORT DATA=REFS; BY BF_SSN; RUN;
PROC SORT DATA=REFS OUT=REF_LINE (KEEP=BF_SSN) NODUPKEY; BY BF_SSN; RUN;

%TRSP_RS(REFS,REF,BM_RFR_1,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BM_RFR_MID,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BM_RFR_LST,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BX_RFR_STR_ADR_1,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BX_RFR_STR_ADR_2,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BM_RFR_CT,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BC_RFR_ST,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BF_RFR_ZIP,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BM_RFR_FGN_CNY,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BI_VLD_ADR,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BN_RFR_DOM_PHN,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BI_DOM_PHN_VLD,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BN_RFR_ALT_PHN,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BI_ALT_PHN_VLD,BF_SSN,REF_LINE);
%TRSP_RS(REFS,REF,BC_RFR_REL_BR,BF_SSN,REF_LINE);

/*TIE INFORMATION TO ONE LINE FOR BORROWER*/
PROC SORT DATA=REPUR; BY BF_SSN CLUID; RUN;

DATA REPUR REPUR_TEMP;
	SET REPUR;
	BY BF_SSN;
	IF FIRST.BF_SSN 
		THEN OUTPUT REPUR_TEMP;
	ELSE DO; 
		REF_IND = '';
		OUTPUT REPUR;
		END;
RUN;

PROC SORT DATA=REPUR_TEMP; BY BF_SSN; RUN;
PROC SORT DATA=REF_LINE; BY BF_SSN; RUN;

DATA REPUR_TEMP;
	MERGE REPUR_TEMP REF_LINE;
	BY BF_SSN ;
RUN;

DATA REPUR;
	SET REPUR REPUR_TEMP;
RUN;

PROC SORT DATA=REPUR; BY BF_SSN CLUID; RUN;

/*MERGE REPURCHASE LENDER TO REFERNCES FOR LEGACY PROCESSING*/
PROC SORT DATA=REPUR OUT=REP_REF_MERGE(KEEP=BF_SSN REP_LDR DM_PRS_LST DM_PRS_1 DM_PRS_MID) NODUPKEY; BY BF_SSN REP_LDR; RUN;
PROC SORT DATA=REFS; BY BF_SSN; RUN;

DATA REFS;
	MERGE REFS REP_REF_MERGE;
	BY BF_SSN ;
	BWRNAME = TRIM(LEFT(DM_PRS_LST))||', '||TRIM(LEFT(DM_PRS_1))||' '||TRIM(LEFT(DM_PRS_MID)); 
RUN;

/********************************************************************************************************
* CALCULATE THE LOAN BALANCE OF THE 20TH OF THE CURRENT MONTH (THE 20TH IS THE REPURCHASE EFFECTIVE DATE)
* FOR THE MOST PART THIS IS LEAGACY CODE THAT HAS JUST BEEN REARRANGED. 
*********************************************************************************************************/
DATA REPUR;
	SET REPUR;
	/*REPURCHASE LENDER SPECIFIC VARIABLES*/
	IF REP_LDR = '888885' THEN DO; /*SLMA*/
		DT_REPUR = INTNX('MONTH',DATE(),1)+19;
		PERIOD = INTCK('DAY',DC02LTD,INTNX('MONTH',DATE(),1)+19); /*NUMBER OF DAYS FROM CURRENT DATE TO 20TH*/
		RP_LNDR = "888885  __________"; 
		END;
	ELSE IF REP_LDR IN ('826717','828476') THEN DO; /*NELNET & UHEAA*/
		DT_REPUR = intnx('month',DATE(),0)+19;
		PERIOD = INTCK('DAY',DC02LTD,INTNX('MONTH',DATE(),0)+19); /*NUMBER OF DAYS FROM CURRENT DATE TO 20TH*/
		IF REP_LDR = '826717' 
			THEN RP_LNDR = "826717  __________";
		ELSE IF REP_LDR = '828476' 
			THEN RP_LNDR = "828476  __________";
		END;
	/*NON LENDER SPECIFIC VARIABLES*/
		NAME = TRIM(DM_PRS_LST)||', '||TRIM(DM_PRS_1);
		SSN = INPUT(BF_SSN, 9.);
		INTACRL = ROUND(ROUND(DC10PRINC,.01) * (RATE/100) / 365, .01) * PERIOD;/*INTEREST TO ACCRUE FROM CURRENT DATE TO 20TH. Need to round principal individually and then the product of it and rate so that level of precision does not cause rounding errors*/
		BAL = DC10PRINC + CURINT + INTACRL; 							/* TOTAL BALANCE AS OF 20TH. */										
		INTTOT = CURINT + INTACRL; 									/* INTEREST TOTAL AS OF REPURCHASE DATE. */
		INTDAILY = ROUND(DC10PRINC * (RATE/100) / 365, .01);
RUN;

/********************************************************************
* CONSOLIDATION PROCESSING STARTS HERE
*********************************************************************
* SET UNDERLYING CONSOL SUB AND UNSUB INDICATOR
*********************************************************************/
PROC SQL;
CREATE TABLE REPURT AS 
	SELECT DISTINCT 
		REPUR.*,
		ULCTCount.ULCT,
		CNSL.CNSL_TYP AS UNSUB_LN
	FROM 
		REPUR REPUR
		LEFT JOIN 
		(
			SELECT 
				CLUID,
				COUNT(*) AS ULCT
			FROM 
				CNSL
			WHERE 
				CNSL_TYP IN ('SUB','UNSUB')
			GROUP BY
				CLUID
		) ULCTCount
			ON REPUR.CLUID = ULCTCount.CLUID
		LEFT JOIN CNSL CNSL
			ON REPUR.CLUID = CNSL.CLUID
			AND CNSL.CNSL_TYP = 'UNSUB'
;
QUIT;
/*CLEAN UP DATA SETS*/
DATA REPUR;	SET REPURT; RUN;
PROC DATASETS; DELETE REPURT; QUIT;

/*IF LOAN IS CONSOL WITH BOTH SUB AND UNSUB AMOUNTS THEN PROCESS OTHERWISE PUT BACK IN REPUR DATA SET*/
DATA REPUR CNSLA(DROP=SUBSIDY AA_DISB_1);
	SET REPUR;
	IF AC_LON_TYP = 'CL' THEN DO;
		IF AD_APL_RCV >= '13NOV1997'D & ULCT = 2 THEN 
			OUTPUT CNSLA;
		ELSE DO;
			IF AD_APL_RCV < '13NOV1997'D | UNSUB_LN ^= '' THEN 
				SUBSIDY = 'N';
			ELSE 
				SUBSIDY = 'Y';
			OUTPUT REPUR;
		END;
	END;	
	ELSE 
		OUTPUT REPUR;
RUN;
/*CALCULATE SUB AND UNSUB PERCENTAGE OF GUARANTY AMOUNT*/
PROC SQL;
CREATE TABLE CNSLB AS
	SELECT DISTINCT 
		CNSLA.*,
		CNSL.CNSL_TYP,
		CNSL.AA_TOT_CON,
		ROUND(CNSL.AA_TOT_CON / CNSLA.AA_GTE_LON_AMT,.0000000001) AS PCAL,
		CNSLA.DC10PRINC,
		CNSLA.INTTOT
	FROM 
		CNSLA CNSLA
		INNER JOIN CNSL CNSL
			ON CNSLA.CLUID = CNSL.CLUID
	;
QUIT;

/*SORT AND CALCULATE VALUES*/
PROC SORT DATA=CNSLB; BY CLUID CNSL_TYP; RUN;

DATA CNSLB (DROP=TEMP_VAR TEMP_VAR_PRINC TEMP_VAR_INT TEMP_VAR_IBR CNSL_TYP AA_TOT_CON PCAL);
	SET CNSLB;
	BY CLUID;
	RETAIN TEMP_VAR;
	RETAIN TEMP_VAR_PRINC;
	RETAIN TEMP_VAR_INT;
	RETAIN TEMP_VAR_IBR;
	IF FIRST.CLUID THEN DO;
		TEMP_VAR = ROUND((BAL*PCAL),.01);
		TEMP_VAR_PRINC = ROUND((DC10PRINC*PCAL),.01); 
		TEMP_VAR_INT = ROUND((INTTOT*PCAL),.01);
		TEMP_VAR_IBR = ROUND((LA_IBR_STD_STD_PAY*PCAL),.01);
		SUBSIDY = 'Y';
		AA_DISB_1 = AA_TOT_CON;
		AA_GTE_LON_AMT = AA_TOT_CON;
		BAL = TEMP_VAR;
		DC10PRINC = TEMP_VAR_PRINC;
		INTTOT = TEMP_VAR_INT;
		LA_IBR_STD_STD_PAY = TEMP_VAR_IBR;
	END;
	ELSE DO;
		TEMP_VAR = ROUND(BAL-TEMP_VAR,.01);
		TEMP_VAR_PRINC = ROUND(DC10PRINC-TEMP_VAR_PRINC,.01);
		TEMP_VAR_INT = ROUND(INTTOT-TEMP_VAR_INT,.01);
		TEMP_VAR_IBR = ROUND(LA_IBR_STD_STD_PAY-TEMP_VAR_IBR,.01);
		SUBSIDY = 'N';
		AA_DISB_1 = AA_TOT_CON;
		AA_GTE_LON_AMT = AA_TOT_CON;
		BAL = TEMP_VAR;
		AF_APL_ID_SFX = '02';
		SUBSTR(CLUID,18,2) = AF_APL_ID_SFX;
		DC10PRINC = TEMP_VAR_PRINC;
		INTTOT = TEMP_VAR_INT;
		LA_IBR_STD_STD_PAY = TEMP_VAR_IBR;
	END;
RUN;
/*PUT EVERYTHING BACK IN ONE DATASET*/
DATA REPUR;
	SET CNSLB REPUR;
RUN;
/********************************************************************
* CREATE BATCHES AND BATCH DATA
*********************************************************************/
DATA BATCH_A;
	SET REPUR;
RUN;

PROC SORT DATA=BATCH_A;	BY SSN CLUID; RUN;

DATA BATCH_A;
	SET BATCH_A;
	BY SSN CLUID;
	RETAIN SUB_BAT_ID;
	IF FIRST.SSN THEN DO;
		IF SUB_BAT_ID = 5 THEN SUB_BAT_ID = 1;
			ELSE SUB_BAT_ID+1;
		END;
RUN;

PROC SORT DATA=BATCH_A(KEEP=SSN CLUID SUB_BAT_ID BAL); BY SSN CLUID SUB_BAT_ID; RUN;

DATA BATCH_A (KEEP=SSN CLUID SUB_BAT_ID BAT_ID BAL);
	SET BATCH_A;
	BY SUB_BAT_ID NOTSORTED;
	RETAIN BAT_ID;
	IF FIRST.SUB_BAT_ID AND SUB_BAT_ID = 1 
		THEN BAT_ID+1;
	ELSE BAT_ID=BAT_ID;
RUN;

PROC SQL;
CREATE TABLE BATCH_B AS 
	SELECT 
		BAT_ID,
		COUNT(DISTINCT SSN) AS BAT_BR_CT,
		COUNT(DISTINCT CLUID) AS BAT_LN_CT,
		SUM(BAL) AS BAT_TOT_SUM
	FROM 
		BATCH_A
	GROUP BY 
		BAT_ID
	;
QUIT;

PROC SORT DATA=BATCH_A; BY BAT_ID; RUN;
PROC SORT DATA=BATCH_B; BY BAT_ID; RUN;

DATA BATCH_A (DROP=SUB_BAT_ID BAL);
	MERGE BATCH_A BATCH_B;
	BY BAT_ID;
RUN;

PROC SORT DATA=BATCH_A; BY SSN CLUID; RUN;
PROC SORT DATA=REPUR; BY SSN CLUID; RUN;

DATA REPUR;
	MERGE REPUR BATCH_A;
	BY SSN CLUID;
RUN;

/*POSTING FILE DATA SET*/
PROC SQL;
CREATE TABLE POSTIT AS
	SELECT 
		DF_SPE_ACC_ID, 
		DT_REPUR,
		LF_CLM_ID,
		REP_LDR,
		SUM(COALESCE(DC10PRINC,0)) AS LA_PRI,
		SUM(COALESCE(INTTOT,0)) AS LA_INT,
		SUM(BAL) AS BAL
	FROM 
		REPUR
	WHERE 
		REP_LDR IN ('828476','826717')
	GROUP BY 
		DF_SPE_ACC_ID,
		DT_REPUR,
		LF_CLM_ID,
		REP_LDR 
	;
QUIT;

/********************************************************************
* FILE AND REPORT CREATION
*********************************************************************
* UHEAA FILE 
*********************************************************************/
DATA _NULL_;
	SET  WORK.REPUR ;
	WHERE REP_LDR = '828476' AND AD_DFR_END <= TODAY();
	FILE REPORT26 DELIMITER=',' DSD DROPOVER LRECL=32767;
		FORMAT BF_SSN $9. ;
		FORMAT DM_PRS_1 $12. ;
		FORMAT DM_PRS_LST $35. ;
		FORMAT DM_PRS_MID $1. ;
		FORMAT DD_BRT MMDDYY10. ;
		FORMAT DX_STR_ADR_1 $35. ;
		FORMAT DX_STR_ADR_2 $35. ;
		FORMAT DM_CT $30. ;
		FORMAT DC_DOM_ST $2. ;
		FORMAT DF_ZIP $14. ;
		FORMAT DM_FGN_CNY $25. ;
		FORMAT DI_VLD_ADR $1. ;
		FORMAT DN_PHN $17. ;
		FORMAT DI_PHN_VLD $1. ;
		FORMAT DN_ALT_PHN $17. ;
		FORMAT DI_ALT_PHN_VLD $1. ;
		FORMAT AC_LON_TYP $2. ;
		FORMAT AD_PRC MMDDYY10. ;
		FORMAT AF_APL_ID $17. ;
		FORMAT AF_APL_ID_SFX $2. ;
		FORMAT AD_IST_TRM_BEG MMDDYY10. ;
		FORMAT AD_IST_TRM_END MMDDYY10. ;
		FORMAT AA_GTE_LON_AMT 10.2 ;
		FORMAT AF_APL_OPS_SCL $8. ;
		FORMAT AD_BR_SIG MMDDYY10. ;
		FORMAT LC_TYP_DFR $2. ;
		FORMAT AC_DFR_TYP $1. ;
		FORMAT AD_DFR_BEG MMDDYY10. ;
		FORMAT AD_DFR_END MMDDYY10. ;
		FORMAT AD_APL_RCV MMDDYY10. ;
		FORMAT AC_STU_DFR_REQ $1. ;
		FORMAT LD_LFT_SCL MMDDYY10. ;
		FORMAT STU_SSN $9. ;
		FORMAT STU_DM_PRS_1 $12. ;
		FORMAT STU_DM_PRS_MID $1. ;
		FORMAT STU_DM_PRS_LST $35. ;
		FORMAT STU_DD_BRT MMDDYY10. ;
		FORMAT STU_DX_STR_ADR_1 $35. ;
		FORMAT STU_DX_STR_ADR_2 $35. ;
		FORMAT STU_DM_CT $30. ;
		FORMAT STU_DC_DOM_ST $2. ;
		FORMAT STU_DF_ZIP $14. ;
		FORMAT STU_DM_FGN_CNY $25. ;
		FORMAT STU_DI_VLD_ADR $1. ;
		FORMAT STU_DN_PHN $17. ;
		FORMAT STU_DI_PHN_VLD $1. ;
		FORMAT STU_DN_ALT_PHN $17. ;
		FORMAT STU_DI_ALT_PHN_VLD $1. ;
		FORMAT EDSR_SSN $9. ;
		FORMAT EDSR_DM_PRS_1 $12. ;
		FORMAT EDSR_DM_PRS_MID $1. ;
		FORMAT EDSR_DM_PRS_LST $35. ;
		FORMAT EDSR_DD_BRT MMDDYY10. ;
		FORMAT EDSR_DX_STR_ADR_1 $35. ;
		FORMAT EDSR_DX_STR_ADR_2 $35. ;
		FORMAT EDSR_DM_CT $30. ;
		FORMAT EDSR_DC_DOM_ST $2. ;
		FORMAT EDSR_DF_ZIP $14. ;
		FORMAT EDSR_DM_FGN_CNY $25. ;
		FORMAT EDSR_DI_VLD_ADR $1. ;
		FORMAT EDSR_DN_PHN $17. ;
		FORMAT EDSR_DI_PHN_VLD $1. ;
		FORMAT EDSR_DN_ALT_PHN $17. ;
		FORMAT EDSR_DI_ALT_PHN_VLD $1. ;
		FORMAT IF_OPS_SCL_RPT $8. ;
		FORMAT LC_STU_ENR_TYP $1. ;
		FORMAT LD_ENR_CER MMDDYY10. ;
		FORMAT LD_LDR_NTF MMDDYY10. ;
		FORMAT AR_CON_ITR 8.3 ;
		FORMAT SUBSIDY $1. ;
		FORMAT AA_DISB_1 BEST12. ;
		FORMAT AD_DISB_1 MMDDYY10. ;
		FORMAT AC_DISB_1 $1. ;
		FORMAT AN_DISB_1 6. ;
		FORMAT AA_DISB_2 BEST12. ;
		FORMAT AD_DISB_2 MMDDYY10. ;
		FORMAT AC_DISB_2 $1. ;
		FORMAT AN_DISB_2 6. ;
		FORMAT AA_DISB_3 BEST12. ;
		FORMAT AD_DISB_3 MMDDYY10. ;
		FORMAT AC_DISB_3 $1. ;
		FORMAT AN_DISB_3 6. ;
		FORMAT AA_DISB_4 BEST12. ;
		FORMAT AD_DISB_4 MMDDYY10. ;
		FORMAT AC_DISB_4 $1. ;
		FORMAT AN_DISB_4 6. ;
		FORMAT CA_DISB_1 BEST12.;
		FORMAT CA_DISB_2 BEST12.;
		FORMAT CA_DISB_3 BEST12.;
		FORMAT CA_DISB_4 BEST12.;
		FORMAT CD_DISB_1 MMDDYY10.;
		FORMAT CD_DISB_2 MMDDYY10.;
		FORMAT CD_DISB_3 MMDDYY10.;
		FORMAT CD_DISB_4 MMDDYY10.;
		FORMAT ORG_1 BEST12. ;
		FORMAT ORG_2 BEST12. ;
		FORMAT ORG_3 BEST12. ;
		FORMAT ORG_4 BEST12. ;
		FORMAT GTE_1 BEST12.;
		FORMAT GTE_2 BEST12.;
		FORMAT GTE_3 BEST12.;
		FORMAT GTE_4 BEST12.;
		FORMAT BONDID $8. ;
		FORMAT BM_RFR_1_1 $12. ;
		FORMAT BM_RFR_1_2 $12. ;
		FORMAT BM_RFR_MID_1 $1. ;
		FORMAT BM_RFR_MID_2 $1. ;
		FORMAT BM_RFR_LST_1 $35. ;
		FORMAT BM_RFR_LST_2 $35. ;
		FORMAT BX_RFR_STR_ADR_1_1 $35. ;
		FORMAT BX_RFR_STR_ADR_1_2 $35. ;
		FORMAT BX_RFR_STR_ADR_2_1 $35. ;
		FORMAT BX_RFR_STR_ADR_2_2 $35. ;
		FORMAT BM_RFR_CT_1 $30. ;
		FORMAT BM_RFR_CT_2 $30. ;
		FORMAT BF_RFR_ZIP_1 $14. ;
		FORMAT BF_RFR_ZIP_2 $14. ;
		FORMAT BM_RFR_FGN_CNY_1 $25. ;
		FORMAT BM_RFR_FGN_CNY_2 $25. ;
		FORMAT BI_VLD_ADR_1 $1. ;
		FORMAT BI_VLD_ADR_2 $1. ;
		FORMAT BN_RFR_DOM_PHN_1 $10. ;
		FORMAT BN_RFR_DOM_PHN_2 $10. ;
		FORMAT BI_DOM_PHN_VLD_1 $1. ;
		FORMAT BI_DOM_PHN_VLD_2 $1. ;
		FORMAT BN_RFR_ALT_PHN_1 $10. ;
		FORMAT BN_RFR_ALT_PHN_2 $10. ;
		FORMAT BI_ALT_PHN_VLD_1 $1. ;
		FORMAT BI_ALT_PHN_VLD_2 $1. ;
		FORMAT BC_RFR_REL_BR_1 $2. ;
		FORMAT BC_RFR_REL_BR_2 $2. ;
		FORMAT DT_REPUR MMDDYY10. ;
		FORMAT BAL BEST12. ;
		FORMAT BC_RFR_ST_1 $2. ;
		FORMAT BC_RFR_ST_2 $2. ;
		FORMAT AA_TOT_EDU_DET_PNT 14.2 ;
		FORMAT RATE 8.3 ;
		FORMAT AC_EDS_TYP $1.;
		FORMAT REF_IND $1.;
		FORMAT LC_INT_TYP $1.;
		FORMAT AF_ORG_APL_OPS_LDR $8. ;
		FORMAT AC_LON_STA_REA_1-AC_LON_STA_REA_&MAX_NUM $2. ;
		FORMAT AD_DFR_BEG_1-AD_DFR_BEG_&MAX_NUM MMDDYY10. ;
		FORMAT AD_DFR_END_1-AD_DFR_END_&MAX_NUM MMDDYY10. ;
		FORMAT LC_DFR_TYP_1-LC_DFR_TYP_&MAX_NUM $2.;
		FORMAT LD_DFR_BEG_1-LD_DFR_BEG_&MAX_NUM MMDDYY10.;
		FORMAT LD_DFR_END_1-LD_DFR_END_&MAX_NUM 	MMDDYY10.;
		FORMAT LF_DOE_SCL_DFR_1-LF_DOE_SCL_DFR_&MAX_NUM  $8.;
		FORMAT LD_DFR_INF_CER_1-LD_DFR_INF_CER_&MAX_NUM  MMDDYY10.;
		FORMAT IF_OPS_SCL_RPT_1-IF_OPS_SCL_RPT_&MAX_NUM  $8.;
		FORMAT LD_ENR_CER_1-LD_ENR_CER_&MAX_NUM  MMDDYY10.;
		FORMAT LC_FOR_TYP_1-LC_FOR_TYP_&MAX_NUM $2. ;
		FORMAT LD_FOR_BEG_1-LD_FOR_BEG_&MAX_NUM MMDDYY10.;
		FORMAT LD_FOR_END_1-LD_FOR_END_&MAX_NUM MMDDYY10.;
		FORMAT LI_CAP_FOR_INT_REQ_1-LI_CAP_FOR_INT_REQ_&MAX_NUM $1.;
		FORMAT OL_FRB_BEG_1-OL_FRB_BEG_&MAX_NUM MMDDYY10. ;
		FORMAT OL_FRB_END_1-OL_FRB_END_&MAX_NUM MMDDYY10. ;
		FORMAT BAT_ID BEST12.;
		FORMAT BAT_BR_CT BEST12.;
		FORMAT BAT_LN_CT BEST12.;
		FORMAT BAT_TOT_SUM BEST12.;
		FORMAT IBR_ELIG_IND $1. ;
		FORMAT LD_IBR_25Y_FGV_BEG MMDDYY10. ;
		FORMAT LD_IBR_RPD_SR MMDDYY10. ;
		FORMAT LA_IBR_STD_STD_PAY BEST12. ;
		FORMAT LN_IBR_QLF_FGV_MTH BEST12. ;
		FORMAT ORG_INT_RATE 8.3 ;
		FORMAT DC10PRINC 12.2;
		FORMAT INTTOT 12.2;
	IF _N_ = 1 THEN        /* WRITE COLUMN NAMES */
	 DO;
	   PUT
		'BF_SSN' ','
		'DM_PRS_1' ','
		'DM_PRS_MID' ','
		'DM_PRS_LST' ','
		'DD_BRT' ','
		'DX_STR_ADR_1' ','
		'DX_STR_ADR_2' ','
		'DM_CT' ','
		'DC_DOM_ST' ','
		'DF_ZIP' ','
		'DM_FGN_CNY' ','
		'DI_VLD_ADR' ','
		'DN_PHN' ','
		'DI_PHN_VLD' ','
		'DN_ALT_PHN' ','
		'DI_ALT_PHN_VLD' ','
		'AC_LON_TYP' ','
		'SUBSIDY' ','
		'AD_PRC' ','
		'AF_ORG_APL_OPS_LDR' ','
		'AF_APL_ID' ','
		'AF_APL_ID_SFX' ','
		'AD_IST_TRM_BEG' ','
		'AD_IST_TRM_END' ','
		'AA_GTE_LON_AMT' ','
		'AF_APL_OPS_SCL' ','
		'AD_BR_SIG' ','
		'LD_LFT_SCL' ','
		'PR_RPD_FOR_ITR' ','
		'LC_INT_TYP' ','
		'BAL' ','
		'DT_REPUR' ','
		'IF_OPS_SCL_RPT' ','
		'LC_STU_ENR_TYP' ','
		'LD_ENR_CER' ','
		'LD_LDR_NTF' ','
		'AR_CON_ITR' ','
		'AD_APL_RCV' ','
		'AC_STU_DFR_REQ' ','
		'AN_DISB_1' ','
		'AC_DISB_1' ','
		'AD_DISB_1' ',' 
		'AA_DISB_1' ','
		'ORG_1' ','
		'CD_DISB_1' ',' 
		'CA_DISB_1' ','
		'GTE_1' ','
		'AN_DISB_2' ','
		'AC_DISB_2' ','
		'AD_DISB_2' ',' 
		'AA_DISB_2' ','
		'ORG_2' ','
		'CD_DISB_2' ',' 
		'CA_DISB_2' ','
		'GTE_2' ','
		'AN_DISB_3' ','
		'AC_DISB_3' ','
		'AD_DISB_3' ',' 
		'AA_DISB_3' ','
		'ORG_3' ','
		'CD_DISB_3' ',' 
		'CA_DISB_3' ','
		'GTE_3' ','
		'AN_DISB_4' ','
		'AC_DISB_4' ','
		'AD_DISB_4' ',' 
		'AA_DISB_4' ','
		'ORG_4' ','
		'CD_DISB_4' ',' 
		'CA_DISB_4' ','
		'GTE_4' ','
		'AA_TOT_EDU_DET_PNT' ',' @;
		DO I=1 TO &MAX_NUM;PUT 'LC_DFR_TYP' I @;END;
		DO I=1 TO &MAX_NUM;PUT 'LD_DFR_BEG' I @;END;
		DO I=1 TO &MAX_NUM;PUT 'LD_DFR_END' I @;END;
		DO I=1 TO &MAX_NUM;PUT 'LF_DOE_SCL_DFR' I @;END;
		DO I=1 TO &MAX_NUM;PUT 'LD_DFR_INF_CER' I @;END;
		DO I=1 TO &MAX_NUM;PUT 'AC_LON_STA_REA' I @;END;
		DO I=1 TO &MAX_NUM;PUT 'AD_DFR_BEG' I @;END;
		DO I=1 TO &MAX_NUM;PUT 'AD_DFR_END' I  @;END;
		DO I=1 TO &MAX_NUM;PUT 'IF_OPS_SCL_RPT' I  @;END;
		DO I=1 TO &MAX_NUM;PUT 'LD_ENR_CER' I  @;END;
		PUT
		'STU_SSN' ','
		'STU_DM_PRS_1' ','
		'STU_DM_PRS_MID' ','
		'STU_DM_PRS_LST' ','
		'STU_DD_BRT' ','
		'STU_DX_STR_ADR_1' ','
		'STU_DX_STR_ADR_2' ','
		'STU_DM_CT' ','
		'STU_DC_DOM_ST' ','
		'STU_DF_ZIP' ','
		'STU_DM_FGN_CNY' ','
		'STU_DI_VLD_ADR' ','
		'STU_DN_PHN' ','
		'STU_DI_PHN_VLD' ','
		'STU_DN_ALT_PHN' ','
		'STU_DI_ALT_PHN_VLD' ','
		'EDSR_SSN' ','
		'EDSR_DM_PRS_1' ','
		'EDSR_DM_PRS_MID' ','
		'EDSR_DM_PRS_LST' ','
		'EDSR_DD_BRT' ','
		'EDSR_DX_STR_ADR_1' ','
		'EDSR_DX_STR_ADR_2' ','
		'EDSR_DM_CT' ','
		'EDSR_DC_DOM_ST' ','
		'EDSR_DF_ZIP' ','
		'EDSR_DM_FGN_CNY' ','
		'EDSR_DI_VLD_ADR' ','
		'EDSR_DN_PHN' ','
		'EDSR_DI_PHN_VLD' ','
		'EDSR_DN_ALT_PHN' ','
		'EDSR_DI_ALT_PHN_VLD' ','
		'AC_EDS_TYP' ','
		'REF_IND' ','
		'BM_RFR_1_1' ','
		'BM_RFR_MID_1' ','
		'BM_RFR_LST_1' ','
		'BX_RFR_STR_ADR_1_1' ','
		'BX_RFR_STR_ADR_2_1' ','
		'BM_RFR_CT_1' ','
		'BC_RFR_ST_1' ','
		'BF_RFR_ZIP_1' ','
		'BM_RFR_FGN_CNY_1' ','
		'BI_VLD_ADR_1' ','
		'BN_RFR_DOM_PHN_1' ','
		'BI_DOM_PHN_VLD_1' ','
		'BN_RFR_ALT_PHN_1' ','
		'BI_ALT_PHN_VLD_1' ','
		'BC_RFR_REL_BR_1' ','
		'BM_RFR_1_2' ','
		'BM_RFR_MID_2' ','
		'BM_RFR_LST_2' ','
		'BX_RFR_STR_ADR_1_2' ','
		'BX_RFR_STR_ADR_2_2' ','
		'BM_RFR_CT_2' ','
		'BC_RFR_ST_2' ','
		'BF_RFR_ZIP_2' ','
		'BM_RFR_FGN_CNY_2' ','
		'BI_VLD_ADR_2' ','
		'BN_RFR_DOM_PHN_2' ','
		'BI_DOM_PHN_VLD_2' ','
		'BN_RFR_ALT_PHN_2' ','
		'BI_ALT_PHN_VLD_2' ','
		'BC_RFR_REL_BR_2' ','
		'BONDID' ','
		'BAT_ID' ','
		'BAT_BR_CT' ','
		'BAT_LN_CT' ','
		'BAT_TOT_SUM' ',' @;
		DO I=1 TO &MAX_NUM; PUT 'LC_FOR_TYP' I @;END;
		DO I=1 TO &MAX_NUM; PUT 'LD_FOR_BEG' I @;END;
		DO I=1 TO &MAX_NUM; PUT 'LD_FOR_END' I @;END;
		DO I=1 TO &MAX_NUM; PUT 'LI_CAP_FOR_INT_REQ' I @;END;
		DO I=1 TO &MAX_NUM; PUT 'OL_FRB_BEG' I @;END;
		DO I=1 TO &MAX_NUM; PUT 'OL_FRB_END' I @;END;
		PUT 
		'BR_ELIG_IND' ','
		'LD_IBR_25Y_FGV_BEG' ','
		'LD_IBR_RPD_SR' ','
		'LA_IBR_STD_STD_PAY' ','
		'LN_IBR_QLF_FGV_MTH' ','
		'ORG_INT_RATE' ','
		'LA_PRI' ','
		'LA_INT';
	END;
	DO;
		PUT BF_SSN $ @;
		PUT DM_PRS_1 $ @;
		PUT DM_PRS_MID $ @;
		PUT DM_PRS_LST $ @;
		PUT DD_BRT @;
		PUT DX_STR_ADR_1 $ @;
		PUT DX_STR_ADR_2 $ @;
		PUT DM_CT $ @;
		PUT DC_DOM_ST $ @;
		PUT DF_ZIP $ @;
		PUT DM_FGN_CNY $ @;
		PUT DI_VLD_ADR $ @;
		PUT DN_PHN $ @;
		PUT DI_PHN_VLD $ @;
		PUT DN_ALT_PHN $ @;
		PUT DI_ALT_PHN_VLD $ @;
		PUT AC_LON_TYP $ @;
		PUT SUBSIDY $ @;
		PUT AD_PRC @;
		PUT AF_ORG_APL_OPS_LDR $ @;
		PUT AF_APL_ID $ @;
		PUT AF_APL_ID_SFX $ @;
		PUT AD_IST_TRM_BEG @;
		PUT AD_IST_TRM_END @;
		PUT AA_GTE_LON_AMT @;
		PUT AF_APL_OPS_SCL $ @;
		PUT AD_BR_SIG @;
		PUT LD_LFT_SCL @;
	/*	PUT PR_RPD_FOR_ITR @; CHANGED TO RATE TO ACCOUNT FOR NULLS*/
		PUT RATE @;
		PUT LC_INT_TYP $ @;
		PUT BAL @;
		PUT DT_REPUR @;
		PUT IF_OPS_SCL_RPT @;
		PUT LC_STU_ENR_TYP $ @;
		PUT LD_ENR_CER @;
		PUT LD_LDR_NTF @;
		PUT AR_CON_ITR @;
		PUT AD_APL_RCV @;
		PUT AC_STU_DFR_REQ $ @;
	/*DISBURSEMENT INFO*/
		PUT AN_DISB_1 @;
		PUT AC_DISB_1 @;
		PUT AD_DISB_1 @; 
		PUT AA_DISB_1 @;
		PUT ORG_1 @;
		PUT CD_DISB_1 @;
		PUT CA_DISB_1 @;
		PUT GTE_1 @;
		PUT AN_DISB_2 @;
		PUT AC_DISB_2 @;
		PUT AD_DISB_2 @; 
		PUT AA_DISB_2 @;
		PUT ORG_2 @;
		PUT CD_DISB_2 @;
		PUT CA_DISB_2 @;
		PUT GTE_2 @;
		PUT AN_DISB_3 @;
		PUT AC_DISB_3 @;
		PUT AD_DISB_3 @; 
		PUT AA_DISB_3 @;
		PUT ORG_3 @;
		PUT CD_DISB_3 @;
		PUT CA_DISB_3 @;
		PUT GTE_3 @;
		PUT AN_DISB_4 @;
		PUT AC_DISB_4 @;
		PUT AD_DISB_4 @; 
		PUT AA_DISB_4 @;
		PUT ORG_4 @;
		PUT CD_DISB_4 @;
		PUT CA_DISB_4 @;
		PUT GTE_4 @;
		PUT AA_TOT_EDU_DET_PNT @;
	/*DEFERMENT INFO*/
		PUT LC_DFR_TYP_1-LC_DFR_TYP_&MAX_NUM $ @;
		PUT LD_DFR_BEG_1-LD_DFR_BEG_&MAX_NUM @;
		PUT LD_DFR_END_1-LD_DFR_END_&MAX_NUM @;
		PUT LF_DOE_SCL_DFR_1-LF_DOE_SCL_DFR_&MAX_NUM $ @;
		PUT LD_DFR_INF_CER_1-LD_DFR_INF_CER_&MAX_NUM @;
		PUT AC_LON_STA_REA_1-AC_LON_STA_REA_&MAX_NUM @;
		PUT AD_DFR_BEG_1-AD_DFR_BEG_&MAX_NUM @;
		PUT AD_DFR_END_1-AD_DFR_END_&MAX_NUM @;
	/*ENROLLMENT INFO*/
		PUT IF_OPS_SCL_RPT_1-IF_OPS_SCL_RPT_&MAX_NUM $ @;
		PUT LD_ENR_CER_1-LD_ENR_CER_&MAX_NUM @;
	/*STUDENT INFO*/
		PUT STU_SSN $ @;
		PUT STU_DM_PRS_1 $ @;
		PUT STU_DM_PRS_MID $ @;
		PUT STU_DM_PRS_LST $ @;
		PUT STU_DD_BRT @;
		PUT STU_DX_STR_ADR_1 $ @;
		PUT STU_DX_STR_ADR_2 $ @;
		PUT STU_DM_CT $ @;
		PUT STU_DC_DOM_ST $ @;
		PUT STU_DF_ZIP $ @;
		PUT STU_DM_FGN_CNY $ @;
		PUT STU_DI_VLD_ADR $ @;
		PUT STU_DN_PHN $ @;
		PUT STU_DI_PHN_VLD $ @;
		PUT STU_DN_ALT_PHN $ @;
		PUT STU_DI_ALT_PHN_VLD $ @;
	/*ENDORSER INFO*/
		PUT EDSR_SSN $ @;
		PUT EDSR_DM_PRS_1 $ @;
		PUT EDSR_DM_PRS_MID $ @;
		PUT EDSR_DM_PRS_LST $ @;
		PUT EDSR_DD_BRT @;
		PUT EDSR_DX_STR_ADR_1 $ @;
		PUT EDSR_DX_STR_ADR_2 $ @;
		PUT EDSR_DM_CT $ @;
		PUT EDSR_DC_DOM_ST $ @;
		PUT EDSR_DF_ZIP $ @;
		PUT EDSR_DM_FGN_CNY $ @;
		PUT EDSR_DI_VLD_ADR $ @;
		PUT EDSR_DN_PHN $ @;
		PUT EDSR_DI_PHN_VLD $ @;
		PUT EDSR_DN_ALT_PHN $ @;
		PUT EDSR_DI_ALT_PHN_VLD $ @;
		PUT AC_EDS_TYP $ @;
	/*REFERENCE INFO*/
		PUT REF_IND $ @;
		PUT BM_RFR_1_1 $ @;
		PUT BM_RFR_MID_1 $ @;
		PUT BM_RFR_LST_1 $ @;
		PUT BX_RFR_STR_ADR_1_1 $ @;
		PUT BX_RFR_STR_ADR_2_1 $ @;
		PUT BM_RFR_CT_1 $ @;
		PUT BC_RFR_ST_1 $ @;
		PUT BF_RFR_ZIP_1 $ @;
		PUT BM_RFR_FGN_CNY_1 $ @;
		PUT BI_VLD_ADR_1 $ @;
		PUT BN_RFR_DOM_PHN_1 $ @;
		PUT BI_DOM_PHN_VLD_1 $ @;
		PUT BN_RFR_ALT_PHN_1 $ @;
		PUT BI_ALT_PHN_VLD_1 $ @;
		PUT BC_RFR_REL_BR_1 $ @;
		PUT BM_RFR_1_2 $ @;
		PUT BM_RFR_MID_2 $ @;
		PUT BM_RFR_LST_2 $ @;
		PUT BX_RFR_STR_ADR_1_2 $ @;
		PUT BX_RFR_STR_ADR_2_2 $ @;
		PUT BM_RFR_CT_2 $ @;
		PUT BC_RFR_ST_2 $ @;
		PUT BF_RFR_ZIP_2 $ @;
		PUT BM_RFR_FGN_CNY_2 $ @;
		PUT BI_VLD_ADR_2 $ @;
		PUT BN_RFR_DOM_PHN_2 $ @;
		PUT BI_DOM_PHN_VLD_2 $ @;
		PUT BN_RFR_ALT_PHN_2 $ @;
		PUT BI_ALT_PHN_VLD_2 $ @;
		PUT BC_RFR_REL_BR_2 $ @;
		PUT BONDID $ @;
	/*BATCH INFO*/
		PUT BAT_ID @;
		PUT BAT_BR_CT @;
		PUT BAT_LN_CT @;
		PUT BAT_TOT_SUM @;
	/*FORBEARANCE INFO*/
		PUT LC_FOR_TYP_1-LC_FOR_TYP_&MAX_NUM $ @ ;
		PUT LD_FOR_BEG_1-LD_FOR_BEG_&MAX_NUM @;
		PUT LD_FOR_END_1-LD_FOR_END_&MAX_NUM @;
		PUT LI_CAP_FOR_INT_REQ_1-LI_CAP_FOR_INT_REQ_&MAX_NUM $ @;
		PUT OL_FRB_BEG_1-OL_FRB_BEG_&MAX_NUM @;
		PUT OL_FRB_END_1-OL_FRB_END_&MAX_NUM @;
	/*IBR INFO*/
		PUT IBR_ELIG_IND $ @;
		PUT LD_IBR_25Y_FGV_BEG @;
		PUT LD_IBR_RPD_SR @;
		PUT LA_IBR_STD_STD_PAY @;
		PUT LN_IBR_QLF_FGV_MTH @;
		PUT ORG_INT_RATE @;
		PUT DC10PRINC @;
		PUT INTTOT;
	 ;
	END;
RUN;

/**********************************
* POSTING FILE FOR UHEAA AND NELENT
***********************************/
DATA _NULL_;
SET POSTIT;
FILE REPORT27 DELIMITER=',' DSD DROPOVER LRECL=32767;
	FORMAT DF_SPE_ACC_ID $10. ;
	FORMAT LF_CLM_ID $4.;
	FORMAT DT_REPUR MMDDYY10. ;
	FORMAT BAL BEST12. ;
	FORMAT REP_LDR $6.;
IF _N_ = 1 THEN
 DO;
   PUT
	'DF_SPE_ACC_ID' ','
	'REP_AMT' ','
	'DT_REPUR' ','
	'LF_CLM_ID' ','
	'REP_LDR'
;
END;
DO;
	PUT DF_SPE_ACC_ID $ @;
	PUT BAL @;
	PUT DT_REPUR @;
	PUT LF_CLM_ID $ @;
	PUT REP_LDR $ ;
END;
RUN;
/**************************************************
* LEGACRY FILE/REPORT CREATION FOR SLMA AND NELNET
***************************************************/
%MACRO PRINTJOBS (CRITER, ORG, REPORT2, REPORT3, REPORT4, REPORT5,
 REPORT6, REPORT7, REPORT8, REPORT9, INT, BONDID, LENDERID, PGBY);

DATA _NULL_;
     EFFDT = PUT(intnx('month',DATE(),&INT)+19, MMDDYY10.);
     CALL SYMPUT('EFFDATE',EFFDT);
	 RUNDATE = PUT(DATE(),MMDDYY10.);
	 CALL SYMPUT('RUNDT',RUNDATE);
RUN;

DATA REPURPRN;
SET REPUR;
WHERE REP_LDR &CRITER ;
RUN;

PROC SORT data=REPURPRN;
BY SSN;
RUN;
/*                      Print PROMISSORY NOTE PULL LIST.                       */

PROC PRINTTO PRINT=REPORT&REPORT2 NEW;
RUN;
%MACRO REPURPRINT1(dsname);
%LET dsid=%SYSFUNC(open(&dsname));
%LET hasobs=%SYSFUNC(attrn(&dsid,any));
%LET rc=%SYSFUNC(close(&dsid));
%IF &hasobs=1 %THEN
	%DO;
OPTIONS NODATE CENTER PAGENO=1 LS=80;
PROC PRINT NOOBS SPLIT='/' DATA=&DSNAME;
BY SSN NAME;
WHERE REP_LDR &CRITER ;
VAR CLUID
	AD_DISB_1
	AA_GTE_LON_AMT
	;
LABEL	CLUID = 'UNIQUE ID'
		AD_DISB_1 = 'DISBURSEMENT DATE'
		AA_GTE_LON_AMT = 'LOAN AMOUNT'	
		;
FORMAT	AD_DISB_1 MMDDYY10. SSN SSN11.;
TITLE1	' ';
TITLE2	' ';
TITLE3  "PROMISSORY NOTE PULL LIST - &ORG";
TITLE4  "FOR REPURCHASES EFFECTIVE &EFFDATE";
FOOTNOTE "JOB = UTLWRP1     REPORT = ULWRP1.LWRP1R&REPORT2";
RUN;
	%END;
%ELSE %IF &hasobs=0 %THEN
	%DO;
    	data _null_;
			TITLE1  "PROMISSORY NOTE PULL LIST - &ORG";
			TITLE2  "FOR REPURCHASES EFFECTIVE &EFFDATE";
			FOOTNOTE "JOB = UTLWRP1     REPORT = ULWRP1.LWRP1R&REPORT2";
			file print titles;
			put ' ';
            put @01 "No repurchases found for &ORG.";
        run;
    %END;
%MEND REPURPRINT1;
%REPURPRINT1(REPURPRN);

/*                   Print FILE PULL LIST.                    */

PROC SORT DATA=REPUR; BY NAME; RUN;

PROC PRINTTO PRINT=REPORT&REPORT3 NEW;
RUN;
OPTIONS PAGENO=1 LS=80;
PROC PRINT NOOBS SPLIT='/' DATA=REPUR;
BY NAME SSN;
WHERE REP_LDR &CRITER ;
VAR CLUID
	AD_DISB_1
	AA_GTE_LON_AMT
	;
LABEL	CLUID = 'UNIQUE ID'
		AD_DISB_1 = 'DISBURSEMENT DATE'
		AA_GTE_LON_AMT = 'LOAN AMOUNT'	
		;
FORMAT	AD_DISB_1 MMDDYY10. SSN SSN11.;
TITLE1	' ';
TITLE2	' ';
TITLE3  "FILE PULL LIST - &ORG";
TITLE4  "FOR REPURCHASES EFFECTIVE &EFFDATE";
FOOTNOTE "JOB = UTLWRP1     REPORT = ULWRP1.LWRP1R&REPORT3";
RUN;

/*              Print data sheet to file 'REPORT4'.               */

PROC SORT DATA=REPUR;
BY AC_LON_TYP SSN;
RUN;
DATA _NULL_;
	SET REPUR;
	WHERE REP_LDR &CRITER ;
	FILE REPORT&REPORT4 PRINT;
	TITLE;
	PUT 'Loan Type:' @14 AC_LON_TYP @21 'Unique ID:' @33 CLUID @58 'SSN:' @64 SSN SSN11.
		/
		/'Last:' @14 DM_PRS_LST  @46 'First:' @54 DM_PRS_1 @68 'MI:' @72 DM_PRS_MID
		/'Address 1:' @14 DX_STR_ADR_1
		/'Address 2:' @14 DX_STR_ADR_2
		/'City:' @14 DM_CT @46 'State:' @54 DC_DOM_ST @61 'ZIP:' @66 DF_ZIP
		/'Cond:' @14 DI_VLD_ADR @46 'Country:' @56 DM_FGN_CNY
		/'Home Phone:' @14 DN_PHN @29 'Cond:' @36 DI_PHN_VLD
		/'Alt Phone:' @14 DN_ALT_PHN @29 'Cond:' @36 DI_ALT_PHN_VLD
		/'Birthdate:' @14 DD_BRT MMDDYY8.
		/
		/'Curr Princ Bal:' @20 BAL DOLLAR13.2 
/*<1>	/'School ID:'  @25 IF_OPS_SCL_RPT @38 'Prior School:' @54 AF_APL_OPS_SCL*/
		/@38 'Prior School:' @54 AF_APL_OPS_SCL
		/'Ln Period Begin:' @25 AD_IST_TRM_BEG MMDDYY8. @38 'Ln Period End:' @54 AD_IST_TRM_END MMDDYY8.
		/'Interest Type:' @25 AC_ORG_INT_TYP @38 'Curr Int Rate:' @54 RATE
		/
		/'Guar Date:' @25 AD_PRC MMDDYY8. @38 'Signed Date:' @54 AD_BR_SIG MMDDYY8.
		/'NT Amt:' @20 AA_GTE_LON_AMT DOLLAR13.2
		/'Cos/Com:' @25 AC_EDS_TYP @38 'Reg Cat:' @54 PF_RGL_CAT
		/'NT Refund/DT:' @20 AA_TOT_RFD DOLLAR13.2 @38 AD_RFD_EFF MMDDYY8.
		/
		/'Disb 1:  Disb Date:' @25 AD_DISB_1 MMDDYY8. @38 'Disb Amt:' @49 AA_DISB_1 DOLLAR13.2
		/'         Gnte Fee:' @23 GTE_1 DOLLAR10.2 @38 'Orig Fee:' @49 ORG_1 DOLLAR13.2
		/@30 'Uncon/Canc CD/DT:'  @50 CC_DISB_1 @54 CD_DISB_1 MMDDYY8.
		/'Disb 2:  Disb Date:' @25 AD_DISB_2 MMDDYY8. @38 'Disb Amt:' @49 AA_DISB_2 DOLLAR13.2
		/'         Gnte Fee:' @23 GTE_2 DOLLAR10.2 @38 'Orig Fee:' @49 ORG_2 DOLLAR13.2
		/@30 'Uncon/Canc CD/DT:'  @50 CC_DISB_2 @54 CD_DISB_2 MMDDYY8.
		/'Disb 3:  Disb Date:' @25 AD_DISB_3 MMDDYY8. @38 'Disb Amt:' @49 AA_DISB_3 DOLLAR13.2
		/'         Gnte Fee:' @23 GTE_3 DOLLAR10.2 @38 'Orig Fee:' @49 ORG_3 DOLLAR13.2
		/@30 'Uncon/Canc CD/DT:'  @50 CC_DISB_3 @54 CD_DISB_3 MMDDYY8.
		/'Disb 4:  Disb Date:' @25 AD_DISB_4 MMDDYY8. @38 'Disb Amt:' @49 AA_DISB_4 DOLLAR13.2
		/'         Gnte Fee:' @23 GTE_4 DOLLAR10.2 @38 'Orig Fee:' @49 ORG_4 DOLLAR13.2
		/@30 'Uncon/Canc CD/DT:'  @50 CC_DISB_4 @54 CD_DISB_4 MMDDYY8.
		/
		/'Sep Date:' @12 LD_LFT_SCL MMDDYY8.
/*<1>*/ /;
IF AC_LON_TYP = 'CL' THEN DO;
PUT		/'UNDERLYING CONSOLIDATION INFORMATION'
		/
		/'SF STAFSUB'  @13 SF DOLLAR11.2 @26 'DSS DSUBSTAF'    @42 D1 DOLLAR11.2 @55 'PK PERKINS' @66 PK DOLLAR11.2
		/'SU STAFUNS'  @13 SU DOLLAR11.2 @26 'DUS DUNSUBSTAF'  @42 D2 DOLLAR11.2 @55 'FI FISL'    @66 FI DOLLAR11.2
		/'PL PLUS'     @13 PL DOLLAR11.2 @26 'DPLUS DIRPLUS'   @42 D3 DOLLAR11.2 @55 'HP HPSL'    @66 HP DOLLAR11.2
		/'SL SLS'      @13 SL DOLLAR11.2 @26 'DPLUSCON'        @42 D4 DOLLAR11.2 @55 'NS NSLP'    @66 NS DOLLAR11.2
		/'CS CONSUB'   @13 CS DOLLAR11.2 @26 'DSCON DCONSUB'   @42 D5 DOLLAR11.2 @55 'HL HEAL'    @66 HL DOLLAR11.2
		/'CU CONUNSUB' @13 CU DOLLAR11.2 @26 'DUCON DCONUNSUB' @42 D6 DOLLAR11.2
/*</1>*/;
END;
	PUT _PAGE_;
RUN;

/*               Print references information.               */

PROC SORT DATA=REFS OUT=REFSPRINT NODUPKEY;
BY DF_PRS_ID_BR BWRNAME LAST FIRST BM_RFR_MID BN_RFR_DOM_PHN BN_RFR_ALT_PHN 
BC_RFR_REL_BR ADDRESS CITY BC_RFR_ST ZIP;
WHERE REP_LDR &CRITER ;
RUN;

PROC PRINTTO PRINT=REPORT&REPORT5 NEW;
RUN;
OPTIONS PAGENO=1 LS=132;
PROC PRINT NOOBS SPLIT='/' DATA=REFSPRINT WIDTH=MIN;
BY df_prs_id_br BWRNAME;
*PAGEBY df_prs_id_br;
&PGBY;
VAR	LAST
	FIRST
	bm_rfr_mid
	ADDRESS
	CITY
	bc_rfr_st
	ZIP
	bn_rfr_dom_phn
	bn_rfr_alt_phn
	bc_rfr_rel_br;
LABEL	df_prs_id_br = 'BORROWER SSN'
		bm_rfr_mid = 'MI'
		bc_rfr_st = 'ST'
		bn_rfr_dom_phn = 'PHONE'
		bn_rfr_alt_phn = 'ALT PHONE'
		bc_rfr_rel_br = 'REL'
		BWRNAME = 'BORROWER NAME';
FORMAT DF_PRS_ID_BR SSN11.;
TITLE1  "REFERENCES FOR LOANS REPURCHASED EFFECTIVE &EFFDATE - &ORG";
TITLE2	'SORTED BY BORROWER SSN';
FOOTNOTE "JOB = UTLWRP1     REPORT = ULWRP1.LWRP1R&REPORT5";
RUN;

PROC SORT DATA=REPUR;
BY SSN LF_CLM_ID;
RUN;

/*               Print payoff request/posting report.               */

PROC PRINTTO PRINT=REPORT&REPORT6 NEW;
RUN;
OPTIONS PAGENO=1 LS=80;
PROC PRINT NOOBS SPLIT='/' DATA = REPUR LABEL;
BY SSN ;
WHERE REP_LDR &CRITER ;
VAR	LF_CLM_ID
	CLUID
	BAL
	DT_REPUR
	RP_LNDR;
SUM	BAL;
LABEL	LF_CLM_ID = 'CLAIM ID'
		CLUID = 'UNIQUE ID'
		BAL = 'PAYOFF'
		DT_REPUR = 'REPURCHASE DATE'
		RP_LNDR = 'REPURCHASING LENDER'
		MASKED_SSN = 'SSN'
		DF_SPE_ACC_ID = 'ACCOUNT NUMBER';;
FORMAT 	BAL DOLLAR13.2
		DT_REPUR MMDDYY10.
		SSN SSN11.;
TITLE1	' ';
TITLE2	' ';
TITLE3 "REPURCHASE PAYOFF DETAIL - &ORG";
TITLE4  "FOR REPURCHASES EFFECTIVE &EFFDATE";
FOOTNOTE "JOB = UTLWRP1     REPORT = ULWRP1.LWRP1R&REPORT6";
RUN;

/*                  Print loan sale report.                    */

PROC PRINTTO PRINT=REPORT&REPORT7 NEW;
RUN;
OPTIONS PAGENO=1 LS=80;
PROC PRINT NOOBS SPLIT='/' DATA = REPUR;
BY SSN;
WHERE REP_LDR &CRITER ;
VAR	CLUID
	DT_REPUR
	AF_CUR_LON_OPS_LDR
	RP_LNDR;
LABEL	CLUID = 'UNIQUE ID'
		DT_REPUR = 'REPURCHASE DATE'
		AF_CUR_LON_OPS_LDR = 'CURRENT LENDER'
		RP_LNDR = 'REPURCHASING LENDER';
FORMAT	DT_REPUR MMDDYY10.
		SSN SSN11.;
TITLE1	' ';
TITLE2	' ';
TITLE3	"REPURCHASE LOAN SALES - &ORG";
TITLE4  "FOR REPURCHASES EFFECTIVE &EFFDATE";
FOOTNOTE "JOB = UTLWRP1     REPORT = ULWRP1.LWRP1R&REPORT7";
RUN;

/*               Print transmittal.              */

PROC SORT DATA=REPUR OUT=REPUR_OUT;
BY SSN;
RUN;

DATA REPUR_OUT;
SET REPUR_OUT;
BY SSN;
IF FIRST.SSN THEN BWRCNT=1;
ELSE BWRCNT=0;
RUN;

PROC PRINTTO PRINT=REPORT&REPORT8 NEW;
RUN;
OPTIONS PAGENO=1 LS=126;
PROC REPORT DATA=REPUR_OUT NOWD HEADSKIP;
TITLE1	"REPURCHASED LOANS TRANSMITTAL - &ORG";
TITLE2  "FOR REPURCHASES EFFECTIVE &EFFDATE";
TITLE3	"&LENDERID";
FOOTNOTE "JOB = UTLWRP1     REPORT = ULWRP1.LWRP1R&REPORT8";
WHERE REP_LDR &CRITER;
COLUMN SSN NAME BONDID CLUID AC_LON_TYP AD_PRC AA_GTE_LON_AMT AD_DISB_1 INTDAILY 
DC10PRINC INTTOT BAL BWRCNT;
DEFINE SSN / ORDER NOPRINT;
DEFINE NAME / ORDER NOPRINT;
DEFINE BONDID / DISPLAY 'BOND ID' CENTER;
DEFINE CLUID / DISPLAY 'COMMONLINE ID' CENTER;
DEFINE AC_LON_TYP / DISPLAY 'LOAN TYPE' WIDTH=4 CENTER;
DEFINE AD_PRC / DISPLAY FORMAT=MMDDYY10. 'GUARANTY DATE' CENTER;
DEFINE AA_GTE_LON_AMT / DISPLAY FORMAT=DOLLAR13.2 'ORIGINAL LOAN AMT' CENTER;
DEFINE AD_DISB_1 / DISPLAY FORMAT=MMDDYY10. 'FIRST DISBURSEMENT DATE' WIDTH=12 CENTER;
DEFINE INTDAILY / DISPLAY FORMAT=DOLLAR5.2 'DAILY INTEREST ACCRUAL' WIDTH=8 CENTER;
DEFINE DC10PRINC / DISPLAY FORMAT=DOLLAR13.2 'PRINCIPAL AMOUNT AS OF REPURCHASE DATE' 
WIDTH=15 CENTER;
DEFINE INTTOT / DISPLAY FORMAT=DOLLAR13.2 'INTEREST TOTAL AS OF REPURCHASE DATE' 
WIDTH=15 CENTER;
DEFINE BAL / SUM FORMAT=DOLLAR13.2 'REPURCHASE AMOUNT' CENTER;
DEFINE BWRCNT / SUM NOPRINT;

BREAK AFTER SSN / SUMMARIZE OL;

COMPUTE BEFORE NAME;
LINE ' ';
LINE @1 "SSN:  "  @6 SSN SSN11. @20 "NAME: " NAME $49.;
LINE ' ';
ENDCOMP;

RBREAK AFTER / SUMMARIZE DOL;

COMPUTE AFTER;
BWRS = BWRCNT.SUM;
LINE ' ';
LINE @1 "TOTAL NUMBER OF ACCOUNTS REPURCHASED = " BWRS COMMA6.;
ENDCOMP;
RUN;

/*GENERATE COMMA DELIMITED FILE FOR SCRIPT LETTER CREATION*/

PROC SQL;
CREATE TABLE REPUR_OUT AS
	SELECT DISTINCT 
		BF_SSN
	FROM
		REPUR
	WHERE 
		REP_LDR &CRITER;
QUIT;

DATA _NULL_;
SET  WORK.REPUR_OUT                               end=EFIEOD;
%LET _EFIERR_ = 0; /* set the ERROR detection macro variable */
%LET _EFIREC_ = 0;     /* clear export record count macro variable */
FILE REPORT&REPORT9 delimiter=',' DSD DROPOVER LRECL=32767;
   FORMAT BF_SSN $9. ;
 IF _n_ = 1 THEN        /* write column names */
  DO;
    PUT
    "&RUNDT"
    ;
  END;
  DO;
    EFIOUT + 1;
    PUT BF_SSN $ ;
    ;
  END;
 IF _ERROR_ THEN CALL symput('_EFIERR_',1);  /* set ERROR detection macro variable */
 IF EFIEOD THEN
    CALL symput('_EFIREC_',EFIOUT);
 RUN;

%MEND PRINTJOBS;

/*SALLIE MAE*/
%PRINTJOBS(EQ '888885',SLMA,2,3,4,5,6,7,8,9,1,,,PAGEBY DF_PRS_ID_BR);
/*NELNET*/
%PRINTJOBS(EQ '826717',NELNET,18,19,20,21,22,23,24,25,0,BOND ID: &BOND, LENDER ID: 826717,);
/*UHEAA*/
%PRINTJOBS(EQ '828476',UHEAA,,,28,,,,,,0,BOND ID: &BOND, LENDER ID: 828476,);

PROC PRINTTO;
RUN;


PROC SQL;
CREATE TABLE R29 AS
	SELECT
		BF_SSN,
		LF_CLM_ID,
		BONDID,
		CLUID,
		BAL,
		DT_REPUR,
		RP_LNDR
	FROM
		REPUR
;
QUIT;

%LET RUN_DATE = &sysdate;

DATA _NULL_;
	CALL SYMPUT("RUN_DATE",LEFT(PUT("&SYSDATE"D,MMDDYY10.)));
RUN;

PROC PRINTTO PRINT=REPORT29 NEW;
RUN;
OPTIONS PAGENO=1 LS=180;
PROC PRINT NOOBS SPLIT='/' DATA = R29 LABEL;

SUM	BAL;

LABEL	LF_CLM_ID = 'CLAIM ID'
		BONDID = 'BOND ID'
		CLUID = 'UNIQUE ID'
		BAL = 'PAYOFF'
		DT_REPUR = 'REPURCHASE DATE'
		RP_LNDR = 'REPURCHASING LENDER'
		BF_SSN = 'SSN';

FORMAT 	BAL DOLLAR13.2
		DT_REPUR MMDDYY10.;

TITLE1	' ';
TITLE2	' ';
TITLE3 "REPURCHASE PAYOFF DETAIL";
TITLE4  "FOR REPURCHASES EFFECTIVE &RUN_DATE";
FOOTNOTE "JOB = UTLWRP1     REPORT = ULWRP1.LWRP1R29";
RUN;

PROC SQL;
CREATE TABLE R30 AS
	SELECT
		BF_SSN,
		NAME,
		BOND_ID,
		CLUID,
		AC_LON_TYP,
		AD_PRC,
		AA_GTE_LON_AMT,
		AD_DISB_1,
		INTDAILY,
		DC10PRINC
	FROM
		REPUR
;
QUIT;

PROC SQL NOPRINT;
	SELECT 
		COUNT(DISTINCT BF_SSN)  INTO :BWR_COUNT 
	FROM
		R30
;
QUIT;

%PUT &BWR_COUNT;

PROC PRINTTO PRINT=REPORT30 NEW;
RUN;
OPTIONS PAGENO=1 LS=126;
PROC REPORT DATA=R30 NOWD HEADSKIP;
TITLE1	"REPURCHASED LOANS TRANSMITTAL";
TITLE2  "FOR REPURCHASES EFFECTIVE &RUN_DATE";
FOOTNOTE "JOB = UTLWRP1     REPORT = ULWRP1.LWRP1R30";

LABEL	BF_SSN = 'SSN'
		NAME = 'NAME'
		BONDID = 'BOND ID'
		CLUID = 'UNIQUE ID'
		AC_LON_TYP = 'LOAN TYPE'
		AD_PRC = 'GUARANTY DATE'
		AA_GTE_LON_AMT = 'ORIGINAL LOAN AMT'
		AD_DISB_1 = 'FIRST DISBURSEMENT DATE'
		INTDAILY = 'DAILY INTEREST ACCRUAL'
		DC10PRINC = 'PRINCIPAL AMOUNT AS OF REPURCHASE DATE';

FORMAT 	AA_GTE_LON_AMT DOLLAR13.2
		AD_PRC MMDDYY10.
		AD_DISB_1 MMDDYY10.
		INTDAILY DOLLAR13.2
		DC10PRINC DOLLAR13.2;

COMPUTE AFTER;

LINE ' ';
LINE @1 "TOTAL NUMBER OF ACCOUNTS REPURCHASED =&BWR_COUNT";
ENDCOMP;
RUN;



