DATA _NULL_;
/*for previous month use -1, for current use 0, etc*/
	RUN_MON = -1;

/*adjust for when the job runs in October for the previous fiscal year*/
	IF MONTH(TODAY()) = 10 THEN YRADJ = -1;
	ELSE YRADJ = 0;

	CALL SYMPUT('LN37DATE',PUT(INTNX('MONTH',TODAY(),RUN_MON,'E'),5.0));
	CALL SYMPUT('BEGIN',PUT(intnx('year.10',today(),YRADJ,'B'),5.0));
	CALL SYMPUT('FINISH',PUT(intnx('year.10',today(),YRADJ,'E'),5.0));
	CALL SYMPUT('PREVMONTHEND',PUT(INTNX('MONTH',TODAY(),RUN_MON,'E'),5.0));
	CALL SYMPUT('PREVMONTHBEGIN',PUT(INTNX('MONTH',TODAY(),RUN_MON,'B'),5.0));

/*test date values*/
/*	date1 = PUT(&BEGIN, mmddyy10.);*/
/*	date2 = PUT(&FINISH, mmddyy10.);*/
/*	put date1 date2;*/
RUN;


/*%LET RPTLIB = %SYSGET(reportdir);*/
%LET RPTLIB = T:\SAS;
FILENAME REPORTZ "&RPTLIB/UNWC06.NWC06RZ";
FILENAME REPORT2 "&RPTLIB/UNWC06.NWC06R2";
FILENAME REPORT3 "&RPTLIB/UNWC06.NWC06R3";
FILENAME REPORT4 "&RPTLIB/UNWC06.NWC06R4";

%SYSLPUT LN37DATE = &LN37DATE;
%SYSLPUT BEGIN = &BEGIN;
%SYSLPUT FINISH = &FINISH;
%SYSLPUT PREVMONTHEND = &PREVMONTHEND;
%SYSLPUT PREVMONTHBEGIN = &PREVMONTHBEGIN;
LIBNAME  LEGEND  REMOTE  SERVER=LEGEND SLIBREF=WORK  ;
RSUBMIT LEGEND;
/*%let DB = DNFPRQUT;  *This is test;*/
%let DB = DNFPUTDL;  *This is live;

LIBNAME PKUB DB2 DATABASE=&DB OWNER=PKUB;
LIBNAME PKUR DB2 DATABASE=&DB OWNER=PKUR;
LIBNAME PKUS DB2 DATABASE=&DB OWNER=PKUS;


PROC SQL;
	CREATE TABLE BKR AS
		SELECT
			D.DF_SPE_ACC_ID
			,COALESCE(B.BF_SSN,A.DF_PRS_ID) AS BF_SSN
			,CASE
				WHEN A.DC_BKR_STA = '05' AND C.DD_BKR_STA > &PREVMONTHEND THEN 'Suspended'
				WHEN A.DC_BKR_STA = '05' THEN 'Discharged'
				WHEN A.DC_BKR_STA = '06' THEN 'Suspended'
				ELSE ''
			END AS DISSED
			,A.DD_BKR_COR_1_RCV
			,A.DD_BKR_STA
			,A.DD_BKR_NTF
			,A.DD_BKR_FIL
			,A.DC_BKR_STA
			,A.DC_BKR_TYP
			,A.DF_COU_DKT
		FROM
			(
				SELECT DISTINCT
					DF_PRS_ID
					,MAX(DD_BKR_STA) AS DD_BKR_STA
					,SUBSTR(DF_COU_DKT,1,8) AS DF_COU_DKT
				FROM
					PKUB.PD24_PRS_BKR
				WHERE
					DD_BKR_COR_1_RCV <= &FINISH
				GROUP BY 
					DF_PRS_ID,
					SUBSTR(DF_COU_DKT,1,8)
			 )	C
			INNER JOIN PKUB.PD24_PRS_BKR A
				ON A.DF_PRS_ID = C.DF_PRS_ID
				AND A.DD_BKR_STA = C.DD_BKR_STA
				AND SUBSTR(A.DF_COU_DKT,1,8) = C.DF_COU_DKT
			LEFT OUTER JOIN PKUB.LN20_EDS B
				ON A.DF_PRS_ID = B.LF_EDS
			INNER JOIN PKUB.PD10_PRS_NME D 
				ON A.DF_PRS_ID = D.DF_PRS_ID 
		WHERE
			(A.DC_BKR_STA = '06' AND A.DD_BKR_NTF <= &PREVMONTHEND)
			OR
			(A.DC_BKR_STA = '05' AND A.DD_BKR_STA BETWEEN &BEGIN AND &FINISH)
			OR
			(A.DC_BKR_STA = '05' AND A.DD_BKR_STA > &FINISH)
	;
	
/*	bankrupcty population - if there is an 05 and 06 with the same Case #* and Status Date, only include the 06 record*/
	CREATE TABLE ONLY_06_RECORDS AS
		SELECT
			A.DF_SPE_ACC_ID
			,A.BF_SSN
			,A.DISSED
			,A.DD_BKR_COR_1_RCV
			,A.DD_BKR_STA
			,A.DD_BKR_NTF
			,A.DD_BKR_FIL
			,A.DC_BKR_STA
			,A.DC_BKR_TYP
			,A.DF_COU_DKT
		FROM	
			BKR A
		WHERE	
			A.DC_BKR_STA = '06'
			OR NOT EXISTS
				(
					SELECT
						*
					FROM
						BKR B
					WHERE	
						B.DC_BKR_STA = '06'	
						AND A.DD_BKR_STA = B.DD_BKR_STA
						AND A.DF_SPE_ACC_ID = B.DF_SPE_ACC_ID
						AND 
							(
							/*	If case number numeric digits and state characters are the same, this will be TRUE. If all case numbers have the state and the state (or the digits) is not the same, this will be FALSE*/
								A.DF_COU_DKT = B.DF_COU_DKT
								OR
							/*	If not all case numbers have the state, only use the case number digits in the comparison*/
								(
							/*		one or both of the case  numbers is missing the state*/
									(LENGTH(A.DF_COU_DKT) = 8 OR LENGTH(B.DF_COU_DKT) = 8)
									AND
							/*		the numeric portion matches*/
									SUBSTR(A.DF_COU_DKT,1,8) = SUBSTR(B.DF_COU_DKT,1,8)
								)
							)
				)
	;

/*	Only include the loan if the loan is a 1st disbursement date before the bankruptcy filed date*/
	CREATE TABLE BWRS AS
		SELECT 
			BF_SSN
			,MAX(A.DD_BKR_FIL) AS DD_BKR_FIL
		FROM
			ONLY_06_RECORDS A
		GROUP BY 
			BF_SSN
	;

/*	get loan data*/
	CREATE TABLE LOAN_DATA AS
		SELECT DISTINCT
			B.BF_SSN
			,B.LN_SEQ
			,COALESCE(C.LA_OTS_PRI_ELG,0) AS PBO
			,ROUND(C.LA_NSI_ACR,.01) as IRB
			,CALCULATED PBO + CALCULATED IRB AS TOT
			,CASE
				WHEN B.IC_LON_PGM IN ('TEACH') OR B.IC_LON_PGM LIKE ('DL%') THEN 'R2'
				ELSE 'R3'
			END AS RNUM
			,CASE
				WHEN B.IC_LON_PGM IN ('TEACH') OR B.IC_LON_PGM LIKE ('DL%') THEN 'D'
				ELSE 'F'
			END AS PORTFOLIO
			,C1.WC_DW_LON_STA
			,B.LD_PIF_RPT
		FROM
			BWRS A
			INNER JOIN PKUB.LN10_LON B
				ON A.BF_SSN = B.BF_SSN
			INNER JOIN PKUB.DW01_DW_CLC_CLU C1
				ON A.BF_SSN = C1.BF_SSN
				AND B.LN_SEQ = C1.LN_SEQ
			LEFT OUTER JOIN PKUS.LN37_LON_MTH_BAL C
				ON B.BF_SSN = C.BF_SSN
				AND B.LN_SEQ = C.LN_SEQ
				AND C.LC_STA_LON37 = 'A'
				AND C.LD_EFF_MTH_BAL = &LN37DATE
			LEFT OUTER JOIN PKUB.LN72_INT_RTE_HST D
				ON C.BF_SSN = D.BF_SSN
				AND C.LN_SEQ = D.LN_SEQ
				AND D.LD_ITR_EFF_BEG <= C.LD_EFF_MTH_BAL
				AND D.LD_ITR_EFF_END >= C.LD_EFF_MTH_BAL
				AND D.LC_STA_LON72 = 'A'
		WHERE 
			B.LD_LON_1_DSB < A.DD_BKR_FIL
			AND B.LC_STA_LON10 = 'R'
	;

/*	merge loan data with bankruptcy population to create initial population*/
	CREATE TABLE INIT_POP AS
		SELECT DISTINCT
			A.DF_SPE_ACC_ID
			,A.DISSED
			,A.DD_BKR_COR_1_RCV
			,A.DD_BKR_STA
			,A.DD_BKR_NTF
			,A.DD_BKR_FIL
			,A.DC_BKR_STA
			,A.DC_BKR_TYP
			,A.DF_COU_DKT
			,B.*
		FROM
			ONLY_06_RECORDS A
			INNER JOIN LOAN_DATA B
				ON A.BF_SSN = B.BF_SSN
		WHERE
			B.WC_DW_LON_STA <> '22'
			OR
			(B.WC_DW_LON_STA = '22' AND B.LD_PIF_RPT > A.DD_BKR_COR_1_RCV)	
	;

	CREATE TABLE R2R3 AS
		SELECT
			DF_SPE_ACC_ID
			,BF_SSN
			,DISSED
			,DD_BKR_COR_1_RCV
			,DD_BKR_STA
			,DD_BKR_NTF
			,DD_BKR_FIL
			,DC_BKR_STA
			,DC_BKR_TYP
			,COUNT(DISTINCT LN_SEQ) AS LON_NUM
			,SUM(PBO) AS PBO
			,SUM(IRB) AS IRB
			,SUM(TOT) AS TOT
			,RNUM
		FROM
			INIT_POP
		GROUP BY
			DF_SPE_ACC_ID
			,BF_SSN
			,DISSED
			,DD_BKR_COR_1_RCV
			,DD_BKR_STA
			,DD_BKR_NTF
			,DD_BKR_FIL
			,DC_BKR_STA
			,DC_BKR_TYP
			,RNUM
	;
QUIT;

/*detail for testing*/
PROC SQL;
	CREATE TABLE SPNSE_MO_DET AS
		SELECT DISTINCT
			A.PORTFOLIO
			,A.BF_SSN
			,A.LN_SEQ
			,A.TOT
			,A.DF_SPE_ACC_ID
			,A.DF_COU_DKT
		FROM
			INIT_POP A
			LEFT JOIN 
				(
					SELECT
						BF_SSN
						,LN_SEQ
						,SUBSTR(DF_COU_DKT,1,8) AS DF_COU_DKT
					FROM
						INIT_POP
					WHERE
						(
							DC_BKR_STA = '06' 
							AND WC_DW_LON_STA= '22' 
							AND LD_PIF_RPT < &PREVMONTHBEGIN
						)
						OR
						(
							DC_BKR_STA = '05'
							AND DD_BKR_STA < &PREVMONTHBEGIN
						)
				) B
				ON A.BF_SSN = B.BF_SSN
				AND SUBSTR(A.DF_COU_DKT,1,8) = B.DF_COU_DKT
				AND A.LN_SEQ = B.LN_SEQ
		WHERE
			B.BF_SSN IS NULL
	;

	CREATE TABLE SPNSE_FY_DET AS
		SELECT DISTINCT
			PORTFOLIO
			,BF_SSN 
			,LN_SEQ 
			,TOT 
			,DF_SPE_ACC_ID
			,DF_COU_DKT
		FROM
			INIT_POP
	;

	CREATE TABLE MOC_MO_DET AS
		SELECT DISTINCT
			PORTFOLIO
			,BF_SSN
			,LN_SEQ
			,TOT
			,DF_SPE_ACC_ID
			,DF_COU_DKT
		FROM
			INIT_POP
		WHERE
			DD_BKR_COR_1_RCV BETWEEN &PREVMONTHBEGIN AND &PREVMONTHEND
	;

	CREATE TABLE MOC_FY_DET AS
		SELECT DISTINCT
			PORTFOLIO
			,BF_SSN
			,LN_SEQ
			,TOT
			,DF_SPE_ACC_ID
			,DF_COU_DKT
		FROM
			INIT_POP
	;

QUIT;

PROC SQL;
	CREATE TABLE SPNSE_MO AS
		SELECT
			PORTFOLIO
			,COUNT(DISTINCT CATX('',BF_SSN, DF_COU_DKT)) AS SPNSE_MONTH_BORR
			,COUNT(LN_SEQ) AS SPNSE_MONTH_LOANS
			,SUM(TOT) AS SPNSE_MONTH_DOLLARS
		FROM
			SPNSE_MO_DET
		GROUP BY
			PORTFOLIO
	;

	CREATE TABLE SPNSE_FY AS
		SELECT
			PORTFOLIO
			,COUNT(DISTINCT CATX('',BF_SSN, DF_COU_DKT)) AS SPNSE_FY_BORR
			,COUNT(LN_SEQ) AS SPNSE_FY_LOANS
			,SUM(TOT) AS SPNSE_FY_DOLLARS
		FROM
			SPNSE_FY_DET
		GROUP BY
			PORTFOLIO
	;

	CREATE TABLE MOC_MO AS
		SELECT
			PORTFOLIO
			,COUNT(DISTINCT CATX('',BF_SSN, DF_COU_DKT)) AS MOC_MONTH_BORR
			,COUNT(LN_SEQ) AS MOC_MONTH_LOANS
			,SUM(TOT) AS MOC_MONTH_DOLLARS
		FROM
			MOC_MO_DET
		GROUP BY
			PORTFOLIO
	;

	CREATE TABLE MOC_FY AS
		SELECT
			PORTFOLIO
			,COUNT(DISTINCT CATX('',BF_SSN, DF_COU_DKT)) AS MOC_FY_BORR
			,COUNT(LN_SEQ) AS MOC_FY_LOANS
			,SUM(TOT) AS MOC_FY_DOLLARS
		FROM
			MOC_FY_DET
		GROUP BY
			PORTFOLIO
	;

QUIT;

DATA SUMMARY;
	MERGE SPNSE_MO SPNSE_FY MOC_MO MOC_FY;
	BY PORTFOLIO;
RUN;

ENDRSUBMIT;

DATA R2R3; SET LEGEND.R2R3; RUN;
DATA SUMMARY; SET LEGEND.SUMMARY; RUN;


%MACRO REP(R);
DATA _NULL_;
SET R2R3 ;
WHERE RNUM = "R&R";
FILE REPORT&R DELIMITER=',' DSD DROPOVER LRECL=32767;
format DD_BKR_COR_1_RCV mmddyy10.;
format DD_BKR_STA mmddyy10.;
format tot dollar18.2;
IF _N_ = 1 THEN DO;
	PUT "ACCOUNT #,BANKRUPTCY STATUS,BANKRUPTCY TYPE,RECEIVED DATE,STATUS DATE,# LOANS,PBO,IRB,TOTAL";
END;
DO;
   PUT DF_SPE_ACC_ID @;
   PUT DC_BKR_STA @;
   PUT DC_BKR_TYP @;
   PUT DD_BKR_COR_1_RCV @;
   PUT DD_BKR_STA @;
   PUT LON_NUM @;
   PUT PBO @;
   PUT IRB @;
   PUT TOT $ ;
END;
RUN;
%MEND;
%REP(2);
%REP(3);

DATA _NULL_;
	SET SUMMARY;
	FILE REPORT4 DELIMITER=',' DSD DROPOVER LRECL=32767;
	FORMAT SPNSE_MONTH_BORR SPNSE_MONTH_LOANS SPNSE_FY_BORR SPNSE_FY_LOANS MOC_MONTH_BORR MOC_MONTH_LOANS MOC_FY_BORR MOC_FY_LOANS COMMA8.;
	FORMAT SPNSE_MONTH_DOLLARS SPNSE_FY_DOLLARS MOC_MONTH_DOLLARS MOC_FY_DOLLARS DOLLAR18.2;
	IF _N_ = 1 THEN 
		DO;
			PUT "PORTFOLIO,SPNSE_MONTH_BORR,SPNSE_MONTH_LOANS,SPNSE_MONTH_DOLLARS,SPNSE_FY_BORR,SPNSE_FY_LOANS,SPNSE_FY_DOLLARS,MOC_MONTH_BORR,MOC_MONTH_LOANS,MOC_MONTH_DOLLARS,MOC_FY_BORR,MOC_FY_LOANS,MOC_FY_DOLLARS";
		END;

	DO;
		PUT PORTFOLIO @;
		PUT SPNSE_MONTH_BORR @;
		PUT SPNSE_MONTH_LOANS @;
		PUT SPNSE_MONTH_DOLLARS @;
		PUT SPNSE_FY_BORR @;
		PUT SPNSE_FY_LOANS @;
		PUT SPNSE_FY_DOLLARS @;
		PUT MOC_MONTH_BORR @;
		PUT MOC_MONTH_LOANS @;
		PUT MOC_MONTH_DOLLARS @;
		PUT MOC_FY_BORR @;
		PUT MOC_FY_LOANS @;
		PUT MOC_FY_DOLLARS $;
	END;
RUN;

/*create detail files (comment out for prod)*/
%MACRO GETDETAIL(DS);
	PROC EXPORT
			OUTFILE = 'T:\SAS\C06DETAIL.XLS'
			DATA = LEGEND.&DS
			DBMS = EXCEL
			REPLACE;
		;
		SHEET = &DS;
	QUIT;
%MEND;

%GETDETAIL(SPNSE_MO_DET);
%GETDETAIL(SPNSE_FY_DET);
%GETDETAIL(MOC_MO_DET);
%GETDETAIL(MOC_FY_DET);
