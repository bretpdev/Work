%LET RPTLIB = T:\SAS;
FILENAME REPORTZ "&RPTLIB/UNWS46.NWS46RZ";
FILENAME REPORT2 "&RPTLIB/Activity History - Imaging FED.R2";
FILENAME REPORT3 "&RPTLIB/Activity History - Imaging FED.R3";
FILENAME REPORT4 "&RPTLIB/Activity History - Imaging FED.R4";
FILENAME REPORT5 "&RPTLIB/Activity History - Imaging FED.R5";
FILENAME REPORT6 "&RPTLIB/Activity History - Imaging FED.R6";
FILENAME REPORT7 "&RPTLIB/Activity History - Imaging FED.R7";
LIBNAME  LEGEND  REMOTE  SERVER=LEGEND SLIBREF=WORK  ;
/*GET SSNS AND PERSON TYPE FROM INPUT FILE*/
DATA INLST;
	INFILE "&RPTLIB\Image History Accounts.txt" DSD DLM=',' MISSOVER LRECL=67000;
	INFORMAT SSN $100. PRSN_TYP $1.;
	INPUT SSN $ PRSN_TYP $;
RUN;
PROC SQL NOPRINT;
	SELECT "'"||TRIM(SSN)||"'" 
		INTO :SSN_LIST SEPARATED BY "," 
	FROM INLST;
QUIT;
DATA LEGEND.INLST;
	SET INLST;
RUN;
%SYSLPUT SSN_LIST = &SSN_LIST;
RSUBMIT;

/*%let DB = DNFPRQUT;  *This is test;*/
%let DB = DNFPUTDL;  *This is live;
/*LIBNAME PKUB DB2 DATABASE=DNFPRQUT OWNER=PKUB; *test;*/
LIBNAME PKUB DB2 DATABASE=DNFPUTDL OWNER=PKUB; *prod;
LIBNAME PROGREVW V8 '/sas/whse/progrevw';
PROC SQL;
/*	select current and history addresses*/
	CREATE TABLE ADR AS
/*		select the current address*/
		SELECT 
			PD30.DF_PRS_ID,
			'' AS TYPE,
			CATX(' ',PD30.DX_STR_ADR_1,PD30.DX_STR_ADR_2,PD30.DM_CT,PD30.DC_DOM_ST,PD30.DF_ZIP_CDE,PD30.DM_FGN_ST,PD30.DM_FGN_CNY) AS DEMOGRAPHIC,
			PD30.DD_VER_ADR AS EFFECTIVE_DATE,
			PD30.DF_LST_DTS_PD30 AS TIME,
			PD30.DI_VLD_ADR AS VALID,
			PD30.DX_STR_ADR_1,
			PD30.DX_STR_ADR_2,
			PD30.DM_CT,
			PD30.DC_DOM_ST,
			PD30.DF_ZIP_CDE,
			PD30.DM_FGN_ST,
			PD30.DM_FGN_CNY,
			COALESCE(PD31.DN_ADR_SEQ,0) + 1 AS DN_ADR_SEQ
		FROM 
			PKUB.PD30_PRS_ADR PD30
			LEFT JOIN
				(
					SELECT
						DF_PRS_ID,
						MAX(DN_ADR_SEQ) AS DN_ADR_SEQ
					FROM
						PKUB.PD31_PRS_INA
					WHERE 
						DF_PRS_ID IN (&SSN_LIST)
						AND DC_ADR_HST = 'L'
					GROUP BY
						DF_PRS_ID
				) PD31
				ON PD30.DF_PRS_ID = PD31.DF_PRS_ID
		WHERE 
			PD30.DF_PRS_ID IN (&SSN_LIST)
			AND PD30.DC_ADR = 'L'

		UNION

/*		select history addresses*/
		SELECT 
			DF_PRS_ID,
			'' AS TYPE,
			CATX(' ',DX_STR_ADR_1_HST,DX_STR_ADR_2_HST,DM_CT_HST,DC_DOM_ST_HST,DF_ZIP_CDE_HST,DM_FGN_ST_HST,DM_FGN_CNY_HST) AS DEMOGRAPHIC,
			DD_VER_ADR_HST AS EFFECTIVE_DATE,
			DF_LST_DTS_PD31 AS TIME,
			DI_VLD_ADR_HST AS VALID,
			DX_STR_ADR_1_HST AS DX_STR_ADR_1,
			DX_STR_ADR_2_HST AS DX_STR_ADR_2,
			DM_CT_HST AS DM_CT,
			DC_DOM_ST_HST AS DC_DOM_ST,
			DF_ZIP_CDE_HST AS DF_ZIP_CDE,
			DM_FGN_ST_HST AS DM_FGN_ST,
			DM_FGN_CNY_HST AS DM_FGN_CNY,
			DN_ADR_SEQ
		FROM 
			PKUB.PD31_PRS_INA
		WHERE 
			DF_PRS_ID IN (&SSN_LIST)
			AND DC_ADR_HST = 'L'
	;

/*	pair up address records using DN_ADR_SEQ*/
	CREATE TABLE ADRS AS
		SELECT DISTINCT
			A.DF_PRS_ID,
			A.TYPE,
			B.DN_ADR_SEQ AS OLD_SEQ,
			B.DEMOGRAPHIC AS OLD_DEMO,
			A.DN_ADR_SEQ AS NEW_SEQ,
			A.DEMOGRAPHIC AS NEW_DEMO,
			A.EFFECTIVE_DATE,
			A.TIME,
			A.VALID
		FROM
			ADR A
			JOIN
				(
					SELECT
						DF_PRS_ID,
						MAX(DN_ADR_SEQ) AS MAX_ADR_SEQ
					FROM
						ADR
					GROUP BY
						DF_PRS_ID
				) MX
				ON A.DF_PRS_ID = MX.DF_PRS_ID
			LEFT JOIN ADR B
				ON A.DF_PRS_ID = B.DF_PRS_ID
				AND B.DN_ADR_SEQ = A.DN_ADR_SEQ - 1
		WHERE
			STRIP(COMPRESS(A.DX_STR_ADR_1,' ','DK')) <> STRIP(COMPRESS(B.DX_STR_ADR_1,' ','DK'))
			OR STRIP(COMPRESS(A.DX_STR_ADR_2,' ','DK')) <> STRIP(COMPRESS(B.DX_STR_ADR_2,' ','DK'))
			OR A.DM_CT <> B.DM_CT
			OR A.DC_DOM_ST <> B.DC_DOM_ST
			OR A.DF_ZIP_CDE <> B.DF_ZIP_CDE
			OR A.DM_FGN_ST <> B.DM_FGN_ST
			OR A.DM_FGN_CNY <> B.DM_FGN_CNY
			OR (A.DN_ADR_SEQ = MX.MAX_ADR_SEQ AND A.VALID = 'N')
		ORDER BY
			A.DN_ADR_SEQ DESC
	;

/*	select current and history phones*/
	CREATE TABLE PHN AS
/*		select the current phone*/
		SELECT 
			PD40.DF_PRS_ID,
			PD40.DC_PHN AS TYPE,
			CASE 
				WHEN PD40.DN_DOM_PHN_ARA = '' THEN CATX('',PD40.DN_FGN_PHN_CNY,PD40.DN_FGN_PHN_CT,PD40.DN_FGN_PHN_LCL)
				ELSE CATX('',PD40.DN_DOM_PHN_ARA,PD40.DN_DOM_PHN_XCH,PD40.DN_DOM_PHN_LCL,PD40.DN_PHN_XTN)
			END AS DEMOGRAPHIC,
			PD40.DD_PHN_VER AS EFFECTIVE_DATE,
			PD40.DF_LST_DTS_PD40 AS TIME,
			PD40.DI_PHN_VLD AS VALID,
			COALESCE(PD41.DN_PHN_SEQ,0) + 1 AS DN_PHN_SEQ
		FROM 
			PKUB.PD40_PRS_PHN PD40
			LEFT JOIN
				(
					SELECT
						DF_PRS_ID,
						DC_PHN_HST,
						MAX(DN_PHN_SEQ) AS DN_PHN_SEQ
					FROM
						PKUB.PD41_PHN_HST
					WHERE 
						DF_PRS_ID IN (&SSN_LIST)
					GROUP BY
						DF_PRS_ID,
						DC_PHN_HST
				) PD41
				ON PD40.DF_PRS_ID = PD41.DF_PRS_ID
				AND PD40.DC_PHN = PD41.DC_PHN_HST
		WHERE 
			PD40.DF_PRS_ID IN (&SSN_LIST)

		UNION

/*		select history phones*/
		SELECT 
			DF_PRS_ID,
			DC_PHN_HST AS TYPE,
			CASE 
				WHEN DN_DOM_PHN_ARA_HST = '' THEN CATX('',DN_FGN_PHN_CNY_HST,DN_FGN_PHN_CT_HST,DN_FGN_PHN_LCL_HST)
				ELSE CATX('',DN_DOM_PHN_ARA_HST,DN_DOM_PHN_XCH_HST,DN_DOM_PHN_LCL_HST,DN_PHN_XTN_HST)
			END AS DEMOGRAPHIC,	
			DD_PHN_VER_HST AS EFFECTIVE_DATE,
			DF_LST_DTS_PD41 AS TIME,
			DI_PHN_VLD_HST AS VALID,
			DN_PHN_SEQ
		FROM 
			PKUB.PD41_PHN_HST
		WHERE 
			DF_PRS_ID IN (&SSN_LIST)
	;

/*	pair up phone records using DN_PHN_SEQ*/
	CREATE TABLE PHNS AS
		SELECT DISTINCT
			A.DF_PRS_ID,
			A.TYPE,
			B.DN_PHN_SEQ AS OLD_SEQ,
			B.DEMOGRAPHIC AS OLD_DEMO,
			A.DN_PHN_SEQ AS NEW_SEQ,
			A.DEMOGRAPHIC AS NEW_DEMO,
			A.EFFECTIVE_DATE,
			A.TIME,
			A.VALID
		FROM
			PHN A
			JOIN 
				(
					SELECT
						DF_PRS_ID,
						TYPE,
						MAX(DN_PHN_SEQ) AS MAX_PHN_SEQ
					FROM
						PHN
					GROUP BY
						DF_PRS_ID,
						TYPE
				) MX
				ON A.DF_PRS_ID = MX.DF_PRS_ID
				AND A.TYPE = MX.TYPE
			LEFT JOIN PHN B
				ON A.DF_PRS_ID = B.DF_PRS_ID
				AND A.TYPE = B.TYPE
				AND B.DN_PHN_SEQ = A.DN_PHN_SEQ - 1
		WHERE
			A.DEMOGRAPHIC <> B.DEMOGRAPHIC
			OR (A.DN_PHN_SEQ = MX.MAX_PHN_SEQ AND A.VALID = 'N')
		ORDER BY
			A.TIME,
			A.DN_PHN_SEQ DESC
	;

/*	select all e-mail records in date order*/
	CREATE TABLE EML AS
		SELECT DISTINCT
			DF_PRS_ID,
			DC_ADR_EML AS TYPE,
			DX_ADR_EML AS DEMOGRAPHIC,
			DD_VER_ADR_EML AS EFFECTIVE_DATE,
			DF_LST_DTS_PD32 AS TIME,
			DI_VLD_ADR_EML AS VALID,
			DF_CRT_DTS_PD32
		FROM 
			PKUB.PD32_PRS_ADR_EML
		WHERE 
			DF_PRS_ID IN (&SSN_LIST)
		ORDER BY 
			DF_PRS_ID,
			DC_ADR_EML,
			DF_CRT_DTS_PD32
	;
QUIT;

/*add sequence number to e-mail records*/
DATA EML;
	SET EML;
	DN_EML_SEQ = _N_;
RUN;

PROC SQL;
/*	pair up phone records using e-mail sequence number*/
	CREATE TABLE EMLS AS
		SELECT DISTINCT
			A.DF_PRS_ID,
			A.TYPE,
			B.DN_EML_SEQ AS OLD_SEQ,
			B.DEMOGRAPHIC AS OLD_DEMO,
			A.DN_EML_SEQ AS NEW_SEQ,
			A.DEMOGRAPHIC AS NEW_DEMO,
			A.EFFECTIVE_DATE,
			A.TIME,
			A.VALID
		FROM
			EML A
			JOIN 
				(
					SELECT
						DF_PRS_ID,
						TYPE,
						MAX(DN_EML_SEQ) AS MAX_EML_SEQ
					FROM
						EML
					GROUP BY
						DF_PRS_ID,
						TYPE
				) MX
				ON A.DF_PRS_ID = MX.DF_PRS_ID
				AND A.TYPE = MX.TYPE
			LEFT JOIN EML B
				ON A.DF_PRS_ID = B.DF_PRS_ID
				AND A.TYPE = B.TYPE
				AND B.DN_EML_SEQ = A.DN_EML_SEQ - 1
		WHERE
			UPPER(A.DEMOGRAPHIC) <> UPPER(B.DEMOGRAPHIC)
			OR (A.DN_EML_SEQ = MX.MAX_EML_SEQ AND A.VALID = 'N')
		ORDER BY
			A.TIME,
			A.DN_EML_SEQ DESC
	;
CONNECT TO DB2 (DATABASE=&DB);
CREATE TABLE DEMO AS
	SELECT A.*
		,B.PRSN_TYP
	FROM CONNECTION TO DB2 (
							SELECT A.DF_PRS_ID 
								,TRIM(TRIM(DM_PRS_1) || ' ' || DM_PRS_MID)|| ' ' || TRIM(DM_PRS_LST) ||' ' || DM_PRS_LST_SFX AS BOR_NAME
							FROM PKUB.PD10_PRS_NME A
							WHERE A.DF_PRS_ID IN (&SSN_LIST)
							) A
		INNER JOIN INLST B
			ON A.DF_PRS_ID = B.SSN
		;
DISCONNECT FROM DB2;

	/*	get borrower SSN and name for endorsers*/
CREATE TABLE END_BRW_INFO AS
	SELECT
		LN20.LF_EDS AS DF_PRS_ID,
		PD10.DF_PRS_ID AS BF_SSN,
		TRIM(TRIM(PD10.DM_PRS_1) || ' ' || PD10.DM_PRS_MID)|| ' ' || TRIM(PD10.DM_PRS_LST) ||' ' || PD10.DM_PRS_LST_SFX AS BRW_NAME
	FROM
		PKUB.PD10_PRS_NME PD10
		JOIN PKUB.LN20_EDS LN20
			ON PD10.DF_PRS_ID = LN20.BF_SSN
	WHERE
		LN20.LF_EDS IN (&SSN_LIST) /*only endorser SSNs in list will match LN20.LF_EDS*/
;
CONNECT TO DB2 (DATABASE=&DB);
CREATE TABLE ACT_HIST AS
	SELECT *
	FROM CONNECTION TO DB2 (
		SELECT DISTINCT 
			A.BF_SSN
		/*	,LN10.IC_LON_PGM*/
		/*	,LN10.LD_LON_1_DSB*/
			,RTRIM(A.BF_SSN)||CHAR(A.LN_ATY_SEQ) AS CMT_NATL_KEY
			,COALESCE(CMT.LN_ATY_CMT_SEQ,0) AS LN_ATY_CMT_SEQ /*used to order individual AY20 records so entire comment can be compiled with individual AY20 records in the correct order*/
			,COALESCE(CMT.LN_ATY_TXT_SEQ,0) AS LN_ATY_TXT_SEQ /*used to order individual AY20 records so entire comment can be compiled with individual AY20 records in the correct order*/
			,CMT.LX_ATY
			,A.PF_REQ_ACT
			,COALESCE(A.LD_ATY_RSP,A.LD_ATY_REQ_RCV) AS LD_ATY_RSP
			,A.LT_ATY_RSP
			,A.LF_ATY_RCP
			,CASE
				WHEN B.PX_ACT_COL_AUT_REQ <> '' THEN B.PX_ACT_COL_AUT_REQ
				ELSE B.PX_ACT_DSC_REQ
			 END AS ARC_DESCRIPTION
			,CASE
				WHEN A.LF_PRF_BY = '' THEN A.LF_USR_REQ_ATY
				ELSE A.LF_PRF_BY
			END AS LF_PRF_BY
		FROM PKUB.AY10_BR_LON_ATY A
			INNER JOIN PKUB.AC10_ACT_REQ B
				ON A.PF_REQ_ACT = B.PF_REQ_ACT
			/*INNER JOIN PKUB.LN85_LON_ATY LN85*/
			/*	ON A.BF_SSN = LN85.BF_SSN*/
			/*	AND A.LN_ATY_SEQ = LN85.LN_ATY_SEQ*/
			/*INNER JOIN PKUB.LN10_LON LN10*/
			/*	ON A.BF_SSN = LN10.BF_SSN*/
			/*	AND LN85.LN_SEQ = LN10.LN_SEQ*/
			LEFT OUTER JOIN
				(
					SELECT DISTINCT
						AY15.BF_SSN,
						AY15.LN_ATY_SEQ,
						AY15.LN_ATY_CMT_SEQ,
						AY20.LN_ATY_TXT_SEQ,
						AY20.LX_ATY
					FROM
						PKUB.AY15_ATY_CMT AY15
						JOIN PKUB.AY20_ATY_TXT AY20
							ON AY15.BF_SSN = AY20.BF_SSN
							AND AY15.LN_ATY_SEQ = AY20.LN_ATY_SEQ
							AND AY15.LN_ATY_CMT_SEQ = AY20.LN_ATY_CMT_SEQ
					WHERE 
						AY15.BF_SSN IN (&SSN_LIST)
						AND AY15.LC_STA_AY15 = 'A'
				) CMT
				ON A.BF_SSN = CMT.BF_SSN
				AND A.LN_ATY_SEQ = CMT.LN_ATY_SEQ
		WHERE A.BF_SSN IN (&SSN_LIST)
			AND A.LC_STA_ACTY10  = 'A'
			AND COALESCE(A.PF_RSP_ACT,'CANCL') NOT IN ('CANCL','DECNV')
);
DISCONNECT FROM DB2;

	CREATE TABLE DFR_FOR AS
		SELECT 
			LN50.BF_SSN,
			LN10.LN_SEQ,
			LN10.IC_LON_PGM,
			LN10.LD_LON_1_DSB,
			DF10.LC_DFR_TYP AS SYS_TYP,
			DF10.LC_DFR_SUB_TYP AS SYS_SUB_TYP,
			LN50.LD_DFR_BEG AS LD_BEG,
			LN50.LD_DFR_END AS LD_END,
			CASE 
				WHEN TRAN.TRANSLATED_CODE = 'S' THEN	'In School'
				WHEN TRAN.TRANSLATED_CODE = 'R' THEN	'Rehabilitation'
				WHEN TRAN.TRANSLATED_CODE = 'F' THEN	'Graduate Fellowship'
				WHEN TRAN.TRANSLATED_CODE = 'U' THEN	'Unemployment'
				WHEN TRAN.TRANSLATED_CODE = 'C' THEN	'Economic Hardship'
				WHEN TRAN.TRANSLATED_CODE = 'W' THEN	'Military'
				WHEN TRAN.TRANSLATED_CODE = 'E' THEN	'Discretionary Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'B' THEN	'Administrative Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'Y' THEN	'Mandatory Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'Z' THEN	'Mandatory Administrative Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'H' THEN	'Public Health'
				WHEN TRAN.TRANSLATED_CODE = 'V' THEN	'Vista'
				WHEN TRAN.TRANSLATED_CODE = 'I' THEN	'Internship'
				WHEN TRAN.TRANSLATED_CODE = 'X' THEN	'Tax Exempt'
				WHEN TRAN.TRANSLATED_CODE = 'D' THEN	'Disability'
				WHEN TRAN.TRANSLATED_CODE = 'M' THEN	'Motherhood' 
				WHEN TRAN.TRANSLATED_CODE = 'P' THEN	'Parental Leave'
				WHEN TRAN.TRANSLATED_CODE = 'T' THEN	'Teacher'
				WHEN TRAN.TRANSLATED_CODE = 'A' THEN	'Armed Forces Deferment'
				WHEN TRAN.TRANSLATED_CODE = 'G' THEN	'Intern Forbearance'
				WHEN TRAN.TRANSLATED_CODE = '2' THEN	'TLF Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'J' THEN	'Post Active Student Deferment'
				WHEN TRAN.TRANSLATED_CODE = 'K' THEN	'Peace Corp Deferment'
				WHEN TRAN.TRANSLATED_CODE = 'L' THEN	'NOAA Deferment'
				WHEN TRAN.TRANSLATED_CODE = 'N' THEN	'Excessive Debt Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'O' THEN	'CNCS Forbearance'
				WHEN TRAN.TRANSLATED_CODE = '3' THEN	'Military Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'Q' THEN	'Low Pay Forbearance'
				WHEN TRAN.TRANSLATED_CODE = '4' THEN	'PLUS In-School Deferment'
				WHEN TRAN.TRANSLATED_CODE = '5' THEN	'GRAD/PLUS - Post Enrollment Deferment'
				ELSE ' '
			 END AS TYP
		FROM
			PKUB.DF10_BR_DFR_REQ DF10
			JOIN PKUB.LN50_BR_DFR_APV LN50
				ON DF10.BF_SSN = LN50.BF_SSN
				AND DF10.LF_DFR_CTL_NUM = LN50.LF_DFR_CTL_NUM
			JOIN PKUB.LN10_LON LN10
				ON DF10.BF_SSN = LN10.BF_SSN
				AND LN50.LN_SEQ = LN10.LN_SEQ
			JOIN PROGREVW.CODE_TRANSLATIONS TRAN
				ON DF10.LC_DFR_TYP = TRAN.SYSTEM_CODE
				AND TRAN.ATTRIBUTE = 'DF10.LC_DFR_TYP'
				AND TRAN.TRANSLATION_TYPE = 'EA27 Code'
		WHERE 
			LN50.LC_STA_LON50  = 'A'
			AND LN50.BF_SSN IN (&SSN_LIST) 

		UNION

		SELECT
			LN60.BF_SSN,
			LN10.LN_SEQ,
			LN10.IC_LON_PGM,
			LN10.LD_LON_1_DSB,
			FB10.LC_FOR_TYP AS SYS_TYP,
			FB10.LC_FOR_SUB_TYP AS SYS_SUB_TYP,
			LN60.LD_FOR_BEG AS BEG,
			LN60.LD_FOR_END AS END,
			CASE 
				WHEN TRAN.TRANSLATED_CODE = 'S' THEN	'In School'
				WHEN TRAN.TRANSLATED_CODE = 'R' THEN	'Rehabilitation'
				WHEN TRAN.TRANSLATED_CODE = 'F' THEN	'Graduate Fellowship'
				WHEN TRAN.TRANSLATED_CODE = 'U' THEN	'Unemployment'
				WHEN TRAN.TRANSLATED_CODE = 'C' THEN	'Economic Hardship'
				WHEN TRAN.TRANSLATED_CODE = 'W' THEN	'Military'
				WHEN TRAN.TRANSLATED_CODE = 'E' THEN	'Discretionary Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'B' THEN	'Administrative Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'Y' THEN	'Mandatory Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'Z' THEN	'Mandatory Administrative Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'H' THEN	'Public Health'
				WHEN TRAN.TRANSLATED_CODE = 'V' THEN	'Vista'
				WHEN TRAN.TRANSLATED_CODE = 'I' THEN	'Internship'
				WHEN TRAN.TRANSLATED_CODE = 'X' THEN	'Tax Exempt'
				WHEN TRAN.TRANSLATED_CODE = 'D' THEN	'Disability'
				WHEN TRAN.TRANSLATED_CODE = 'M' THEN	'Motherhood' 
				WHEN TRAN.TRANSLATED_CODE = 'P' THEN	'Parental Leave'
				WHEN TRAN.TRANSLATED_CODE = 'T' THEN	'Teacher'
				WHEN TRAN.TRANSLATED_CODE = 'A' THEN	'Armed Forces Deferment'
				WHEN TRAN.TRANSLATED_CODE = 'G' THEN	'Intern Forbearance'
				WHEN TRAN.TRANSLATED_CODE = '2' THEN	'TLF Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'J' THEN	'Post Active Student Deferment'
				WHEN TRAN.TRANSLATED_CODE = 'K' THEN	'Peace Corp Deferment'
				WHEN TRAN.TRANSLATED_CODE = 'L' THEN	'NOAA Deferment'
				WHEN TRAN.TRANSLATED_CODE = 'N' THEN	'Excessive Debt Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'O' THEN	'CNCS Forbearance'
				WHEN TRAN.TRANSLATED_CODE = '3' THEN	'Military Forbearance'
				WHEN TRAN.TRANSLATED_CODE = 'Q' THEN	'Low Pay Forbearance'
				WHEN TRAN.TRANSLATED_CODE = '4' THEN	'PLUS In-School Deferment'
				WHEN TRAN.TRANSLATED_CODE = '5' THEN	'GRAD/PLUS - Post Enrollment Deferment'
				ELSE ' '
			 END AS TYP
		FROM 
			PKUB.FB10_BR_FOR_REQ FB10
			JOIN PKUB.LN60_BR_FOR_APV LN60
				ON FB10.BF_SSN = LN60.BF_SSN
				AND FB10.LF_FOR_CTL_NUM = LN60.LF_FOR_CTL_NUM
			JOIN PKUB.LN10_LON LN10
				ON FB10.BF_SSN = LN10.BF_SSN
				AND LN60.LN_SEQ = LN10.LN_SEQ
			JOIN PROGREVW.CODE_TRANSLATIONS TRAN
				ON CATX('',FB10.LC_FOR_TYP,FB10.LC_FOR_SUB_TYP) = TRAN.SYSTEM_CODE
				AND TRAN.ATTRIBUTE = 'FB10.LC_FOR_TYP+SUB_TYP'
				AND TRAN.TRANSLATION_TYPE = 'EA27 Code'
		WHERE 
			LN60.LC_STA_LON60  = 'A'
			AND LN60.BF_SSN IN (&SSN_LIST)
	;
	CONNECT TO DB2 (DATABASE=&DB);
	CREATE TABLE RPS AS
		SELECT	
			*
		FROM	
			CONNECTION TO DB2 
				(
					SELECT DISTINCT
						LN65.BF_SSN
						,TRIM(TRIM(PD10.DM_PRS_1) || ' ' || PD10.DM_PRS_MID)|| ' ' || TRIM(PD10.DM_PRS_LST) ||' ' || PD10.DM_PRS_LST_SFX AS NAME
/*						,LN65.LN_SEQ*/
/*						,LN65.LN_RPS_SEQ*/
						,COALESCE(CAST(LN16.LD_DLQ_OCC AS VARCHAR(10)), CAST(LN80.LD_BIL_DU_LON AS VARCHAR(10)), DW01.WC_DW_LON_STA) AS NEXT_PMT_DU
/*						,LN80.LD_BIL_DU_LON*/
/*						,DW01.WC_DW_LON_STA*/
						,LN10.IC_LON_PGM
						,LN10.LD_LON_1_DSB
						,CASE
							WHEN LN65.LC_STA_LON65 = 'A' THEN 'ACTIVE'
							ELSE 'INACTIVE'
						 END AS SCHEDULE_STATUS
						,LN65.LC_TYP_SCH_DIS AS SCHEDULE_TYPE
/*						,CASE*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'CA' THEN 'PAYE PFH'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'CP' THEN 'PAYE Perm-Stand'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'CQ' THEN 'ICR Perm_Stand'*/
/*							WHEN LN65.LC_TYP_SCH_DIS IN ('C1','C2','C3') THEN 'ICR PFH'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'EG' THEN 'Extended Graduated'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'EL' THEN 'Extended Level/Standard'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'FG' THEN 'Fixed Graduated Amount/Term'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'FS' THEN 'Fixed Amount/Term'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'G' THEN 'Graduated'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'IB' THEN 'IBR PFH'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'IL' THEN 'IBR Perm-Stand'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'IP' THEN 'IBR2014 Perm-Stand'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'I3' THEN 'IBR2014 PFH'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'L' THEN 'Level/Standard'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'PG' THEN 'Pre-Hera Graduated'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'PL' THEN 'Pre-Hera Extended'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'S2' THEN 'Select 2 Graduated Interest'*/
/*							WHEN LN65.LC_TYP_SCH_DIS = 'S5' THEN 'Select 5 Graduated Interest'*/
/*							ELSE ' '*/
/*						 END AS SCHEDULE_TYPE*/
						,RS10.LD_RPS_1_PAY_DU
						,LN66.LN_GRD_RPS_SEQ
						,LN66.LN_RPS_TRM
						,LN66.LA_RPS_ISL
					FROM
						PKUB.LN65_LON_RPS LN65
						INNER JOIN PKUB.PD10_PRS_NME PD10
							ON LN65.BF_SSN = PD10.DF_PRS_ID
						INNER JOIN PKUB.RS10_BR_RPD RS10
							ON LN65.BF_SSN = RS10.BF_SSN
							AND LN65.LN_RPS_SEQ = RS10.LN_RPS_SEQ
						INNER JOIN PKUB.LN66_LON_RPS_SPF LN66
							ON LN65.BF_SSN = LN66.BF_SSN
							AND LN65.LN_SEQ = LN66.LN_SEQ
							AND LN65.LN_RPS_SEQ = LN66.LN_RPS_SEQ
						INNER JOIN PKUB.LN10_LON LN10
							ON LN65.BF_SSN = LN10.BF_SSN
							AND LN65.LN_SEQ = LN10.LN_SEQ
						LEFT JOIN PKUB.LN16_LON_DLQ_HST LN16	
							ON LN65.BF_SSN = LN16.BF_SSN
							AND LN65.LN_SEQ = LN16.LN_SEQ
							AND LN16.LC_STA_LON16 = '1'
/*Filtering so only current borrowers will come through that are not in a grace status*/
						LEFT JOIN PKUB.LN80_LON_BIL_CRF LN80
							ON LN65.BF_SSN = LN80.BF_SSN
							AND LN65.LN_SEQ = LN80.LN_SEQ
							AND LN80.LC_STA_LON80 = 'A'
							AND DAYS(LN80.LD_BIL_DU_LON) > DAYS(CURRENT_DATE) - 10
							AND LN80.LC_BIL_TYP_LON != 'I'
						INNER JOIN PKUB.DW01_DW_CLC_CLU DW01	
							ON LN65.BF_SSN = DW01.BF_SSN
							AND LN65.LN_SEQ = DW01.LN_SEQ
					WHERE
						LN65.BF_SSN IN (&SSN_LIST)

					FOR READ ONLY WITH UR
				)
	;
	DISCONNECT FROM DB2;


QUIT;

/*compile entire comment which is saved in pieces in AY20.LX_ATY with each LX_ATY inserted into the comment in the correct order*/
PROC SORT DATA=ACT_HIST;
	BY CMT_NATL_KEY LN_ATY_CMT_SEQ LN_ATY_TXT_SEQ;
RUN;
DATA ACT_HIST (DROP=CMT_NATL_KEY LN_ATY_CMT_SEQ LN_ATY_TXT_SEQ LX_ATY);
	SET ACT_HIST;
	LENGTH CMT_TXT $10000.;
	RETAIN CMT_TXT;
	BY CMT_NATL_KEY;
	IF FIRST.CMT_NATL_KEY THEN CMT_TXT = LX_ATY;
	ELSE CMT_TXT = CATX(' ',CMT_TXT,LX_ATY);
	IF LAST.CMT_NATL_KEY;
RUN;

ENDRSUBMIT;
DATA ACT_HIST; SET LEGEND.ACT_HIST; RUN;
DATA ADRS; SET LEGEND.ADRS; RUN;
DATA EMLS; SET LEGEND.EMLS; RUN;
DATA DFR_FOR; SET LEGEND.DFR_FOR; RUN;
DATA PHNS; SET LEGEND.PHNS; RUN;
DATA DEMO; SET LEGEND.DEMO; RUN;
DATA END_BRW_INFO; SET LEGEND.END_BRW_INFO; RUN;
DATA RPS; SET LEGEND.RPS; RUN;

PROC SORT DATA=DEMO; BY DF_PRS_ID ; RUN;
PROC SORT DATA=ADRS; BY DF_PRS_ID EFFECTIVE_DATE; RUN;
PROC SORT DATA=PHNS; BY DF_PRS_ID EFFECTIVE_DATE; RUN;
PROC SORT DATA=EMLS; BY DF_PRS_ID EFFECTIVE_DATE; RUN;
PROC SORT DATA=DFR_FOR; BY BF_SSN LD_BEG; RUN;
PROC SORT DATA=END_BRW_INFO; BY DF_PRS_ID; RUN;
PROC SORT DATA=RPS; BY BF_SSN LD_LON_1_DSB LD_RPS_1_PAY_DU LN_GRD_RPS_SEQ; RUN;

DATA ALL_DEMO;
	LENGTH OLD_DEMO $200;
	LENGTH NEW_DEMO $200;
	SET ADRS PHNS EMLS;
RUN;

PROC SORT DATA=ALL_DEMO; BY DF_PRS_ID EFFECTIVE_DATE TIME; RUN;

DATA ALL_DEMO;
MERGE DEMO ALL_DEMO;
BY DF_PRS_ID;
RUN;

PROC SORT DATA=ALL_DEMO; BY DF_PRS_ID DESCENDING EFFECTIVE_DATE DESCENDING TIME DESCENDING NEW_SEQ; RUN;

/*create separate lists for borrowers and endorsers*/
PROC SQL;
	CREATE TABLE BRW_DEMO AS
		SELECT
			A.*
		FROM
			ALL_DEMO A
			JOIN INLST I
				ON A.DF_PRS_ID = I.SSN
		WHERE
			I.PRSN_TYP = 'B'
	;

	CREATE TABLE END_DEMO AS
		SELECT
			A.*
		FROM
			ALL_DEMO A
			JOIN INLST I
				ON A.DF_PRS_ID = I.SSN
		WHERE
			I.PRSN_TYP = 'E'
	;
QUIT;

/*add borrower SSN and name to endorser info*/
DATA END_DEMO;
	MERGE END_DEMO END_BRW_INFO;
	BY DF_PRS_ID;
RUN;

PROC SORT DATA=ACT_HIST; BY BF_SSN LD_ATY_RSP LT_ATY_RSP; RUN;

DATA ACT_HIST;
	MERGE DEMO(rename=(df_prs_id=bf_ssn) IN=A) ACT_HIST(rename=(CMT_TXT=LX_ATY) IN=B );
	BY BF_SSN;
	IF A;
RUN;

DATA DFR_FOR;
MERGE DEMO(rename=(df_prs_id=bf_ssn)) DFR_FOR;
BY BF_SSN;

RUN;

PROC SQL;
	CREATE TABLE R5 AS 
	SELECT DISTINCT A.SSN
	FROM INLST A
	LEFT OUTER JOIN DEMO B
		ON A.SSN = B.DF_PRS_ID
	WHERE B.DF_PRS_ID IS NULL
	ORDER BY A.SSN;
QUIT;

PROC FORMAT;
	VALUE $TYPE
		'H' = 'Home'
		'W' = 'Work'
		'A' = 'Alt'
		'M' = 'Mobile'
	;
RUN;
	

DATA _NULL_;
SET BRW_DEMO ;
BY DF_PRS_ID;
RETAIN COUNTER 0;
RTIME = TIMEPART(TIME);
FORMAT EFFECTIVE_DATE MMDDYY10.  RTIME TIME5. TYPE TYPE.;
IF FIRST.DF_PRS_ID THEN COUNTER + 1;
FILE REPORT2 DELIMITER=',' DSD DROPOVER LRECL=32767;
IF _N_ = 1 THEN DO;
	PUT "COUNTER,SSN,BORROWER NAME,DATE,TIME,TYPE,OLD DEMOGRAPHICS,NEW DEMOGRAPHICS,VALIDITY";
END;
PUT COUNTER DF_PRS_ID BOR_NAME EFFECTIVE_DATE RTIME TYPE OLD_DEMO NEW_DEMO VALID;
RUN;

DATA _NULL_;
SET ACT_HIST ;
WHERE UPCASE(PRSN_TYP) ^= 'E';
BY BF_SSN;
RETAIN COUNTER 0;
IF FIRST.BF_SSN THEN COUNTER + 1;
FILE REPORT3 DELIMITER=',' DSD DROPOVER LRECL=32767;
FORMAT LD_ATY_RSP LD_LON_1_DSB MMDDYY10.;
FORMAT LT_ATY_RSP TIME5.;
IF _N_ = 1 THEN DO;
	PUT "COUNTER,BORROWER NAME,SSN,ARC,DATE,TIME,RECIPIENT,DESCRIPTION,COMMENT,USERID";
END;
PUT COUNTER BOR_NAME BF_SSN PF_REQ_ACT LD_ATY_RSP LT_ATY_RSP LF_ATY_RCP ARC_DESCRIPTION LX_ATY LF_PRF_BY;
RUN;

DATA _NULL_;
	SET DFR_FOR ;
	WHERE UPCASE(PRSN_TYP) ^= 'E';
	BY BF_SSN;
	FILE REPORT4 DELIMITER=',' DSD DROPOVER LRECL=32767;
	FORMAT LD_BEG LD_END MMDDYY10.;
	IF _N_ = 1 THEN DO;
		PUT "SSN,BORROWER_NAME,LOAN_PROGRAM,DISBURSEMENT_DATE,DFR/FBR_TYP,BEGIN_DATE,END_DATE";
	END;
	IF LN_SEQ NE .;
	PUT BF_SSN BOR_NAME IC_LON_PGM LD_LON_1_DSB TYP LD_BEG LD_END;
RUN;

DATA _NULL_;
	SET R5 ;
	FILE REPORT5 DELIMITER=',' DSD DROPOVER LRECL=32767;
	IF _N_ = 1 THEN DO;
		PUT "SSN";
	END;
		PUT SSN;
RUN;

DATA _NULL_;
SET END_DEMO  ;
BY DF_PRS_ID;
RETAIN COUNTER 0;
RTIME = TIMEPART(TIME);
FORMAT EFFECTIVE_DATE MMDDYY10.  RTIME TIME5. TYPE TYPE.;
IF FIRST.DF_PRS_ID THEN COUNTER + 1;
FILE REPORT6 DELIMITER=',' DSD DROPOVER LRECL=32767;
IF _N_ = 1 THEN DO;
	PUT "COUNTER,END_ID,END_NAME,DATE,TIME,TYPE,OLD DEMOGRAPHICS,NEW DEMOGRAPHICS,VALIDITY,BRW_SSN,BRW_NAME";
END;
PUT COUNTER DF_PRS_ID BOR_NAME EFFECTIVE_DATE RTIME TYPE OLD_DEMO NEW_DEMO VALID BF_SSN BRW_NAME;
RUN;

DATA _NULL_;
	SET RPS;
	FILE REPORT7 DELIMITER=',' DSD DROPOVER LRECL=32767;
	IF _N_ = 1 THEN DO;
		PUT "SSN,NAME,NEXT_PMT_DUE,LOAN_PROGRAM,DISBURSEMENT_DATE,SCHEDULE_STATUS,SCHEDULE_TYPE,SCHEDULE_FIRST_DUE,GRADATION_SEQ,TERM,PAYMENT";
	END;
		PUT BF_SSN NAME NEXT_PMT_DU IC_LON_PGM LD_LON_1_DSB SCHEDULE_STATUS SCHEDULE_TYPE LD_RPS_1_PAY_DU LN_GRD_RPS_SEQ LN_RPS_TRM LA_RPS_ISL;
RUN;
