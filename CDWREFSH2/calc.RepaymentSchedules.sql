USE CDW
GO

DECLARE @TODAY DATE = GETDATE();

IF OBJECT_ID('tempdb..#RepaymentData', 'U') IS NOT NULL
BEGIN
	DROP TABLE #RepaymentData
END
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SELECT
	ROW_NUMBER() OVER (PARTITION BY LN66.BF_SSN, LN66.LN_SEQ, LN66.LN_RPS_SEQ, LN66.LN_GRD_RPS_SEQ ORDER BY LN66.LN_RPS_SEQ DESC) [REP_SEQ],
	LN66.BF_SSN,
	LN66.LN_SEQ,
	LN66.LN_RPS_SEQ,
	LN66.LN_GRD_RPS_SEQ,
	LN10.IC_LON_PGM,
	LN10.LD_LON_1_DSB,
	CAST(LN10.LA_LON_AMT_GTR AS DECIMAL(18,2)) AS LA_LON_AMT_GTR,
	CAST(LN10.LA_CUR_PRI AS DECIMAL(18,2)) AS LA_CUR_PRI,
	CAST(LN72.LR_ITR AS DECIMAL(5,3)) AS LR_ITR,
	LN65.LC_TYP_SCH_DIS,
	CAST(LN65.LA_TOT_RPD_DIS AS DECIMAL(18,2)) AS LA_TOT_RPD_DIS,
	CAST(LN65.LA_ANT_CAP AS DECIMAL(18,2)) AS LA_ANT_CAP,
	RS10.LD_RPS_1_PAY_DU,
	CAST(ISNULL(LN66.LN_RPS_TRM, 0) AS INT) [LN_RPS_TRM],
	CAST(LN66.LA_RPS_ISL AS DECIMAL(18,2)) AS LA_RPS_ISL,
	ISNULL(DEF.TotalDfrMonthsUsed, 0) [TotalDfrMonthsUsed],
	ISNULL(FRB.TotalFrbMonthsUsed, 0) [TotalFrbMonthsUsed],
	DATEDIFF(MONTH, RS10.LD_RPS_1_PAY_DU, @TODAY) - (ISNULL(FRB.TotalFrbMonthsUsed, 0) + ISNULL(DEF.TotalDfrMonthsUsed, 0)) [GradationMonths],
	CAST(RS10.LD_RPS_1_PAY_DU AS DATE) [TermStartDate],
	CAST(0 AS INT) [TermsToDate]
INTO
	#RepaymentData
FROM
	CDW..PD10_PRS_NME PD10
	INNER JOIN CDW..LN10_LON LN10 
		ON LN10.BF_SSN = PD10.DF_PRS_ID
	INNER JOIN CDW..RS10_BR_RPD RS10 
		ON RS10.BF_SSN = PD10.DF_PRS_ID
		AND RS10.LC_STA_RPST10 = 'A'
	INNER JOIN CDW..LN65_LON_RPS LN65 
		ON LN65.BF_SSN = LN10.BF_SSN
		AND LN65.LN_SEQ = LN10.LN_SEQ
		AND LN65.LN_RPS_SEQ = RS10.LN_RPS_SEQ
		AND LN65.LC_STA_LON65 = 'A'
	INNER JOIN CDW..LN66_LON_RPS_SPF LN66
		ON LN66.BF_SSN = LN65.BF_SSN
		AND LN66.LN_SEQ = LN65.LN_SEQ
		AND LN66.LN_RPS_SEQ = LN65.LN_RPS_SEQ
	LEFT JOIN
	(
		SELECT
			LN72.BF_SSN,
			LN72.LN_SEQ,
			LN72.LR_ITR,
			ROW_NUMBER() OVER (PARTITION BY LN72.BF_SSN, LN72.LN_SEQ ORDER BY LD_STA_LON72 DESC) AS SEQ
		FROM	
			CDW..LN72_INT_RTE_HST LN72
		WHERE
			LN72.LC_STA_LON72 = 'A'
			AND @TODAY BETWEEN LN72.LD_ITR_EFF_BEG AND LN72.LD_ITR_EFF_END
	) LN72 
		ON LN10.BF_SSN = LN72.BF_SSN
		AND LN10.LN_SEQ = LN72.LN_SEQ 
		AND LN72.SEQ = 1
	LEFT JOIN
	( -- Deferment months already used
		SELECT DISTINCT
			LN65.BF_SSN,
			LN65.LN_SEQ,
			LN65.LN_RPS_SEQ,
			RS10.LD_RPS_1_PAY_DU,
			LN50.LD_DFR_BEG,
			LN50.LD_DFR_END,
			DF10.LC_DFR_TYP,
			SUM(CentralData.dbo.PaymentsDue((CASE WHEN LN50.LD_DFR_BEG > RS10.LD_RPS_1_PAY_DU THEN LN50.LD_DFR_BEG ELSE RS10.LD_RPS_1_PAY_DU END), (CASE WHEN LN50.LD_DFR_END < @TODAY THEN LN50.LD_DFR_END ELSE @TODAY END), DAY(RS10.LD_RPS_1_PAY_DU))) OVER (PARTITION BY LN65.BF_SSN, LN65.LN_SEQ, LN65.LN_RPS_SEQ) [TotalDfrMonthsUsed],
			ROW_NUMBER() OVER (PARTITION BY LN65.BF_SSN, LN65.LN_SEQ ORDER BY LN65.LN_RPS_SEQ DESC) [SEQ]
		FROM
			CDW..DF10_BR_DFR_REQ DF10
			INNER JOIN CDW..LN50_BR_DFR_APV LN50 
				ON LN50.BF_SSN = DF10.BF_SSN 
				AND LN50.LF_DFR_CTL_NUM = DF10.LF_DFR_CTL_NUM
			INNER JOIN CDW..LN65_LON_RPS LN65 
				ON LN65.BF_SSN = LN50.BF_SSN 
				AND LN65.LN_SEQ = LN50.LN_SEQ
			INNER JOIN CDW..RS10_BR_RPD RS10 
				ON RS10.BF_SSN = LN65.BF_SSN 
				AND RS10.LN_RPS_SEQ = LN65.LN_RPS_SEQ
				AND	RS10.LC_STA_RPST10 = 'A'
		WHERE
			DF10.LC_DFR_STA = 'A'
			AND DF10.LC_STA_DFR10 = 'A'
			AND LN50.LC_STA_LON50 = 'A'
			AND LN50.LC_DFR_RSP != '003' -- 003 = DEFERMENT REQUEST DENIED
			AND LN50.LD_DFR_BEG <= @TODAY
			AND LN50.LD_DFR_END >= RS10.LD_RPS_1_PAY_DU
	) AS DEF 
		ON DEF.BF_SSN = LN65.BF_SSN
		AND DEF.LN_SEQ = LN65.LN_SEQ
		AND DEF.LN_RPS_SEQ = LN65.LN_RPS_SEQ
	LEFT JOIN
	( -- Forb months already used
		SELECT DISTINCT
			LN65.BF_SSN,
			LN65.LN_SEQ,
			LN65.LN_RPS_SEQ,
			RS10.LD_RPS_1_PAY_DU,
			LN60.LD_FOR_BEG,
			LN60.LD_FOR_END,
			FB10.LC_FOR_TYP,
			SUM(CentralData.dbo.PaymentsDue((CASE WHEN LN60.LD_FOR_BEG > RS10.LD_RPS_1_PAY_DU THEN LN60.LD_FOR_BEG ELSE RS10.LD_RPS_1_PAY_DU END), (CASE WHEN LN60.LD_FOR_END < @TODAY THEN LN60.LD_FOR_END ELSE @TODAY END), DAY(RS10.LD_RPS_1_PAY_DU))) OVER (PARTITION BY LN65.BF_SSN, LN65.LN_SEQ, LN65.LN_RPS_SEQ) [TotalFrbMonthsUsed],
			ROW_NUMBER() OVER (PARTITION BY LN65.BF_SSN, LN65.LN_SEQ ORDER BY LN65.LN_RPS_SEQ DESC) [SEQ]
		FROM
			CDW..FB10_BR_FOR_REQ FB10
			INNER JOIN CDW..LN60_BR_FOR_APV LN60
				ON LN60.BF_SSN = FB10.BF_SSN
				AND LN60.LF_FOR_CTL_NUM = FB10.LF_FOR_CTL_NUM
			INNER JOIN CDW..LN65_LON_RPS LN65 
				ON LN65.BF_SSN = LN60.BF_SSN 
				AND LN65.LN_SEQ = LN60.LN_SEQ
			INNER JOIN CDW..RS10_BR_RPD RS10 
				ON RS10.BF_SSN = LN65.BF_SSN 
				AND RS10.LN_RPS_SEQ = LN65.LN_RPS_SEQ
				AND RS10.LC_STA_RPST10 = 'A'
		WHERE
			FB10.LC_FOR_STA = 'A'
			AND FB10.LC_STA_FOR10 = 'A'
			AND LN60.LC_STA_LON60 = 'A'
			AND LN60.LC_FOR_RSP != '003' --003 = FORBEARANCE REQUEST DENIED
			AND CAST(LN60.LD_FOR_BEG AS DATE) <= @TODAY
			AND CAST(LN60.LD_FOR_END AS DATE) >= RS10.LD_RPS_1_PAY_DU
	) FRB 
		ON FRB.BF_SSN = LN65.BF_SSN
		AND FRB.LN_SEQ = LN65.LN_SEQ
		AND FRB.LN_RPS_SEQ = LN65.LN_RPS_SEQ
WHERE
	LN10.LC_STA_LON10 = 'R'
ORDER BY
	LN10.BF_SSN,
	LN10.LN_SEQ


;WITH SUMS
AS
(
	SELECT
		BF_SSN,
		LN_SEQ, 
		LN_GRD_RPS_SEQ,
		LN_RPS_TRM, 
		TermsToDate = RD.LN_RPS_TRM -- start with first term
	FROM
		#RepaymentData RD
	WHERE
		LN_GRD_RPS_SEQ = 1 -- start with sequence 1
		AND REP_SEQ = 1 -- newest repayment schedule
	
	UNION ALL
	
	SELECT
		RD.BF_SSN,
		RD.LN_SEQ, 
		RD.LN_GRD_RPS_SEQ,
		RD.LN_RPS_TRM, 
		S.TermsToDate + RD.LN_RPS_TRM -- add terms for current record to running total
	FROM
		SUMS S
		INNER JOIN #RepaymentData RD 
			ON RD.LN_GRD_RPS_SEQ = S.LN_GRD_RPS_SEQ + 1 
			AND RD.BF_SSN = S.BF_SSN 
			AND RD.LN_SEQ = S.LN_SEQ 
			AND RD.REP_SEQ = 1 -- newest repayment schedule
)
UPDATE
	RD
SET
	RD.TermsToDate = S.TermsToDate,
	RD.TermStartDate = DATEADD(MONTH, S.TermsToDate - RD.LN_RPS_TRM, RD.TermStartDate)
FROM 
	SUMS S
	INNER JOIN #RepaymentData RD 
		ON RD.LN_GRD_RPS_SEQ = S.LN_GRD_RPS_SEQ 
		AND RD.BF_SSN = S.BF_SSN 
		AND RD.LN_SEQ = S.LN_SEQ 
		AND RD.REP_SEQ = 1

MERGE 
	calc.RepaymentSchedules REPAY
USING
	(
		SELECT
			RD.*,
			CAST
			(
				CASE 
					WHEN (CASE WHEN RD.GradationMonths < 1 THEN 1 ELSE RD.GradationMonths END) BETWEEN (RD.TermsToDate - RD.LN_RPS_TRM + 1) AND RD.TermsToDate THEN 1
					ELSE 0
				END AS BIT
			) AS CurrentGradation
		FROM
			#RepaymentData RD
		WHERE
			RD.REP_SEQ = 1
	) NewData
		ON REPAY.BF_SSN = NewData.BF_SSN 
		AND REPAY.LN_SEQ = NewData.LN_SEQ 
		AND REPAY.LN_RPS_SEQ = NewData.LN_RPS_SEQ 
		AND REPAY.LN_GRD_RPS_SEQ = NewData.LN_GRD_RPS_SEQ 
		AND REPAY.TermStartDate = NewData.TermStartDate
	WHEN MATCHED THEN UPDATE SET
		REPAY.IC_LON_PGM = NewData.IC_LON_PGM,
		REPAY.LD_LON_1_DSB = NewData.LD_LON_1_DSB,
		REPAY.LA_LON_AMT_GTR = NewData.LA_LON_AMT_GTR,
		REPAY.LA_CUR_PRI = NewData.LA_CUR_PRI,
		REPAY.LR_ITR = NewData.LR_ITR,
		REPAY.LC_TYP_SCH_DIS = NewData.LC_TYP_SCH_DIS,
		REPAY.LA_TOT_RPD_DIS = NewData.LA_TOT_RPD_DIS,
		REPAY.LA_ANT_CAP = NewData.LA_ANT_CAP,
		REPAY.LD_RPS_1_PAY_DU = NewData.LD_RPS_1_PAY_DU,
		REPAY.LN_RPS_TRM = NewData.LN_RPS_TRM,
		REPAY.LA_RPS_ISL = NewData.LA_RPS_ISL,
		REPAY.TotalDfrMonthsUsed = NewData.TotalDfrMonthsUsed,
		REPAY.TotalFrbMonthsUsed = NewData.TotalFrbMonthsUsed,
		REPAY.GradationMonths = NewData.GradationMonths,
		REPAY.TermsToDate = NewData.TermsToDate,
		REPAY.CurrentGradation = NewData.CurrentGradation
	WHEN NOT MATCHED THEN
		INSERT 
		(
			BF_SSN,
			LN_SEQ,
			LN_RPS_SEQ,
			LN_GRD_RPS_SEQ,
			IC_LON_PGM,
			LD_LON_1_DSB,
			LA_LON_AMT_GTR,
			LA_CUR_PRI,
			LR_ITR,
			LC_TYP_SCH_DIS,
			LA_TOT_RPD_DIS,
			LA_ANT_CAP,
			LD_RPS_1_PAY_DU,
			LN_RPS_TRM,
			LA_RPS_ISL,
			TotalDfrMonthsUsed,
			TotalFrbMonthsUsed,
			GradationMonths,
			TermStartDate,
			TermsToDate,
			CurrentGradation
		)
		VALUES
		(
			NewData.BF_SSN,
			NewData.LN_SEQ,
			NewData.LN_RPS_SEQ,
			NewData.LN_GRD_RPS_SEQ,
			NewData.IC_LON_PGM,
			NewData.LD_LON_1_DSB,
			NewData.LA_LON_AMT_GTR,
			NewData.LA_CUR_PRI,
			NewData.LR_ITR,
			NewData.LC_TYP_SCH_DIS,
			NewData.LA_TOT_RPD_DIS,
			NewData.LA_ANT_CAP,
			NewData.LD_RPS_1_PAY_DU,
			NewData.LN_RPS_TRM,
			NewData.LA_RPS_ISL,
			NewData.TotalDfrMonthsUsed,
			NewData.TotalFrbMonthsUsed,
			NewData.GradationMonths,
			NewData.TermStartDate,
			NewData.TermsToDate,
			NewData.CurrentGradation
		)
		WHEN NOT MATCHED BY SOURCE THEN
		DELETE
	;
