/*UTLWO83 - Deferment/Forbearance PPC Info*/
LIBNAME DLGSUTWH DB2 DATABASE=DLGSUTWH OWNER=OLWHRM1;
%LET RPTLIB = %SYSGET(reportdir);
%LET DEFER7 = "/sas/whse/progrevw/UTLWO83_Deferments";
%LET FORBEAR7 = "/sas/whse/progrevw/UTLWO83_Forbearances";
/*%LET DEFER7 = "/sas/whse/progrevw/UTLWO83_Deferments_TEST2";*/
/*%LET FORBEAR7 = "/sas/whse/progrevw/UTLWO83_Forbearances_TEST2";*/
/*%LET RPTLIB = T:\SAS;*/
FILENAME REPORTZ "&RPTLIB/ULWO83.LWO83RZ";
FILENAME REPORT2 "&RPTLIB/ULWO83.LWO83R2";
FILENAME REPORT3 "&RPTLIB/ULWO83.LWO83R3";
FILENAME REPORT4 "&RPTLIB/ULWO83.LWO83R4";
FILENAME REPORT5 "&RPTLIB/ULWO83.LWO83R5";

/*Variable declarations*/
DATA _NULL_;
	/*Set &PREVDAY for pass-through SQL, and &PRIOR1 for SAS date comparisons.*/
	IF WEEKDAY(DATE()) = 2 THEN DO;
		/*If today is Monday, the previous day is Friday.*/
		CALL SYMPUT('PREVDAY',"'"||PUT(INTNX('DAY',TODAY(),-3,'BEGINNING'), MMDDYYD10.)||"'");
		CALL SYMPUT('PRIOR1', INTNX('DAY',TODAY(),-3,'BEGINNING'));
	END;
    ELSE DO;
		/*If today isn't Monday, the previous day is yesterday.*/
		CALL SYMPUT('PREVDAY',"'"||PUT(INTNX('DAY',TODAY(),-1,'BEGINNING'), MMDDYYD10.)||"'");
		CALL SYMPUT('PRIOR1', INTNX('DAY',TODAY(),-1,'BEGINNING'));
	END;
	/*&PRIOR7 is the SAS date of one week ago today.*/
	CALL SYMPUT('PRIOR7', INTNX('DAY',TODAY(),-7,'BEGINNING'));
RUN;

/*%SYSLPUT DEFER7 = &DEFER7;*/
/*%SYSLPUT FORBEAR7 = &FORBEAR7;*/
/*%SYSLPUT PREVDAY = &PREVDAY;*/
/*%SYSLPUT PRIOR1 = &PRIOR1;*/
/*%SYSLPUT PRIOR7 = &PRIOR7;*/

/*LIBNAME  WORKLOCL  REMOTE  SERVER=DUSTER  SLIBREF=WORK;*/
/*RSUBMIT;*/

%macro sqlcheck ;
  %if  &sqlxrc ne 0  %then  %do  ;
    data _null_  ;
            file reportz notitles  ;
            put @01 " ********************************************************************* "
              / @01 " ****  The SQL code above has experienced an error.               **** "
              / @01 " ****  The SAS should be reviewed.                                **** "       
              / @01 " ********************************************************************* "
              / @01 " ****  The SQL error code is  &sqlxrc  and the SQL error message  **** "
              / @01 " ****  &sqlxmsg   **** "
              / @01 " ********************************************************************* "
            ;
         run  ;
  %end  ;
%mend  ;

/*Get the deferment data that will serve both R2 and R3.*/
PROC SQL;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
CREATE TABLE DEFERMENT AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT DISTINCT
	PD10.DF_SPE_ACC_ID AS ACCT_NUM
	,PD10.DM_PRS_LST AS LAST_NAME
	,CASE WHEN LN10.LN_LON_ALT_SEQ < 10
		THEN LN10.LF_LON_ALT || '0' || CHAR(LN10.LN_LON_ALT_SEQ)
		ELSE LN10.LF_LON_ALT || CHAR(LN10.LN_LON_ALT_SEQ)
		END AS CLUID
	,NEW.NEW_BEGIN_DATE
	,NEW.NEW_END_DATE
	,OLD.OLD_BEGIN_DATE
	,OLD.OLD_END_DATE
	,OLD.OLD_STATUS_DATE
	,LN50.LD_STA_LON50 AS CHANGE_DATE
	,CASE DF10.LC_DFR_TYP
		WHEN '01' THEN 'NO'
		WHEN '02' THEN 'TD'
		WHEN '03' THEN 'RT'
		WHEN '04' THEN 'AP'
		WHEN '05' THEN 'AC'
		WHEN '06' THEN 'GF'
		WHEN '07' THEN 'PC'
		WHEN '08' THEN 'IR'
		WHEN '09' THEN 'IR'
		WHEN '10' THEN 'TE'
		WHEN '11' THEN 'WM'
		WHEN '12' THEN 'PL'
		WHEN '13' THEN 'UE'
		WHEN '14' THEN 'TS'
		WHEN '15' THEN 'FT'
		WHEN '16' THEN 'HT'
		WHEN '17' THEN 'AP'
		WHEN '18' THEN 'HT'
		WHEN '19' THEN 'PP'
		WHEN '20' THEN 'PP'
		WHEN '21' THEN 'PP'
		WHEN '22' THEN 'PP'
		WHEN '29' THEN 'EH'
		WHEN '32' THEN 'IR'
		WHEN '33' THEN 'HT'
		WHEN '34' THEN 'PC'
		WHEN '38' THEN 'MO'
	END AS DEFERMENT_TYPE
	,AY01.PF_ACT AS ACTION_CODE
	,AY01.BF_CRT_DTS_AY01 AS ACTION_CODE_DATE
FROM	OLWHRM1.PD10_PRS_NME PD10
INNER JOIN OLWHRM1.LN10_LON LN10
	ON PD10.DF_PRS_ID = LN10.BF_SSN
INNER JOIN OLWHRM1.LN50_BR_DFR_APV LN50
	ON LN10.BF_SSN = LN50.BF_SSN
	AND LN10.LN_SEQ = LN50.LN_SEQ
INNER JOIN OLWHRM1.DF10_BR_DFR_REQ DF10
	ON LN50.BF_SSN = DF10.BF_SSN
	AND LN50.LF_DFR_CTL_NUM = DF10.LF_DFR_CTL_NUM
INNER JOIN
(
	SELECT
		BF_SSN
		,LN_SEQ
		,LD_DFR_BEG AS NEW_BEGIN_DATE
		,LD_DFR_END AS NEW_END_DATE
		,LF_DFR_CTL_NUM
		,LN_DFR_OCC_SEQ
	FROM	OLWHRM1.LN50_BR_DFR_APV
	WHERE LC_STA_LON50 = 'A'
) NEW
	ON NEW.BF_SSN = LN50.BF_SSN
	AND NEW.LN_SEQ = LN50.LN_SEQ
	AND NEW.LF_DFR_CTL_NUM = LN50.LF_DFR_CTL_NUM
INNER JOIN
(
	SELECT
		BF_SSN
		,LN_SEQ
		,LD_DFR_BEG AS OLD_BEGIN_DATE
		,LD_DFR_END AS OLD_END_DATE
		,LD_STA_LON50 AS OLD_STATUS_DATE
		,LF_DFR_CTL_NUM
		,LN_DFR_OCC_SEQ
	FROM	OLWHRM1.LN50_BR_DFR_APV
) OLD
	ON OLD.BF_SSN = LN50.BF_SSN
	AND OLD.LN_SEQ = LN50.LN_SEQ
	AND OLD.LF_DFR_CTL_NUM = LN50.LF_DFR_CTL_NUM
	AND OLD.LN_DFR_OCC_SEQ = NEW.LN_DFR_OCC_SEQ - 1
LEFT OUTER JOIN OLWHRM1.AY01_BR_ATY AY01
	ON LN50.BF_SSN = AY01.DF_PRS_ID
WHERE DAYS(LN50.LD_STA_LON50) BETWEEN DAYS(CURRENT DATE) - 7 AND DAYS(&PREVDAY)
	AND NEW.NEW_BEGIN_DATE < OLD.OLD_BEGIN_DATE
	AND NEW.NEW_END_DATE < OLD.OLD_BEGIN_DATE
	AND LN10.LC_STA_LON10 = 'R'
FOR READ ONLY WITH UR
);

CREATE TABLE FORBEARANCE AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT DISTINCT
	PD10.DF_SPE_ACC_ID AS ACCT_NUM
	,PD10.DM_PRS_LST AS LAST_NAME
	,LN10.LF_LON_ALT || CAST(LN10.LN_LON_ALT_SEQ AS CHAR) AS CLUID
	,LN10.LD_LON_GTR AS GUARANTY_DATE
	,NEW.NEW_BEGIN_DATE
	,NEW.NEW_END_DATE
	,OLD.OLD_BEGIN_DATE
	,OLD.OLD_END_DATE
	,OLD.OLD_STATUS_DATE
	,LN60.LD_STA_LON60 AS CHANGE_DATE
	,AY01.PF_ACT AS ACTION_CODE
	,AY01.BF_CRT_DTS_AY01 AS ACTION_CODE_DATE
FROM	OLWHRM1.PD10_PRS_NME PD10
INNER JOIN OLWHRM1.LN10_LON LN10
	ON PD10.DF_PRS_ID = LN10.BF_SSN
INNER JOIN OLWHRM1.LN60_BR_FOR_APV LN60
	ON LN10.BF_SSN = LN60.BF_SSN
	AND LN10.LN_SEQ = LN60.LN_SEQ
INNER JOIN
(
	SELECT
		BF_SSN
		,LN_SEQ
		,LD_FOR_BEG AS NEW_BEGIN_DATE
		,LD_FOR_END AS NEW_END_DATE
		,LF_FOR_CTL_NUM
		,LN_FOR_OCC_SEQ
	FROM	OLWHRM1.LN60_BR_FOR_APV
	WHERE LC_STA_LON60 = 'A'
) NEW
	ON NEW.BF_SSN = LN60.BF_SSN
	AND NEW.LN_SEQ = LN60.LN_SEQ
	AND NEW.LF_FOR_CTL_NUM = LN60.LF_FOR_CTL_NUM
INNER JOIN
(
	SELECT
		BF_SSN
		,LN_SEQ
		,LD_FOR_BEG AS OLD_BEGIN_DATE
		,LD_FOR_END AS OLD_END_DATE
		,LD_STA_LON60 AS OLD_STATUS_DATE
		,LF_FOR_CTL_NUM
		,LN_FOR_OCC_SEQ
	FROM	OLWHRM1.LN60_BR_FOR_APV
) OLD
	ON OLD.BF_SSN = LN60.BF_SSN
	AND OLD.LN_SEQ = LN60.LN_SEQ
	AND OLD.LF_FOR_CTL_NUM = LN60.LF_FOR_CTL_NUM
	AND OLD.LN_FOR_OCC_SEQ = NEW.LN_FOR_OCC_SEQ - 1
LEFT OUTER JOIN OLWHRM1.AY01_BR_ATY AY01
	ON LN60.BF_SSN = AY01.DF_PRS_ID
WHERE DAYS(LN60.LD_STA_LON60) BETWEEN DAYS(CURRENT DATE) - 7 AND DAYS(&PREVDAY)
	AND LN10.LC_STA_LON10 = 'R'
FOR READ ONLY WITH UR
);
DISCONNECT FROM DB2;

PROC SQL;
/*Separate out the R2 and R3 data from the DEFERMENT data set.*/
CREATE TABLE R2 AS
SELECT DISTINCT
	ACCT_NUM
	,CLUID
	,NEW_BEGIN_DATE
	,NEW_END_DATE
	,OLD_BEGIN_DATE
	,OLD_END_DATE
	,OLD_STATUS_DATE
	,CHANGE_DATE
	,DEFERMENT_TYPE
FROM DEFERMENT
WHERE CHANGE_DATE = &PRIOR1
;
CREATE TABLE R3 AS
SELECT DISTINCT
	ACCT_NUM
	,LAST_NAME
	,CLUID
	,CHANGE_DATE
FROM DEFERMENT
WHERE NOT EXISTS (
	SELECT *
	FROM DEFERMENT
	WHERE ACTION_CODE = 'DFPPC'
	AND ACTION_CODE_DATE BETWEEN CHANGE_DATE AND CHANGE_DATE + 5
	)
;

/*Separate out the R4 and R5 data from the FORBEARANCE data set.*/
CREATE TABLE R4 AS
SELECT DISTINCT
	ACCT_NUM
	,CLUID
	,GUARANTY_DATE
	,NEW_BEGIN_DATE
	,NEW_END_DATE
	,OLD_BEGIN_DATE
	,OLD_END_DATE
	,OLD_STATUS_DATE
	,CHANGE_DATE
FROM FORBEARANCE
WHERE CHANGE_DATE = &PRIOR1
;
CREATE TABLE R5 AS
SELECT DISTINCT
	ACCT_NUM
	,LAST_NAME
	,CLUID
	,CHANGE_DATE
FROM DEFERMENT
WHERE NOT EXISTS (
	SELECT *
	FROM FORBEARANCE
	WHERE ACTION_CODE = 'DFPPC'
	AND ACTION_CODE_DATE BETWEEN CHANGE_DATE AND CHANGE_DATE + 5
	)
;
QUIT;

/*Exclude records from R2 and R4 where the old status date and the change date fall between*/
/*the same NSLDS reporting dates, which are the first and third Saturday of each month.*/
%MACRO STRADDLEDAY(RX);
	DATA &RX; SET &RX;
	/*Get the first Saturday of the month of the change date.*/
	FIRST_SATURDAY = INTNX('MONTH', CHANGE_DATE, 0, 'BEGINNING');
	DO WHILE (WEEKDAY(FIRST_SATURDAY) ^= 7);
		FIRST_SATURDAY = FIRST_SATURDAY + 1;
	END;
	/*The third Saturday is 14 days after the first Saturday.*/
	THIRD_SATURDAY = INTNX('DAY', FIRST_SATURDAY, 14, 'BEGINNING');
	/*Use the same logic for this month's first Saturday to get last month's first Saturday.*/
	/*This is needed when the job is running before the first Saturday of this month.*/
	PREVIOUS_SATURDAY = INTNX('MONTH', CHANGE_DATE, -1, 'MIDDLE');
	DO WHILE (WEEKDAY(PREVIOUS_SATURDAY) ^= 7);
		PREVIOUS_SATURDAY = PREVIOUS_SATURDAY + 1;
	END;
	/*Now that we have the relevant NSLDS reporting dates, delete records that match the above criteria.*/
	IF (OLD_STATUS_DATE > PREVIOUS_SATURDAY AND OLD_STATUS_DATE < FIRST_SATURDAY
		AND CHANGE_DATE > PREVIOUS_SATURDAY AND CHANGE_DATE < FIRST_SATURDAY)
	OR (OLD_STATUS_DATE > FIRST_SATURDAY AND OLD_STATUS_DATE < THIRD_SATURDAY
		AND CHANGE_DATE > FIRST_SATURDAY AND CHANGE_DATE < THIRD_SATURDAY)
	OR (OLD_STATUS_DATE > THIRD_SATURDAY AND CHANGE_DATE > THIRD_SATURDAY)
	THEN DELETE;
%MEND;
%STRADDLEDAY(R2);
%STRADDLEDAY(R4);

/*Append the R2 results to the 7-day data file and remove records whose change date is more than 7 days old.*/
DATA &DEFER7;
/*Switch these lines for production.*/
/*SET R2;*/
SET &DEFER7 R2;
RUN;
PROC SQL;
DELETE FROM &DEFER7
WHERE CHANGE_DATE < &PRIOR7
;
QUIT;
/**/
/*Append the R4 results to the 7-day data file and remove records whose change date is more than 7 days old.*/
DATA &FORBEAR7;
/*Switch these lines for production.*/
/*SET R4;*/
SET &FORBEAR7 R4;
RUN;
PROC SQL;
DELETE FROM &FORBEAR7
WHERE CHANGE_DATE < &PRIOR7
;
QUIT;

%put  sqlxrc= >>> &sqlxrc <<< ||| sqlxmsg= >>> &sqlxmsg >>> ;  ** includes error messages to SAS log  ;
%sqlcheck;
quit;
;
/*ENDRSUBMIT;*/

/*DATA R2;*/
/*SET WORKLOCL.R2;*/
/*RUN;*/
PROC SORT DATA=R2;
BY ACCT_NUM CLUID;
RUN;

/*DATA R3;*/
/*SET WORKLOCL.R3;*/
/*RUN;*/
PROC SORT DATA=R3;
BY ACCT_NUM CLUID;
RUN;

/*DATA R4;*/
/*SET WORKLOCL.R4;*/
/*RUN;*/
PROC SORT DATA=R4;
BY ACCT_NUM CLUID;
RUN;

/*DATA R5;*/
/*SET WORKLOCL.R5;*/
/*RUN;*/
PROC SORT DATA=R5;
BY ACCT_NUM CLUID;
RUN;

DATA _NULL_;
SET  WORK.R2;
FILE REPORT2 DELIMITER=',' DSD DROPOVER LRECL=32767;
   FORMAT ACCT_NUM $10. ;
   FORMAT CLUID $19. ;
   FORMAT OLD_BEGIN_DATE MMDDYY10. ;
   FORMAT NEW_BEGIN_DATE MMDDYY10. ;
   FORMAT OLD_END_DATE MMDDYY10. ;
   FORMAT NEW_END_DATE MMDDYY10. ;
   FORMAT CHANGE_DATE MMDDYY10. ;
   FORMAT DEFERMENT_TYPE $2. ;
DO;
   PUT ACCT_NUM $ @;
   PUT CLUID $ @;
   PUT OLD_BEGIN_DATE $ @;
   PUT NEW_BEGIN_DATE $ @;
   PUT OLD_END_DATE $ @;
   PUT NEW_END_DATE $ @;
   PUT CHANGE_DATE $ @;
   PUT DEFERMENT_TYPE $;
   ;
END;
RUN;
DATA _NULL_;
SET R3 ;
LENGTH DESCRIPTION $600.;
USER = '';
ACT_DT = CHANGE_DATE;
DESCRIPTION = CATX(',',
	ACCT_NUM,
	LAST_NAME,
	CLUID
);
FILE REPORT3 DELIMITER=',' DSD DROPOVER LRECL=32767;
FORMAT USER $10. ;
FORMAT ACT_DT MMDDYY10. ;
FORMAT DESCRIPTION $600. ;
IF _N_ = 1 THEN DO;
	PUT "USER,ACT_DT,DESCRIPTION";
END;
DO;
   PUT USER $ @;
   PUT ACT_DT @;
   PUT DESCRIPTION $ ;
END;
RUN;

PROC PRINTTO PRINT=REPORT4 NEW;
RUN;
OPTIONS CENTER PAGENO=1 ORIENTATION=PORTRAIT ;
OPTIONS LS=96 PS=52;
TITLE	'Forbearance Date Changes';
PROC CONTENTS DATA=R4 OUT=EMPTYSET NOPRINT;
DATA _NULL_;
SET EMPTYSET;
FILE PRINT;
IF  NOBS=0 AND _N_ =1 THEN DO;
	PUT // 95*'-';
	PUT      //////
		@35 '**** NO OBSERVATIONS FOUND ****';
	PUT ////////
		@41 '-- END OF REPORT --';
	PUT /////////////
		@32 "JOB = UTLWO83     REPORT = ULWO83.LWO83R4";
	END;
RETURN;
RUN;
PROC PRINT NOOBS SPLIT='/' DATA=R4 WIDTH=UNIFORM WIDTH=MIN;
VAR ACCT_NUM
	CLUID
	GUARANTY_DATE
	OLD_BEGIN_DATE
	NEW_BEGIN_DATE
	OLD_END_DATE
	NEW_END_DATE
	CHANGE_DATE;
FOOTNOTE1  	"This document may contain borrowers' sensitive information that UHEAA has pledged to protect.";
FOOTNOTE2	"Please take appropriate precautions to safeguard this information.";
FOOTNOTE3	;
FOOTNOTE4 	'JOB = UTLWO83     REPORT = ULWO83.LWO83R4';
RUN;
PROC PRINTTO;
RUN;
DATA _NULL_;
SET R5 ;
LENGTH DESCRIPTION $600.;
USER = '';
ACT_DT = CHANGE_DATE;
DESCRIPTION = CATX(',',
	ACCT_NUM,
	LAST_NAME,
	CLUID 
);
FILE REPORT5 DELIMITER=',' DSD DROPOVER LRECL=32767;
FORMAT USER $10. ;
FORMAT ACT_DT MMDDYY10. ;
FORMAT DESCRIPTION $600. ;
IF _N_ = 1 THEN DO;
	PUT "USER,ACT_DT,DESCRIPTION";
END;
DO;
   PUT USER $ @;
   PUT ACT_DT @;
   PUT DESCRIPTION $ ;
END;
RUN;
