'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class TstDSUESPPayments
    Inherits DataSet
    
    Private tableUESPPayments As UESPPaymentsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UESPPayments")) Is Nothing) Then
                Me.Tables.Add(New UESPPaymentsDataTable(ds.Tables("UESPPayments")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UESPPayments As UESPPaymentsDataTable
        Get
            Return Me.tableUESPPayments
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As TstDSUESPPayments = CType(MyBase.Clone,TstDSUESPPayments)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("UESPPayments")) Is Nothing) Then
            Me.Tables.Add(New UESPPaymentsDataTable(ds.Tables("UESPPayments")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableUESPPayments = CType(Me.Tables("UESPPayments"),UESPPaymentsDataTable)
        If (Not (Me.tableUESPPayments) Is Nothing) Then
            Me.tableUESPPayments.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "TstDSUESPPayments"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/TstDSUESPPayments.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableUESPPayments = New UESPPaymentsDataTable
        Me.Tables.Add(Me.tableUESPPayments)
    End Sub
    
    Private Function ShouldSerializeUESPPayments() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub UESPPaymentsRowChangeEventHandler(ByVal sender As Object, ByVal e As UESPPaymentsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UESPPaymentsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNotes As DataColumn
        
        Private columnReceiptNumber As DataColumn
        
        Private columnParticipantName As DataColumn
        
        Private columnReceivedBy As DataColumn
        
        Private columnPaymentDate As DataColumn
        
        Private columnPaymentAmount As DataColumn
        
        Private columnPaymentType As DataColumn
        
        Private columnCheckNumber As DataColumn
        
        Private columnBenefName1 As DataColumn
        
        Private columnBenefAcctNum1 As DataColumn
        
        Private columnBenefAmt1 As DataColumn
        
        Private columnBenefName2 As DataColumn
        
        Private columnBenefAcctNum2 As DataColumn
        
        Private columnBenefAmt2 As DataColumn
        
        Private columnBenefName3 As DataColumn
        
        Private columnBenefAcctNum3 As DataColumn
        
        Private columnBenefAmt3 As DataColumn
        
        Private columnBenefName4 As DataColumn
        
        Private columnBenefAcctNum4 As DataColumn
        
        Private columnBenefAmt4 As DataColumn
        
        Private columnBenefName5 As DataColumn
        
        Private columnBenefAcctNum5 As DataColumn
        
        Private columnBenefAmt5 As DataColumn
        
        Private columnBenefName6 As DataColumn
        
        Private columnBenefAcctNum6 As DataColumn
        
        Private columnBenefAmt6 As DataColumn
        
        Private columnBenefName7 As DataColumn
        
        Private columnBenefAcctNum7 As DataColumn
        
        Private columnBenefAmt7 As DataColumn
        
        Private columnBenefName8 As DataColumn
        
        Private columnBenefAcctNum8 As DataColumn
        
        Private columnBenefAmt8 As DataColumn
        
        Private columnBenefName9 As DataColumn
        
        Private columnBenefAcctNum9 As DataColumn
        
        Private columnBenefAmt9 As DataColumn
        
        Private columnBenefName10 As DataColumn
        
        Private columnBenefAcctNum10 As DataColumn
        
        Private columnBenefAmt10 As DataColumn
        
        Private columnVoided As DataColumn
        
        Friend Sub New()
            MyBase.New("UESPPayments")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NotesColumn As DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptNumberColumn As DataColumn
            Get
                Return Me.columnReceiptNumber
            End Get
        End Property
        
        Friend ReadOnly Property ParticipantNameColumn As DataColumn
            Get
                Return Me.columnParticipantName
            End Get
        End Property
        
        Friend ReadOnly Property ReceivedByColumn As DataColumn
            Get
                Return Me.columnReceivedBy
            End Get
        End Property
        
        Friend ReadOnly Property PaymentDateColumn As DataColumn
            Get
                Return Me.columnPaymentDate
            End Get
        End Property
        
        Friend ReadOnly Property PaymentAmountColumn As DataColumn
            Get
                Return Me.columnPaymentAmount
            End Get
        End Property
        
        Friend ReadOnly Property PaymentTypeColumn As DataColumn
            Get
                Return Me.columnPaymentType
            End Get
        End Property
        
        Friend ReadOnly Property CheckNumberColumn As DataColumn
            Get
                Return Me.columnCheckNumber
            End Get
        End Property
        
        Friend ReadOnly Property BenefName1Column As DataColumn
            Get
                Return Me.columnBenefName1
            End Get
        End Property
        
        Friend ReadOnly Property BenefAcctNum1Column As DataColumn
            Get
                Return Me.columnBenefAcctNum1
            End Get
        End Property
        
        Friend ReadOnly Property BenefAmt1Column As DataColumn
            Get
                Return Me.columnBenefAmt1
            End Get
        End Property
        
        Friend ReadOnly Property BenefName2Column As DataColumn
            Get
                Return Me.columnBenefName2
            End Get
        End Property
        
        Friend ReadOnly Property BenefAcctNum2Column As DataColumn
            Get
                Return Me.columnBenefAcctNum2
            End Get
        End Property
        
        Friend ReadOnly Property BenefAmt2Column As DataColumn
            Get
                Return Me.columnBenefAmt2
            End Get
        End Property
        
        Friend ReadOnly Property BenefName3Column As DataColumn
            Get
                Return Me.columnBenefName3
            End Get
        End Property
        
        Friend ReadOnly Property BenefAcctNum3Column As DataColumn
            Get
                Return Me.columnBenefAcctNum3
            End Get
        End Property
        
        Friend ReadOnly Property BenefAmt3Column As DataColumn
            Get
                Return Me.columnBenefAmt3
            End Get
        End Property
        
        Friend ReadOnly Property BenefName4Column As DataColumn
            Get
                Return Me.columnBenefName4
            End Get
        End Property
        
        Friend ReadOnly Property BenefAcctNum4Column As DataColumn
            Get
                Return Me.columnBenefAcctNum4
            End Get
        End Property
        
        Friend ReadOnly Property BenefAmt4Column As DataColumn
            Get
                Return Me.columnBenefAmt4
            End Get
        End Property
        
        Friend ReadOnly Property BenefName5Column As DataColumn
            Get
                Return Me.columnBenefName5
            End Get
        End Property
        
        Friend ReadOnly Property BenefAcctNum5Column As DataColumn
            Get
                Return Me.columnBenefAcctNum5
            End Get
        End Property
        
        Friend ReadOnly Property BenefAmt5Column As DataColumn
            Get
                Return Me.columnBenefAmt5
            End Get
        End Property
        
        Friend ReadOnly Property BenefName6Column As DataColumn
            Get
                Return Me.columnBenefName6
            End Get
        End Property
        
        Friend ReadOnly Property BenefAcctNum6Column As DataColumn
            Get
                Return Me.columnBenefAcctNum6
            End Get
        End Property
        
        Friend ReadOnly Property BenefAmt6Column As DataColumn
            Get
                Return Me.columnBenefAmt6
            End Get
        End Property
        
        Friend ReadOnly Property BenefName7Column As DataColumn
            Get
                Return Me.columnBenefName7
            End Get
        End Property
        
        Friend ReadOnly Property BenefAcctNum7Column As DataColumn
            Get
                Return Me.columnBenefAcctNum7
            End Get
        End Property
        
        Friend ReadOnly Property BenefAmt7Column As DataColumn
            Get
                Return Me.columnBenefAmt7
            End Get
        End Property
        
        Friend ReadOnly Property BenefName8Column As DataColumn
            Get
                Return Me.columnBenefName8
            End Get
        End Property
        
        Friend ReadOnly Property BenefAcctNum8Column As DataColumn
            Get
                Return Me.columnBenefAcctNum8
            End Get
        End Property
        
        Friend ReadOnly Property BenefAmt8Column As DataColumn
            Get
                Return Me.columnBenefAmt8
            End Get
        End Property
        
        Friend ReadOnly Property BenefName9Column As DataColumn
            Get
                Return Me.columnBenefName9
            End Get
        End Property
        
        Friend ReadOnly Property BenefAcctNum9Column As DataColumn
            Get
                Return Me.columnBenefAcctNum9
            End Get
        End Property
        
        Friend ReadOnly Property BenefAmt9Column As DataColumn
            Get
                Return Me.columnBenefAmt9
            End Get
        End Property
        
        Friend ReadOnly Property BenefName10Column As DataColumn
            Get
                Return Me.columnBenefName10
            End Get
        End Property
        
        Friend ReadOnly Property BenefAcctNum10Column As DataColumn
            Get
                Return Me.columnBenefAcctNum10
            End Get
        End Property
        
        Friend ReadOnly Property BenefAmt10Column As DataColumn
            Get
                Return Me.columnBenefAmt10
            End Get
        End Property
        
        Friend ReadOnly Property VoidedColumn As DataColumn
            Get
                Return Me.columnVoided
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UESPPaymentsRow
            Get
                Return CType(Me.Rows(index),UESPPaymentsRow)
            End Get
        End Property
        
        Public Event UESPPaymentsRowChanged As UESPPaymentsRowChangeEventHandler
        
        Public Event UESPPaymentsRowChanging As UESPPaymentsRowChangeEventHandler
        
        Public Event UESPPaymentsRowDeleted As UESPPaymentsRowChangeEventHandler
        
        Public Event UESPPaymentsRowDeleting As UESPPaymentsRowChangeEventHandler
        
        Public Overloads Sub AddUESPPaymentsRow(ByVal row As UESPPaymentsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUESPPaymentsRow( _
                    ByVal Notes As String,  _
                    ByVal ParticipantName As String,  _
                    ByVal ReceivedBy As String,  _
                    ByVal PaymentDate As Date,  _
                    ByVal PaymentAmount As Decimal,  _
                    ByVal PaymentType As String,  _
                    ByVal CheckNumber As String,  _
                    ByVal BenefName1 As String,  _
                    ByVal BenefAcctNum1 As String,  _
                    ByVal BenefAmt1 As Decimal,  _
                    ByVal BenefName2 As String,  _
                    ByVal BenefAcctNum2 As String,  _
                    ByVal BenefAmt2 As Decimal,  _
                    ByVal BenefName3 As String,  _
                    ByVal BenefAcctNum3 As String,  _
                    ByVal BenefAmt3 As Decimal,  _
                    ByVal BenefName4 As String,  _
                    ByVal BenefAcctNum4 As String,  _
                    ByVal BenefAmt4 As Decimal,  _
                    ByVal BenefName5 As String,  _
                    ByVal BenefAcctNum5 As String,  _
                    ByVal BenefAmt5 As Decimal,  _
                    ByVal BenefName6 As String,  _
                    ByVal BenefAcctNum6 As String,  _
                    ByVal BenefAmt6 As Decimal,  _
                    ByVal BenefName7 As String,  _
                    ByVal BenefAcctNum7 As String,  _
                    ByVal BenefAmt7 As Decimal,  _
                    ByVal BenefName8 As String,  _
                    ByVal BenefAcctNum8 As String,  _
                    ByVal BenefAmt8 As Decimal,  _
                    ByVal BenefName9 As String,  _
                    ByVal BenefAcctNum9 As String,  _
                    ByVal BenefAmt9 As Decimal,  _
                    ByVal BenefName10 As String,  _
                    ByVal BenefAcctNum10 As String,  _
                    ByVal BenefAmt10 As Decimal,  _
                    ByVal Voided As String) As UESPPaymentsRow
            Dim rowUESPPaymentsRow As UESPPaymentsRow = CType(Me.NewRow,UESPPaymentsRow)
            rowUESPPaymentsRow.ItemArray = New Object() {Notes, Nothing, ParticipantName, ReceivedBy, PaymentDate, PaymentAmount, PaymentType, CheckNumber, BenefName1, BenefAcctNum1, BenefAmt1, BenefName2, BenefAcctNum2, BenefAmt2, BenefName3, BenefAcctNum3, BenefAmt3, BenefName4, BenefAcctNum4, BenefAmt4, BenefName5, BenefAcctNum5, BenefAmt5, BenefName6, BenefAcctNum6, BenefAmt6, BenefName7, BenefAcctNum7, BenefAmt7, BenefName8, BenefAcctNum8, BenefAmt8, BenefName9, BenefAcctNum9, BenefAmt9, BenefName10, BenefAcctNum10, BenefAmt10, Voided}
            Me.Rows.Add(rowUESPPaymentsRow)
            Return rowUESPPaymentsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UESPPaymentsDataTable = CType(MyBase.Clone,UESPPaymentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UESPPaymentsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNotes = Me.Columns("Notes")
            Me.columnReceiptNumber = Me.Columns("ReceiptNumber")
            Me.columnParticipantName = Me.Columns("ParticipantName")
            Me.columnReceivedBy = Me.Columns("ReceivedBy")
            Me.columnPaymentDate = Me.Columns("PaymentDate")
            Me.columnPaymentAmount = Me.Columns("PaymentAmount")
            Me.columnPaymentType = Me.Columns("PaymentType")
            Me.columnCheckNumber = Me.Columns("CheckNumber")
            Me.columnBenefName1 = Me.Columns("BenefName1")
            Me.columnBenefAcctNum1 = Me.Columns("BenefAcctNum1")
            Me.columnBenefAmt1 = Me.Columns("BenefAmt1")
            Me.columnBenefName2 = Me.Columns("BenefName2")
            Me.columnBenefAcctNum2 = Me.Columns("BenefAcctNum2")
            Me.columnBenefAmt2 = Me.Columns("BenefAmt2")
            Me.columnBenefName3 = Me.Columns("BenefName3")
            Me.columnBenefAcctNum3 = Me.Columns("BenefAcctNum3")
            Me.columnBenefAmt3 = Me.Columns("BenefAmt3")
            Me.columnBenefName4 = Me.Columns("BenefName4")
            Me.columnBenefAcctNum4 = Me.Columns("BenefAcctNum4")
            Me.columnBenefAmt4 = Me.Columns("BenefAmt4")
            Me.columnBenefName5 = Me.Columns("BenefName5")
            Me.columnBenefAcctNum5 = Me.Columns("BenefAcctNum5")
            Me.columnBenefAmt5 = Me.Columns("BenefAmt5")
            Me.columnBenefName6 = Me.Columns("BenefName6")
            Me.columnBenefAcctNum6 = Me.Columns("BenefAcctNum6")
            Me.columnBenefAmt6 = Me.Columns("BenefAmt6")
            Me.columnBenefName7 = Me.Columns("BenefName7")
            Me.columnBenefAcctNum7 = Me.Columns("BenefAcctNum7")
            Me.columnBenefAmt7 = Me.Columns("BenefAmt7")
            Me.columnBenefName8 = Me.Columns("BenefName8")
            Me.columnBenefAcctNum8 = Me.Columns("BenefAcctNum8")
            Me.columnBenefAmt8 = Me.Columns("BenefAmt8")
            Me.columnBenefName9 = Me.Columns("BenefName9")
            Me.columnBenefAcctNum9 = Me.Columns("BenefAcctNum9")
            Me.columnBenefAmt9 = Me.Columns("BenefAmt9")
            Me.columnBenefName10 = Me.Columns("BenefName10")
            Me.columnBenefAcctNum10 = Me.Columns("BenefAcctNum10")
            Me.columnBenefAmt10 = Me.Columns("BenefAmt10")
            Me.columnVoided = Me.Columns("Voided")
        End Sub
        
        Private Sub InitClass()
            Me.columnNotes = New DataColumn("Notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes)
            Me.columnReceiptNumber = New DataColumn("ReceiptNumber", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptNumber)
            Me.columnParticipantName = New DataColumn("ParticipantName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnParticipantName)
            Me.columnReceivedBy = New DataColumn("ReceivedBy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceivedBy)
            Me.columnPaymentDate = New DataColumn("PaymentDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentDate)
            Me.columnPaymentAmount = New DataColumn("PaymentAmount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentAmount)
            Me.columnPaymentType = New DataColumn("PaymentType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentType)
            Me.columnCheckNumber = New DataColumn("CheckNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckNumber)
            Me.columnBenefName1 = New DataColumn("BenefName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefName1)
            Me.columnBenefAcctNum1 = New DataColumn("BenefAcctNum1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAcctNum1)
            Me.columnBenefAmt1 = New DataColumn("BenefAmt1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAmt1)
            Me.columnBenefName2 = New DataColumn("BenefName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefName2)
            Me.columnBenefAcctNum2 = New DataColumn("BenefAcctNum2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAcctNum2)
            Me.columnBenefAmt2 = New DataColumn("BenefAmt2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAmt2)
            Me.columnBenefName3 = New DataColumn("BenefName3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefName3)
            Me.columnBenefAcctNum3 = New DataColumn("BenefAcctNum3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAcctNum3)
            Me.columnBenefAmt3 = New DataColumn("BenefAmt3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAmt3)
            Me.columnBenefName4 = New DataColumn("BenefName4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefName4)
            Me.columnBenefAcctNum4 = New DataColumn("BenefAcctNum4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAcctNum4)
            Me.columnBenefAmt4 = New DataColumn("BenefAmt4", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAmt4)
            Me.columnBenefName5 = New DataColumn("BenefName5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefName5)
            Me.columnBenefAcctNum5 = New DataColumn("BenefAcctNum5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAcctNum5)
            Me.columnBenefAmt5 = New DataColumn("BenefAmt5", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAmt5)
            Me.columnBenefName6 = New DataColumn("BenefName6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefName6)
            Me.columnBenefAcctNum6 = New DataColumn("BenefAcctNum6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAcctNum6)
            Me.columnBenefAmt6 = New DataColumn("BenefAmt6", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAmt6)
            Me.columnBenefName7 = New DataColumn("BenefName7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefName7)
            Me.columnBenefAcctNum7 = New DataColumn("BenefAcctNum7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAcctNum7)
            Me.columnBenefAmt7 = New DataColumn("BenefAmt7", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAmt7)
            Me.columnBenefName8 = New DataColumn("BenefName8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefName8)
            Me.columnBenefAcctNum8 = New DataColumn("BenefAcctNum8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAcctNum8)
            Me.columnBenefAmt8 = New DataColumn("BenefAmt8", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAmt8)
            Me.columnBenefName9 = New DataColumn("BenefName9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefName9)
            Me.columnBenefAcctNum9 = New DataColumn("BenefAcctNum9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAcctNum9)
            Me.columnBenefAmt9 = New DataColumn("BenefAmt9", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAmt9)
            Me.columnBenefName10 = New DataColumn("BenefName10", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefName10)
            Me.columnBenefAcctNum10 = New DataColumn("BenefAcctNum10", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAcctNum10)
            Me.columnBenefAmt10 = New DataColumn("BenefAmt10", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBenefAmt10)
            Me.columnVoided = New DataColumn("Voided", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVoided)
            Me.columnReceiptNumber.AutoIncrement = true
            Me.columnReceiptNumber.AllowDBNull = false
            Me.columnReceiptNumber.ReadOnly = true
            Me.columnVoided.ReadOnly = true
        End Sub
        
        Public Function NewUESPPaymentsRow() As UESPPaymentsRow
            Return CType(Me.NewRow,UESPPaymentsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UESPPaymentsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UESPPaymentsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UESPPaymentsRowChangedEvent) Is Nothing) Then
                RaiseEvent UESPPaymentsRowChanged(Me, New UESPPaymentsRowChangeEvent(CType(e.Row,UESPPaymentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UESPPaymentsRowChangingEvent) Is Nothing) Then
                RaiseEvent UESPPaymentsRowChanging(Me, New UESPPaymentsRowChangeEvent(CType(e.Row,UESPPaymentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UESPPaymentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent UESPPaymentsRowDeleted(Me, New UESPPaymentsRowChangeEvent(CType(e.Row,UESPPaymentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UESPPaymentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent UESPPaymentsRowDeleting(Me, New UESPPaymentsRowChangeEvent(CType(e.Row,UESPPaymentsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUESPPaymentsRow(ByVal row As UESPPaymentsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UESPPaymentsRow
        Inherits DataRow
        
        Private tableUESPPayments As UESPPaymentsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUESPPayments = CType(Me.Table,UESPPaymentsDataTable)
        End Sub
        
        Public Property Notes As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.NotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.NotesColumn) = value
            End Set
        End Property
        
        Public Property ReceiptNumber As Long
            Get
                Return CType(Me(Me.tableUESPPayments.ReceiptNumberColumn),Long)
            End Get
            Set
                Me(Me.tableUESPPayments.ReceiptNumberColumn) = value
            End Set
        End Property
        
        Public Property ParticipantName As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.ParticipantNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.ParticipantNameColumn) = value
            End Set
        End Property
        
        Public Property ReceivedBy As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.ReceivedByColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.ReceivedByColumn) = value
            End Set
        End Property
        
        Public Property PaymentDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.PaymentDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.PaymentDateColumn) = value
            End Set
        End Property
        
        Public Property PaymentAmount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.PaymentAmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.PaymentAmountColumn) = value
            End Set
        End Property
        
        Public Property PaymentType As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.PaymentTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.PaymentTypeColumn) = value
            End Set
        End Property
        
        Public Property CheckNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.CheckNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.CheckNumberColumn) = value
            End Set
        End Property
        
        Public Property BenefName1 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName1Column) = value
            End Set
        End Property
        
        Public Property BenefAcctNum1 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum1Column) = value
            End Set
        End Property
        
        Public Property BenefAmt1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt1Column) = value
            End Set
        End Property
        
        Public Property BenefName2 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName2Column) = value
            End Set
        End Property
        
        Public Property BenefAcctNum2 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum2Column) = value
            End Set
        End Property
        
        Public Property BenefAmt2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt2Column) = value
            End Set
        End Property
        
        Public Property BenefName3 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName3Column) = value
            End Set
        End Property
        
        Public Property BenefAcctNum3 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum3Column) = value
            End Set
        End Property
        
        Public Property BenefAmt3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt3Column) = value
            End Set
        End Property
        
        Public Property BenefName4 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName4Column) = value
            End Set
        End Property
        
        Public Property BenefAcctNum4 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum4Column) = value
            End Set
        End Property
        
        Public Property BenefAmt4 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt4Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt4Column) = value
            End Set
        End Property
        
        Public Property BenefName5 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName5Column) = value
            End Set
        End Property
        
        Public Property BenefAcctNum5 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum5Column) = value
            End Set
        End Property
        
        Public Property BenefAmt5 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt5Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt5Column) = value
            End Set
        End Property
        
        Public Property BenefName6 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName6Column) = value
            End Set
        End Property
        
        Public Property BenefAcctNum6 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum6Column) = value
            End Set
        End Property
        
        Public Property BenefAmt6 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt6Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt6Column) = value
            End Set
        End Property
        
        Public Property BenefName7 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName7Column) = value
            End Set
        End Property
        
        Public Property BenefAcctNum7 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum7Column) = value
            End Set
        End Property
        
        Public Property BenefAmt7 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt7Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt7Column) = value
            End Set
        End Property
        
        Public Property BenefName8 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName8Column) = value
            End Set
        End Property
        
        Public Property BenefAcctNum8 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum8Column) = value
            End Set
        End Property
        
        Public Property BenefAmt8 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt8Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt8Column) = value
            End Set
        End Property
        
        Public Property BenefName9 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName9Column) = value
            End Set
        End Property
        
        Public Property BenefAcctNum9 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum9Column) = value
            End Set
        End Property
        
        Public Property BenefAmt9 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt9Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt9Column) = value
            End Set
        End Property
        
        Public Property BenefName10 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName10Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName10Column) = value
            End Set
        End Property
        
        Public Property BenefAcctNum10 As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum10Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum10Column) = value
            End Set
        End Property
        
        Public Property BenefAmt10 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt10Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt10Column) = value
            End Set
        End Property
        
        Public Property Voided As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.VoidedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.VoidedColumn) = value
            End Set
        End Property
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tableUESPPayments.NotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsParticipantNameNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.ParticipantNameColumn)
        End Function
        
        Public Sub SetParticipantNameNull()
            Me(Me.tableUESPPayments.ParticipantNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceivedByNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.ReceivedByColumn)
        End Function
        
        Public Sub SetReceivedByNull()
            Me(Me.tableUESPPayments.ReceivedByColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentDateNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.PaymentDateColumn)
        End Function
        
        Public Sub SetPaymentDateNull()
            Me(Me.tableUESPPayments.PaymentDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentAmountNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.PaymentAmountColumn)
        End Function
        
        Public Sub SetPaymentAmountNull()
            Me(Me.tableUESPPayments.PaymentAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentTypeNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.PaymentTypeColumn)
        End Function
        
        Public Sub SetPaymentTypeNull()
            Me(Me.tableUESPPayments.PaymentTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckNumberNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.CheckNumberColumn)
        End Function
        
        Public Sub SetCheckNumberNull()
            Me(Me.tableUESPPayments.CheckNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefName1Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName1Column)
        End Function
        
        Public Sub SetBenefName1Null()
            Me(Me.tableUESPPayments.BenefName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAcctNum1Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum1Column)
        End Function
        
        Public Sub SetBenefAcctNum1Null()
            Me(Me.tableUESPPayments.BenefAcctNum1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAmt1Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt1Column)
        End Function
        
        Public Sub SetBenefAmt1Null()
            Me(Me.tableUESPPayments.BenefAmt1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefName2Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName2Column)
        End Function
        
        Public Sub SetBenefName2Null()
            Me(Me.tableUESPPayments.BenefName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAcctNum2Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum2Column)
        End Function
        
        Public Sub SetBenefAcctNum2Null()
            Me(Me.tableUESPPayments.BenefAcctNum2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAmt2Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt2Column)
        End Function
        
        Public Sub SetBenefAmt2Null()
            Me(Me.tableUESPPayments.BenefAmt2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefName3Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName3Column)
        End Function
        
        Public Sub SetBenefName3Null()
            Me(Me.tableUESPPayments.BenefName3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAcctNum3Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum3Column)
        End Function
        
        Public Sub SetBenefAcctNum3Null()
            Me(Me.tableUESPPayments.BenefAcctNum3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAmt3Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt3Column)
        End Function
        
        Public Sub SetBenefAmt3Null()
            Me(Me.tableUESPPayments.BenefAmt3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefName4Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName4Column)
        End Function
        
        Public Sub SetBenefName4Null()
            Me(Me.tableUESPPayments.BenefName4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAcctNum4Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum4Column)
        End Function
        
        Public Sub SetBenefAcctNum4Null()
            Me(Me.tableUESPPayments.BenefAcctNum4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAmt4Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt4Column)
        End Function
        
        Public Sub SetBenefAmt4Null()
            Me(Me.tableUESPPayments.BenefAmt4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefName5Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName5Column)
        End Function
        
        Public Sub SetBenefName5Null()
            Me(Me.tableUESPPayments.BenefName5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAcctNum5Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum5Column)
        End Function
        
        Public Sub SetBenefAcctNum5Null()
            Me(Me.tableUESPPayments.BenefAcctNum5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAmt5Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt5Column)
        End Function
        
        Public Sub SetBenefAmt5Null()
            Me(Me.tableUESPPayments.BenefAmt5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefName6Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName6Column)
        End Function
        
        Public Sub SetBenefName6Null()
            Me(Me.tableUESPPayments.BenefName6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAcctNum6Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum6Column)
        End Function
        
        Public Sub SetBenefAcctNum6Null()
            Me(Me.tableUESPPayments.BenefAcctNum6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAmt6Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt6Column)
        End Function
        
        Public Sub SetBenefAmt6Null()
            Me(Me.tableUESPPayments.BenefAmt6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefName7Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName7Column)
        End Function
        
        Public Sub SetBenefName7Null()
            Me(Me.tableUESPPayments.BenefName7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAcctNum7Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum7Column)
        End Function
        
        Public Sub SetBenefAcctNum7Null()
            Me(Me.tableUESPPayments.BenefAcctNum7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAmt7Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt7Column)
        End Function
        
        Public Sub SetBenefAmt7Null()
            Me(Me.tableUESPPayments.BenefAmt7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefName8Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName8Column)
        End Function
        
        Public Sub SetBenefName8Null()
            Me(Me.tableUESPPayments.BenefName8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAcctNum8Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum8Column)
        End Function
        
        Public Sub SetBenefAcctNum8Null()
            Me(Me.tableUESPPayments.BenefAcctNum8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAmt8Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt8Column)
        End Function
        
        Public Sub SetBenefAmt8Null()
            Me(Me.tableUESPPayments.BenefAmt8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefName9Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName9Column)
        End Function
        
        Public Sub SetBenefName9Null()
            Me(Me.tableUESPPayments.BenefName9Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAcctNum9Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum9Column)
        End Function
        
        Public Sub SetBenefAcctNum9Null()
            Me(Me.tableUESPPayments.BenefAcctNum9Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAmt9Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt9Column)
        End Function
        
        Public Sub SetBenefAmt9Null()
            Me(Me.tableUESPPayments.BenefAmt9Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefName10Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName10Column)
        End Function
        
        Public Sub SetBenefName10Null()
            Me(Me.tableUESPPayments.BenefName10Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAcctNum10Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum10Column)
        End Function
        
        Public Sub SetBenefAcctNum10Null()
            Me(Me.tableUESPPayments.BenefAcctNum10Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBenefAmt10Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt10Column)
        End Function
        
        Public Sub SetBenefAmt10Null()
            Me(Me.tableUESPPayments.BenefAmt10Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsVoidedNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.VoidedColumn)
        End Function
        
        Public Sub SetVoidedNull()
            Me(Me.tableUESPPayments.VoidedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UESPPaymentsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UESPPaymentsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UESPPaymentsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UESPPaymentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
