'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("TstDSUESPPayments"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class TstDSUESPPayments
    Inherits Global.System.Data.DataSet
    
    Private tableUESPPayments As UESPPaymentsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UESPPayments")) Is Nothing) Then
                MyBase.Tables.Add(New UESPPaymentsDataTable(ds.Tables("UESPPayments")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UESPPayments() As UESPPaymentsDataTable
        Get
            Return Me.tableUESPPayments
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As TstDSUESPPayments = CType(MyBase.Clone,TstDSUESPPayments)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("UESPPayments")) Is Nothing) Then
                MyBase.Tables.Add(New UESPPaymentsDataTable(ds.Tables("UESPPayments")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableUESPPayments = CType(MyBase.Tables("UESPPayments"),UESPPaymentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUESPPayments) Is Nothing) Then
                Me.tableUESPPayments.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "TstDSUESPPayments"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/TstDSUESPPayments.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableUESPPayments = New UESPPaymentsDataTable
        MyBase.Tables.Add(Me.tableUESPPayments)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUESPPayments() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As TstDSUESPPayments = New TstDSUESPPayments
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub UESPPaymentsRowChangeEventHandler(ByVal sender As Object, ByVal e As UESPPaymentsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UESPPaymentsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNotes As Global.System.Data.DataColumn
        
        Private columnReceiptNumber As Global.System.Data.DataColumn
        
        Private columnParticipantName As Global.System.Data.DataColumn
        
        Private columnReceivedBy As Global.System.Data.DataColumn
        
        Private columnPaymentDate As Global.System.Data.DataColumn
        
        Private columnPaymentAmount As Global.System.Data.DataColumn
        
        Private columnPaymentType As Global.System.Data.DataColumn
        
        Private columnCheckNumber As Global.System.Data.DataColumn
        
        Private columnBenefName1 As Global.System.Data.DataColumn
        
        Private columnBenefAcctNum1 As Global.System.Data.DataColumn
        
        Private columnBenefAmt1 As Global.System.Data.DataColumn
        
        Private columnBenefName2 As Global.System.Data.DataColumn
        
        Private columnBenefAcctNum2 As Global.System.Data.DataColumn
        
        Private columnBenefAmt2 As Global.System.Data.DataColumn
        
        Private columnBenefName3 As Global.System.Data.DataColumn
        
        Private columnBenefAcctNum3 As Global.System.Data.DataColumn
        
        Private columnBenefAmt3 As Global.System.Data.DataColumn
        
        Private columnBenefName4 As Global.System.Data.DataColumn
        
        Private columnBenefAcctNum4 As Global.System.Data.DataColumn
        
        Private columnBenefAmt4 As Global.System.Data.DataColumn
        
        Private columnBenefName5 As Global.System.Data.DataColumn
        
        Private columnBenefAcctNum5 As Global.System.Data.DataColumn
        
        Private columnBenefAmt5 As Global.System.Data.DataColumn
        
        Private columnBenefName6 As Global.System.Data.DataColumn
        
        Private columnBenefAcctNum6 As Global.System.Data.DataColumn
        
        Private columnBenefAmt6 As Global.System.Data.DataColumn
        
        Private columnBenefName7 As Global.System.Data.DataColumn
        
        Private columnBenefAcctNum7 As Global.System.Data.DataColumn
        
        Private columnBenefAmt7 As Global.System.Data.DataColumn
        
        Private columnBenefName8 As Global.System.Data.DataColumn
        
        Private columnBenefAcctNum8 As Global.System.Data.DataColumn
        
        Private columnBenefAmt8 As Global.System.Data.DataColumn
        
        Private columnBenefName9 As Global.System.Data.DataColumn
        
        Private columnBenefAcctNum9 As Global.System.Data.DataColumn
        
        Private columnBenefAmt9 As Global.System.Data.DataColumn
        
        Private columnBenefName10 As Global.System.Data.DataColumn
        
        Private columnBenefAcctNum10 As Global.System.Data.DataColumn
        
        Private columnBenefAmt10 As Global.System.Data.DataColumn
        
        Private columnVoided As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UESPPayments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceiptNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParticipantNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParticipantName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReceivedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceivedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaymentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CheckNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheckNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefName1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefName1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAcctNum1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAcctNum1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAmt1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAmt1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefName2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefName2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAcctNum2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAcctNum2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAmt2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAmt2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefName3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefName3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAcctNum3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAcctNum3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAmt3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAmt3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefName4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefName4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAcctNum4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAcctNum4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAmt4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAmt4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefName5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefName5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAcctNum5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAcctNum5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAmt5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAmt5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefName6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefName6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAcctNum6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAcctNum6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAmt6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAmt6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefName7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefName7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAcctNum7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAcctNum7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAmt7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAmt7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefName8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefName8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAcctNum8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAcctNum8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAmt8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAmt8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefName9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefName9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAcctNum9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAcctNum9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAmt9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAmt9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefName10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefName10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAcctNum10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAcctNum10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BenefAmt10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBenefAmt10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoidedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoided
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UESPPaymentsRow
            Get
                Return CType(Me.Rows(index),UESPPaymentsRow)
            End Get
        End Property
        
        Public Event UESPPaymentsRowChanging As UESPPaymentsRowChangeEventHandler
        
        Public Event UESPPaymentsRowChanged As UESPPaymentsRowChangeEventHandler
        
        Public Event UESPPaymentsRowDeleting As UESPPaymentsRowChangeEventHandler
        
        Public Event UESPPaymentsRowDeleted As UESPPaymentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUESPPaymentsRow(ByVal row As UESPPaymentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUESPPaymentsRow( _
                    ByVal Notes As String,  _
                    ByVal ParticipantName As String,  _
                    ByVal ReceivedBy As String,  _
                    ByVal PaymentDate As Date,  _
                    ByVal PaymentAmount As Decimal,  _
                    ByVal PaymentType As String,  _
                    ByVal CheckNumber As String,  _
                    ByVal BenefName1 As String,  _
                    ByVal BenefAcctNum1 As String,  _
                    ByVal BenefAmt1 As Decimal,  _
                    ByVal BenefName2 As String,  _
                    ByVal BenefAcctNum2 As String,  _
                    ByVal BenefAmt2 As Decimal,  _
                    ByVal BenefName3 As String,  _
                    ByVal BenefAcctNum3 As String,  _
                    ByVal BenefAmt3 As Decimal,  _
                    ByVal BenefName4 As String,  _
                    ByVal BenefAcctNum4 As String,  _
                    ByVal BenefAmt4 As Decimal,  _
                    ByVal BenefName5 As String,  _
                    ByVal BenefAcctNum5 As String,  _
                    ByVal BenefAmt5 As Decimal,  _
                    ByVal BenefName6 As String,  _
                    ByVal BenefAcctNum6 As String,  _
                    ByVal BenefAmt6 As Decimal,  _
                    ByVal BenefName7 As String,  _
                    ByVal BenefAcctNum7 As String,  _
                    ByVal BenefAmt7 As Decimal,  _
                    ByVal BenefName8 As String,  _
                    ByVal BenefAcctNum8 As String,  _
                    ByVal BenefAmt8 As Decimal,  _
                    ByVal BenefName9 As String,  _
                    ByVal BenefAcctNum9 As String,  _
                    ByVal BenefAmt9 As Decimal,  _
                    ByVal BenefName10 As String,  _
                    ByVal BenefAcctNum10 As String,  _
                    ByVal BenefAmt10 As Decimal,  _
                    ByVal Voided As String) As UESPPaymentsRow
            Dim rowUESPPaymentsRow As UESPPaymentsRow = CType(Me.NewRow,UESPPaymentsRow)
            Dim columnValuesArray() As Object = New Object() {Notes, Nothing, ParticipantName, ReceivedBy, PaymentDate, PaymentAmount, PaymentType, CheckNumber, BenefName1, BenefAcctNum1, BenefAmt1, BenefName2, BenefAcctNum2, BenefAmt2, BenefName3, BenefAcctNum3, BenefAmt3, BenefName4, BenefAcctNum4, BenefAmt4, BenefName5, BenefAcctNum5, BenefAmt5, BenefName6, BenefAcctNum6, BenefAmt6, BenefName7, BenefAcctNum7, BenefAmt7, BenefName8, BenefAcctNum8, BenefAmt8, BenefName9, BenefAcctNum9, BenefAmt9, BenefName10, BenefAcctNum10, BenefAmt10, Voided}
            rowUESPPaymentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUESPPaymentsRow)
            Return rowUESPPaymentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UESPPaymentsDataTable = CType(MyBase.Clone,UESPPaymentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UESPPaymentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columnReceiptNumber = MyBase.Columns("ReceiptNumber")
            Me.columnParticipantName = MyBase.Columns("ParticipantName")
            Me.columnReceivedBy = MyBase.Columns("ReceivedBy")
            Me.columnPaymentDate = MyBase.Columns("PaymentDate")
            Me.columnPaymentAmount = MyBase.Columns("PaymentAmount")
            Me.columnPaymentType = MyBase.Columns("PaymentType")
            Me.columnCheckNumber = MyBase.Columns("CheckNumber")
            Me.columnBenefName1 = MyBase.Columns("BenefName1")
            Me.columnBenefAcctNum1 = MyBase.Columns("BenefAcctNum1")
            Me.columnBenefAmt1 = MyBase.Columns("BenefAmt1")
            Me.columnBenefName2 = MyBase.Columns("BenefName2")
            Me.columnBenefAcctNum2 = MyBase.Columns("BenefAcctNum2")
            Me.columnBenefAmt2 = MyBase.Columns("BenefAmt2")
            Me.columnBenefName3 = MyBase.Columns("BenefName3")
            Me.columnBenefAcctNum3 = MyBase.Columns("BenefAcctNum3")
            Me.columnBenefAmt3 = MyBase.Columns("BenefAmt3")
            Me.columnBenefName4 = MyBase.Columns("BenefName4")
            Me.columnBenefAcctNum4 = MyBase.Columns("BenefAcctNum4")
            Me.columnBenefAmt4 = MyBase.Columns("BenefAmt4")
            Me.columnBenefName5 = MyBase.Columns("BenefName5")
            Me.columnBenefAcctNum5 = MyBase.Columns("BenefAcctNum5")
            Me.columnBenefAmt5 = MyBase.Columns("BenefAmt5")
            Me.columnBenefName6 = MyBase.Columns("BenefName6")
            Me.columnBenefAcctNum6 = MyBase.Columns("BenefAcctNum6")
            Me.columnBenefAmt6 = MyBase.Columns("BenefAmt6")
            Me.columnBenefName7 = MyBase.Columns("BenefName7")
            Me.columnBenefAcctNum7 = MyBase.Columns("BenefAcctNum7")
            Me.columnBenefAmt7 = MyBase.Columns("BenefAmt7")
            Me.columnBenefName8 = MyBase.Columns("BenefName8")
            Me.columnBenefAcctNum8 = MyBase.Columns("BenefAcctNum8")
            Me.columnBenefAmt8 = MyBase.Columns("BenefAmt8")
            Me.columnBenefName9 = MyBase.Columns("BenefName9")
            Me.columnBenefAcctNum9 = MyBase.Columns("BenefAcctNum9")
            Me.columnBenefAmt9 = MyBase.Columns("BenefAmt9")
            Me.columnBenefName10 = MyBase.Columns("BenefName10")
            Me.columnBenefAcctNum10 = MyBase.Columns("BenefAcctNum10")
            Me.columnBenefAmt10 = MyBase.Columns("BenefAmt10")
            Me.columnVoided = MyBase.Columns("Voided")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columnReceiptNumber = New Global.System.Data.DataColumn("ReceiptNumber", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNumber)
            Me.columnParticipantName = New Global.System.Data.DataColumn("ParticipantName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParticipantName)
            Me.columnReceivedBy = New Global.System.Data.DataColumn("ReceivedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceivedBy)
            Me.columnPaymentDate = New Global.System.Data.DataColumn("PaymentDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentDate)
            Me.columnPaymentAmount = New Global.System.Data.DataColumn("PaymentAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentAmount)
            Me.columnPaymentType = New Global.System.Data.DataColumn("PaymentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymentType)
            Me.columnCheckNumber = New Global.System.Data.DataColumn("CheckNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheckNumber)
            Me.columnBenefName1 = New Global.System.Data.DataColumn("BenefName1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefName1)
            Me.columnBenefAcctNum1 = New Global.System.Data.DataColumn("BenefAcctNum1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAcctNum1)
            Me.columnBenefAmt1 = New Global.System.Data.DataColumn("BenefAmt1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAmt1)
            Me.columnBenefName2 = New Global.System.Data.DataColumn("BenefName2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefName2)
            Me.columnBenefAcctNum2 = New Global.System.Data.DataColumn("BenefAcctNum2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAcctNum2)
            Me.columnBenefAmt2 = New Global.System.Data.DataColumn("BenefAmt2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAmt2)
            Me.columnBenefName3 = New Global.System.Data.DataColumn("BenefName3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefName3)
            Me.columnBenefAcctNum3 = New Global.System.Data.DataColumn("BenefAcctNum3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAcctNum3)
            Me.columnBenefAmt3 = New Global.System.Data.DataColumn("BenefAmt3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAmt3)
            Me.columnBenefName4 = New Global.System.Data.DataColumn("BenefName4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefName4)
            Me.columnBenefAcctNum4 = New Global.System.Data.DataColumn("BenefAcctNum4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAcctNum4)
            Me.columnBenefAmt4 = New Global.System.Data.DataColumn("BenefAmt4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAmt4)
            Me.columnBenefName5 = New Global.System.Data.DataColumn("BenefName5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefName5)
            Me.columnBenefAcctNum5 = New Global.System.Data.DataColumn("BenefAcctNum5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAcctNum5)
            Me.columnBenefAmt5 = New Global.System.Data.DataColumn("BenefAmt5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAmt5)
            Me.columnBenefName6 = New Global.System.Data.DataColumn("BenefName6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefName6)
            Me.columnBenefAcctNum6 = New Global.System.Data.DataColumn("BenefAcctNum6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAcctNum6)
            Me.columnBenefAmt6 = New Global.System.Data.DataColumn("BenefAmt6", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAmt6)
            Me.columnBenefName7 = New Global.System.Data.DataColumn("BenefName7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefName7)
            Me.columnBenefAcctNum7 = New Global.System.Data.DataColumn("BenefAcctNum7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAcctNum7)
            Me.columnBenefAmt7 = New Global.System.Data.DataColumn("BenefAmt7", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAmt7)
            Me.columnBenefName8 = New Global.System.Data.DataColumn("BenefName8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefName8)
            Me.columnBenefAcctNum8 = New Global.System.Data.DataColumn("BenefAcctNum8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAcctNum8)
            Me.columnBenefAmt8 = New Global.System.Data.DataColumn("BenefAmt8", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAmt8)
            Me.columnBenefName9 = New Global.System.Data.DataColumn("BenefName9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefName9)
            Me.columnBenefAcctNum9 = New Global.System.Data.DataColumn("BenefAcctNum9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAcctNum9)
            Me.columnBenefAmt9 = New Global.System.Data.DataColumn("BenefAmt9", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAmt9)
            Me.columnBenefName10 = New Global.System.Data.DataColumn("BenefName10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefName10)
            Me.columnBenefAcctNum10 = New Global.System.Data.DataColumn("BenefAcctNum10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAcctNum10)
            Me.columnBenefAmt10 = New Global.System.Data.DataColumn("BenefAmt10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBenefAmt10)
            Me.columnVoided = New Global.System.Data.DataColumn("Voided", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoided)
            Me.columnReceiptNumber.AutoIncrement = true
            Me.columnReceiptNumber.AllowDBNull = false
            Me.columnReceiptNumber.ReadOnly = true
            Me.columnVoided.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUESPPaymentsRow() As UESPPaymentsRow
            Return CType(Me.NewRow,UESPPaymentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UESPPaymentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UESPPaymentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UESPPaymentsRowChangedEvent) Is Nothing) Then
                RaiseEvent UESPPaymentsRowChanged(Me, New UESPPaymentsRowChangeEvent(CType(e.Row,UESPPaymentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UESPPaymentsRowChangingEvent) Is Nothing) Then
                RaiseEvent UESPPaymentsRowChanging(Me, New UESPPaymentsRowChangeEvent(CType(e.Row,UESPPaymentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UESPPaymentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent UESPPaymentsRowDeleted(Me, New UESPPaymentsRowChangeEvent(CType(e.Row,UESPPaymentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UESPPaymentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent UESPPaymentsRowDeleting(Me, New UESPPaymentsRowChangeEvent(CType(e.Row,UESPPaymentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUESPPaymentsRow(ByVal row As UESPPaymentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TstDSUESPPayments = New TstDSUESPPayments
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UESPPaymentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UESPPaymentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableUESPPayments As UESPPaymentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUESPPayments = CType(Me.Table,UESPPaymentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceiptNumber() As Long
            Get
                Return CType(Me(Me.tableUESPPayments.ReceiptNumberColumn),Long)
            End Get
            Set
                Me(Me.tableUESPPayments.ReceiptNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParticipantName() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.ParticipantNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParticipantName' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.ParticipantNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReceivedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.ReceivedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceivedBy' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.ReceivedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.PaymentDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentDate' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.PaymentDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.PaymentAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentAmount' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.PaymentAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaymentType() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.PaymentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaymentType' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.PaymentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CheckNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.CheckNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CheckNumber' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.CheckNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefName1() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefName1' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAcctNum1() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAcctNum1' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAmt1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAmt1' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefName2() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefName2' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAcctNum2() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAcctNum2' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAmt2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAmt2' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefName3() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefName3' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAcctNum3() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAcctNum3' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAmt3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAmt3' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefName4() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefName4' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAcctNum4() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAcctNum4' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAmt4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAmt4' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefName5() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefName5' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAcctNum5() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAcctNum5' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAmt5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAmt5' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefName6() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefName6' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAcctNum6() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAcctNum6' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAmt6() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt6Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAmt6' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefName7() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefName7' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAcctNum7() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAcctNum7' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAmt7() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt7Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAmt7' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefName8() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefName8' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAcctNum8() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAcctNum8' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAmt8() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt8Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAmt8' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefName9() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefName9' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAcctNum9() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAcctNum9' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAmt9() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt9Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAmt9' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefName10() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefName10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefName10' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefName10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAcctNum10() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAcctNum10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAcctNum10' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAcctNum10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BenefAmt10() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.BenefAmt10Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BenefAmt10' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.BenefAmt10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Voided() As String
            Get
                Try 
                    Return CType(Me(Me.tableUESPPayments.VoidedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Voided' in table 'UESPPayments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUESPPayments.VoidedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotesNull()
            Me(Me.tableUESPPayments.NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParticipantNameNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.ParticipantNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParticipantNameNull()
            Me(Me.tableUESPPayments.ParticipantNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReceivedByNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.ReceivedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReceivedByNull()
            Me(Me.tableUESPPayments.ReceivedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentDateNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.PaymentDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentDateNull()
            Me(Me.tableUESPPayments.PaymentDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentAmountNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.PaymentAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentAmountNull()
            Me(Me.tableUESPPayments.PaymentAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaymentTypeNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.PaymentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaymentTypeNull()
            Me(Me.tableUESPPayments.PaymentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCheckNumberNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.CheckNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCheckNumberNull()
            Me(Me.tableUESPPayments.CheckNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefName1Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefName1Null()
            Me(Me.tableUESPPayments.BenefName1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAcctNum1Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAcctNum1Null()
            Me(Me.tableUESPPayments.BenefAcctNum1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAmt1Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAmt1Null()
            Me(Me.tableUESPPayments.BenefAmt1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefName2Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefName2Null()
            Me(Me.tableUESPPayments.BenefName2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAcctNum2Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAcctNum2Null()
            Me(Me.tableUESPPayments.BenefAcctNum2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAmt2Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAmt2Null()
            Me(Me.tableUESPPayments.BenefAmt2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefName3Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefName3Null()
            Me(Me.tableUESPPayments.BenefName3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAcctNum3Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAcctNum3Null()
            Me(Me.tableUESPPayments.BenefAcctNum3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAmt3Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAmt3Null()
            Me(Me.tableUESPPayments.BenefAmt3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefName4Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefName4Null()
            Me(Me.tableUESPPayments.BenefName4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAcctNum4Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAcctNum4Null()
            Me(Me.tableUESPPayments.BenefAcctNum4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAmt4Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAmt4Null()
            Me(Me.tableUESPPayments.BenefAmt4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefName5Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefName5Null()
            Me(Me.tableUESPPayments.BenefName5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAcctNum5Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAcctNum5Null()
            Me(Me.tableUESPPayments.BenefAcctNum5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAmt5Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAmt5Null()
            Me(Me.tableUESPPayments.BenefAmt5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefName6Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefName6Null()
            Me(Me.tableUESPPayments.BenefName6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAcctNum6Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAcctNum6Null()
            Me(Me.tableUESPPayments.BenefAcctNum6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAmt6Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAmt6Null()
            Me(Me.tableUESPPayments.BenefAmt6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefName7Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefName7Null()
            Me(Me.tableUESPPayments.BenefName7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAcctNum7Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAcctNum7Null()
            Me(Me.tableUESPPayments.BenefAcctNum7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAmt7Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAmt7Null()
            Me(Me.tableUESPPayments.BenefAmt7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefName8Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefName8Null()
            Me(Me.tableUESPPayments.BenefName8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAcctNum8Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAcctNum8Null()
            Me(Me.tableUESPPayments.BenefAcctNum8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAmt8Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAmt8Null()
            Me(Me.tableUESPPayments.BenefAmt8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefName9Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefName9Null()
            Me(Me.tableUESPPayments.BenefName9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAcctNum9Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAcctNum9Null()
            Me(Me.tableUESPPayments.BenefAcctNum9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAmt9Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAmt9Null()
            Me(Me.tableUESPPayments.BenefAmt9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefName10Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefName10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefName10Null()
            Me(Me.tableUESPPayments.BenefName10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAcctNum10Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAcctNum10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAcctNum10Null()
            Me(Me.tableUESPPayments.BenefAcctNum10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBenefAmt10Null() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.BenefAmt10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBenefAmt10Null()
            Me(Me.tableUESPPayments.BenefAmt10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoidedNull() As Boolean
            Return Me.IsNull(Me.tableUESPPayments.VoidedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoidedNull()
            Me(Me.tableUESPPayments.VoidedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UESPPaymentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UESPPaymentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UESPPaymentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UESPPaymentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
