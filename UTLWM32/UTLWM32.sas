*----------------------------------------------------------------------------------*
| UTLWM32 - MONTHLY PRECLAIM PERFORMANCE REPORT                                    |
*----------------------------------------------------------------------------------*
| PROGRAMMER NOTE: THIS SAS JOB USES A SAVED DATA SET THAT CAN BE OVERWRITTEN IF   |
| YOU ARE NOT CAREFUL WHEN MAKING MODIFICATIONS! DO NOT USE LIVE DATA WHEN MAKING  |
| MODIFICATIONS. ASSIGN LOCAL DATA SETS DURING TESTING. YOU MUST ALSO MODIFY THIS  |
| CODE IF IT NEEDS TO BE RUN LOCALLY FOR PRODUCTION OUTPUT.                        |
*----------------------------------------------------------------------------------*
| ALSO BE SURE TO COMMENT OUT THE NECESSARY CODE IN THE FIRST BASE MACRO           |
*----------------------------------------------------------------------------------*; 
/*LIBNAME DLGSUTWH DB2 DATABASE=DLGSUTWH OWNER=OLWHRM1;*/
/*%LET RPTLIB = %SYSGET(reportdir);*/
/*%LET TBLLIB = /sas/whse/progrevw;*/
%LET RPTLIB = T:\SAS;
%LET TBLLIB = Q:\Process Automation\TabSAS;
FILENAME REPORT2 "&RPTLIB/ULWM32.LWM32R2";
FILENAME REPORT3 "&RPTLIB/ULWM32.LWM32R3";
FILENAME REPORT4 "&RPTLIB/ULWM32.LWM32R4";
FILENAME REPORT5 "&RPTLIB/ULWM32.LWM32R5";
FILENAME REPORTZ "&RPTLIB/ULWM32.LWM32RZ";
FILENAME RUNLOG "&TBLLIB/UTLWM32.LOG.txt";
LIBNAME HLDIR V8 "&TBLLIB"; /*ASSIGN LIB WHERE BASELINE DATASET IS LOCATED*/
DATA _NULL_;
CALL SYMPUT('RUNDATE',PUT(INTNX('DAY',TODAY(),0,'BEGINNING'), MMDDYY10.));
CALL SYMPUT('RUNTIME',PUT(TIME(), TIME.));
DTPARM = today();
IF MONTH(DTPARM) < 10 THEN DO;
	CALL SYMPUT('CurChrtYrBeg',YEAR(INTNX('YEAR',DTPARM,-2,'BEGINNING')));
	CALL SYMPUT('CurChrtYrEnd',YEAR(INTNX('YEAR',DTPARM,-1,'BEGINNING')));
	CALL SYMPUT('NxtChrtYrBeg',YEAR(INTNX('YEAR',DTPARM,-1,'BEGINNING')));
	CALL SYMPUT('NxtChrtYrEnd',YEAR(INTNX('YEAR',DTPARM,0,'BEGINNING')));
	CALL SYMPUT('CurChrtDecYr',YEAR(INTNX('YEAR',DTPARM,0,'BEGINNING')));
	CALL SYMPUT('NxtChrtDecYr',YEAR(INTNX('YEAR',DTPARM,+1,'BEGINNING')));
	END;
ELSE DO;
	CALL SYMPUT('CurChrtYrBeg',YEAR(INTNX('YEAR',DTPARM,-1,'BEGINNING')));
	CALL SYMPUT('CurChrtYrEnd',YEAR(INTNX('YEAR',DTPARM,0,'BEGINNING')));
	CALL SYMPUT('NxtChrtYrBeg',YEAR(INTNX('YEAR',DTPARM,0,'BEGINNING')));
	CALL SYMPUT('NxtChrtYrEnd',YEAR(INTNX('YEAR',DTPARM,+1,'BEGINNING')));
	CALL SYMPUT('CurChrtDecYr',YEAR(INTNX('YEAR',DTPARM,+1,'BEGINNING')));
	CALL SYMPUT('NxtChrtDecYr',YEAR(INTNX('YEAR',DTPARM,+2,'BEGINNING')));
END;
DATA _NULL_;
/*CHARACTER DATES FOR PASS THROUGH SQL*/
	CALL SYMPUT('cCurChrtBeg',"'"||PUT("01OCT&CurChrtYrBeg"d,MMDDYYS10.)||"'");
	CALL SYMPUT('cNxtChrtEnd',"'"||PUT("30SEP&NxtChrtYrEnd"d,MMDDYYS10.)||"'");
/*INTEGER DATES FOR SAS PROCESSING*/
	CALL SYMPUT('iCurChrtBeg',"01OCT&CurChrtYrBeg"d);
	CALL SYMPUT('iCurChrtEnd',"30SEP&CurChrtYrEnd"d);
	CALL SYMPUT('iNxtChrtBeg',"01OCT&NxtChrtYrBeg"d);
	CALL SYMPUT('iNxtChrtEnd',"30SEP&NxtChrtYrEnd"d);
	CALL SYMPUT('iCurDecDt',"04DEC&CurChrtDecYr"d);
	CALL SYMPUT('iNxtDecDt',"04DEC&NxtChrtDecYr"d);
RUN;
/********************************************************************************************
* GET THE LAST RUN DAY FOR THIS JOB AND COMPARE IT TO THE CURRENT DATE. IF THE MONTHS ARE 
* DIFFERENT THAT MEANS IT IS THE FIRST RUN OF THE MONTH AND THE DATA FROM THE LAST DAY OF 
* THE PREVIOUS MONTH IS STILL NEEDED AND WILL BE GATHERED. 
*********************************************************************************************/
DATA LGFL;
	FORMAT LR_DATE MMDDYY10.;
	INFILE RUNLOG;
	INFORMAT LR_DATE MMDDYY10.;
	INPUT LR_DATE;
RUN;
/***********************************
* CREATE STATIC TABLE OF CATEGORIES
************************************/
DATA SCAT;
	INFILE CARDS DLM=',' DSD MISSOVER;
	INFORMAT CAT $15.;
	INPUT CAT $  CSRT;
	CARDS; 
		TOTAL,1
		BANKRUPTCY,2
		DEFAULTED,3
		DEFERMENT,4
		FORBEARANCE,5
		CONSOLIDATED,6
		PAID IN FULL,7
		OTHER,8
RUN;
LIBNAME  WORKLOCL  REMOTE  SERVER=CYPRUS  SLIBREF=WORK;
DATA WORKLOCL.BSLN;
SET HLDIR.BSLN;
RUN;
%SYSLPUT cCurChrtBeg = &cCurChrtBeg;
%SYSLPUT cNxtChrtEnd = &cNxtChrtEnd;
%SYSLPUT iCurChrtBeg = &iCurChrtBeg;
%SYSLPUT iCurChrtEnd = &iCurChrtEnd;
%SYSLPUT iNxtChrtBeg = &iNxtChrtBeg;
%SYSLPUT iNxtChrtEnd = &iNxtChrtEnd;
%SYSLPUT iCurDecDt = &iCurDecDt;
%SYSLPUT iNxtDecDt = &iNxtDecDt;
RSUBMIT;
%MACRO SQLCHECK (SQLRPT= );
%IF &SQLXRC NE 0 %THEN %DO;
	DATA _NULL_;
    FILE REPORTZ NOTITLES;
    PUT @01 " ********************************************************************* "
      / @01 " ****  THE SQL CODE ABOVE HAS EXPERIENCED AN ERROR.               **** "
      / @01 " ****  THE SAS LOG IN &SQLRPT SHOULD BE REVIEWED.          **** "       
      / @01 " ********************************************************************* "
      / @01 " ****  THE SQL ERROR CODE IS  &SQLXRC  AND THE SQL ERROR MESSAGE  **** "
      / @01 " ****  &SQLXMSG   **** "
      / @01 " ********************************************************************* ";
	RUN;
%END;
%MEND;
%MACRO BaseLineSQL;
/***************************************************************************
* CALCULATE CURRENT AND FUTURE COHORT PERIODS CONTINGENT UPON WHAT TODAY IS
****************************************************************************/
PROC SQL;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
/*********************************************************************************************
* IDENTIFY LOANS THAT COULD APPEAR IN EITHER CURRENT OR FUTURE COHORT 
**********************************************************************************************/
CREATE TABLE NCDRD AS
SELECT DISTINCT DF_PRS_ID_BR
	,CLUID
	,AC_LON_STA_TYP
	,AC_LON_STA_REA
	,DT_ENT_REPMT
FROM CONNECTION TO DB2 (
	SELECT GA01.DF_PRS_ID_BR 
		,GA10.AF_APL_ID||GA10.AF_APL_ID_SFX AS CLUID
		,GA15.AD_NDS_CLC_ENT_RPD AS DT_ENT_REPMT
		,GA14.AC_LON_STA_TYP
		,GA14.AC_LON_STA_REA
	FROM OLWHRM1.GA01_APP GA01
	INNER JOIN OLWHRM1.GA10_LON_APP GA10
		ON GA01.AF_APL_ID = GA10.AF_APL_ID
	INNER JOIN OLWHRM1.GA15_NDS_ID GA15
		ON GA10.AF_APL_ID = GA15.AF_APL_ID
		AND GA10.AF_APL_ID_SFX = GA15.AF_APL_ID_SFX
	INNER JOIN OLWHRM1.GA14_LON_STA GA14
		ON GA10.AF_APL_ID = GA14.AF_APL_ID
		AND GA10.AF_APL_ID_SFX = GA14.AF_APL_ID_SFX
	WHERE GA10.AC_LON_TYP IN ('SF','SU','SL')
		AND GA15.AD_NDS_CLC_ENT_RPD BETWEEN &cCurChrtBeg AND &cNxtChrtEnd
		AND GA15.AC_STA_GA15 = 'A'
		AND GA14.AC_STA_GA14 = 'A'
UNION
	SELECT CNSL.BF_SSN AS DF_PRS_ID_BR
		,CNSL.AF_APL_ID||CNSL.AF_APL_ID_SFX AS CLUID
		,USTAF.AD_NDS_CLC_ENT_RPD AS DT_ENT_REPMT
		,USTAF.AC_LON_STA_TYP
		,USTAF.AC_LON_STA_REA
	FROM (
		SELECT A.DF_PRS_ID_BR AS BF_SSN
			,B.AF_APL_ID
			,B.AF_APL_ID_SFX
		FROM OLWHRM1.GA01_APP A
		INNER JOIN OLWHRM1.GA10_LON_APP B
			ON A.AF_APL_ID = B.AF_APL_ID
		WHERE B.AC_LON_TYP = 'CL'
		) CNSL
	INNER JOIN (
			SELECT C.DF_PRS_ID_BR
				,F.AD_NDS_CLC_ENT_RPD
				,E.AC_LON_STA_TYP
				,E.AC_LON_STA_REA
			FROM OLWHRM1.GA01_APP C
			INNER JOIN OLWHRM1.GA10_LON_APP D
				ON C.AF_APL_ID = D.AF_APL_ID
			INNER JOIN (
					SELECT AF_APL_ID
						,AF_APL_ID_SFX
						,AC_LON_STA_TYP
						,AC_LON_STA_REA
					FROM OLWHRM1.GA14_LON_STA 
					WHERE AC_STA_GA14 = 'A'
					AND AC_LON_STA_TYP = 'PN'
					AND AD_LON_STA BETWEEN &cCurChrtBeg AND &cNxtChrtEnd
				) E
				ON D.AF_APL_ID = E.AF_APL_ID
				AND D.AF_APL_ID_SFX = E.AF_APL_ID_SFX
			INNER JOIN (
					SELECT AF_APL_ID
						,AF_APL_ID_SFX
						,AD_NDS_CLC_ENT_RPD
					FROM OLWHRM1.GA15_NDS_ID
					WHERE AC_STA_GA15 = 'A'
					AND AD_NDS_CLC_ENT_RPD BETWEEN &cCurChrtBeg AND &cNxtChrtEnd
				) F
				ON D.AF_APL_ID = F.AF_APL_ID
				AND D.AF_APL_ID_SFX = F.AF_APL_ID_SFX
			WHERE D.AC_LON_TYP IN ('SF','SU')
		) USTAF
		ON CNSL.BF_SSN = USTAF.DF_PRS_ID_BR
FOR READ ONLY WITH UR
);
/*********************************************************************************************
* IDENTIFY CURRENT PRECLAIM LOANS
**********************************************************************************************/
CREATE TABLE CRPCLM AS
SELECT *
FROM CONNECTION TO DB2 (
SELECT DISTINCT A.DF_PRS_ID_BR
	,B.AF_APL_ID||B.AF_APL_ID_SFX AS CLUID
	,C.AC_LON_STA_TYP
	,C.AC_LON_STA_REA
FROM OLWHRM1.GA01_APP A
INNER JOIN OLWHRM1.GA10_LON_APP B
	ON A.AF_APL_ID = B.AF_APL_ID
INNER JOIN OLWHRM1.GA14_LON_STA C
	ON B.AF_APL_ID = C.AF_APL_ID
	AND B.AF_APL_ID_SFX = C.AF_APL_ID_SFX
WHERE C.AC_STA_GA14 = 'A'
	AND C.AC_LON_STA_TYP = 'CR'
	AND C.AC_LON_STA_REA IN ('DF','DB','DQ')
FOR READ ONLY WITH UR
);
/*********************************************************************************************
* GET DATA TO DETERMINE TIMED OUT BORROWERS
**********************************************************************************************/
CREATE TABLE TOB AS
SELECT DISTINCT B.*
FROM CRPCLM A
INNER JOIN CONNECTION TO DB2 (
	SELECT A.BF_SSN
		,A.AF_APL_ID||A.AF_APL_ID_SFX AS CLUID
		,A.LC_STA_DC10
		,A.LC_PCL_REA
		,A.LD_DCO
	FROM OLWHRM1.DC01_LON_CLM_INF A
	INNER JOIN (
		SELECT AF_APL_ID
			,AF_APL_ID_SFX
			,MAX(LD_STA_UPD_DC10) AS LD_STA_UPD_DC10
		FROM OLWHRM1.DC01_LON_CLM_INF 
		GROUP BY AF_APL_ID
			,AF_APL_ID_SFX
		) B
		ON A.AF_APL_ID = B.AF_APL_ID
		AND A.AF_APL_ID_SFX = B.AF_APL_ID_SFX
		AND A.LD_STA_UPD_DC10 = B.LD_STA_UPD_DC10
	FOR READ ONLY WITH UR
	) B
	ON A.CLUID = B.CLUID
	;
DISCONNECT FROM DB2;
/*********************************************************************************************
* FILTER DATA FROM COHORT AND CURRENT PRECLAIM
**********************************************************************************************/
CREATE TABLE MPPR AS
SELECT A.DF_PRS_ID_BR
	,A.CLUID
	,A.AC_LON_STA_TYP
	,A.AC_LON_STA_REA
	,B.DT_ENT_REPMT
	,C.LC_STA_DC10
	,C.LC_PCL_REA
	,C.LD_DCO
FROM CRPCLM A
INNER JOIN NCDRD B
	ON A.CLUID = B.CLUID
LEFT OUTER JOIN TOB C
	ON B.CLUID = C.CLUID
;
QUIT;
DATA MPPR (KEEP=DF_PRS_ID_BR CLUID AC_LON_STA_TYP AC_LON_STA_REA);
	SET MPPR;
	DO;
		IF &iCurChrtBeg <= DT_ENT_REPMT <= &iCurChrtEnd THEN DO;
			IF LC_STA_DC10 ^= '01' AND 
				TODAY() > &iCurDecDt THEN
					DELETE;
			ELSE IF LC_STA_DC10 = '01' AND 
				LC_PCL_REA IN ('DF','RS','DB','DQ') AND 
				ABS(LD_DCO - INTNX('YEAR',&iCurChrtEnd,+1,'S')) < 300 THEN
					DELETE;
			END;
	END;
RUN;
%MEND BaseLineSQL;
PROC SQL;
CONNECT TO DB2 (DATABASE=DLGSUTWH);
/*******************************************************************************************************
* GET LOAN STATUS FOR BASELINE LOANS - THIS WILL RUN EVERYDAY EVEN IF THE BASELINE IS OVERWRITTEN LATER
********************************************************************************************************/
CREATE TABLE MPPR AS
SELECT A.DF_PRS_ID_BR
	,A.CLUID
	,B.AC_LON_STA_TYP
	,B.AC_LON_STA_REA
	,COALESCE(B.DAYS_DELQ,0) AS DAYS_DELQ
	,B.DM_PRS_LST
	,B.DF_SPE_ACC_ID
	,B.AD_NDS_CLC_ENT_RPD
FROM BSLN A	/*CHANGE TO HLDR FOR PROD*/
LEFT OUTER JOIN CONNECTION TO DB2 (
	SELECT GA01.DF_PRS_ID_BR 
		,GA10.AF_APL_ID||GA10.AF_APL_ID_SFX AS CLUID
		,GA14.AC_LON_STA_TYP
		,GA14.AC_LON_STA_REA
		,DC01.DAYS_DELQ
		,PD01.DF_SPE_ACC_ID
		,PD01.DM_PRS_LST
		,GA15.AD_NDS_CLC_ENT_RPD
	FROM OLWHRM1.GA01_APP GA01
	INNER JOIN OLWHRM1.GA10_LON_APP GA10
		ON GA01.AF_APL_ID = GA10.AF_APL_ID
	INNER JOIN OLWHRM1.GA14_LON_STA GA14
		ON GA10.AF_APL_ID = GA14.AF_APL_ID
		AND GA10.AF_APL_ID_SFX = GA14.AF_APL_ID_SFX
	INNER JOIN OLWHRM1.PD01_PDM_INF PD01
		ON GA01.DF_PRS_ID_BR = PD01.DF_PRS_ID
	INNER JOIN OLWHRM1.GA15_NDS_ID GA15
		ON GA10.AF_APL_ID = GA15.AF_APL_ID
		AND GA10.AF_APL_ID_SFX = GA15.AF_APL_ID_SFX
	LEFT OUTER JOIN (
		SELECT LJA.AF_APL_ID
			,LJA.AF_APL_ID_SFX
			,DAYS(CURRENT DATE) - DAYS(COALESCE(LJA.LD_ADJ_DCO,LJA.LD_DCO)) AS DAYS_DELQ
		FROM OLWHRM1.DC01_LON_CLM_INF LJA
		INNER JOIN (
			SELECT AF_APL_ID
				,AF_APL_ID_SFX
				,MAX(LF_CRT_DTS_DC10) AS LF_CRT_DTS_DC10
			FROM OLWHRM1.DC01_LON_CLM_INF 
			GROUP BY AF_APL_ID
				,AF_APL_ID_SFX
			) LJB
			ON LJA.AF_APL_ID = LJB.AF_APL_ID
			AND LJA.AF_APL_ID_SFX = LJB.AF_APL_ID_SFX
			AND LJA.LF_CRT_DTS_DC10 = LJB.LF_CRT_DTS_DC10
		WHERE LJA.LC_STA_DC10 = '01'
		) DC01
		ON DC01.AF_APL_ID = GA10.AF_APL_ID
		AND DC01.AF_APL_ID_SFX = GA10.AF_APL_ID_SFX
	WHERE GA14.AC_STA_GA14 = 'A'
	AND GA15.AC_STA_GA15 = 'A'
	FOR READ ONLY WITH UR
	) B
	ON A.CLUID = B.CLUID;
DISCONNECT FROM DB2;
/*%PUT  SQLXRC= >>> &SQLXRC <<< ||| SQLXMSG= >>> &SQLXMSG >>>  ;  * INCLUDES ERROR MESSAGES TO SAS LOG  ;*/
/*%SQLCHECK (SQLRPT=ULWM32.LWM32RZ);*/
/*QUIT;*/
ENDRSUBMIT;
DATA MPPR;SET WORKLOCL.MPPR;RUN;
/*************************************
* ASSIGN CURRENT CATEGORY TO BORROWER
**************************************/
PROC SQL;
CREATE TABLE STAT AS 
SELECT DISTINCT A.DF_PRS_ID_BR
	,B.CAT2
	,C.CAT3
	,D.CAT4
	,E.CAT5
	,F.CAT6
	,G.CAT7
	,H.CAT8
	,CASE
		WHEN J.CHRT_YR = 'F' THEN J.CHRT_YR
		WHEN J.CHRT_YR IS NULL AND I.CHRT_YR = 'C' THEN I.CHRT_YR
		ELSE ''
	 END AS CHRT_YR
FROM MPPR A
LEFT OUTER JOIN (
SELECT DF_PRS_ID_BR
	,'X' AS CAT2 
	FROM MPPR A
	WHERE AC_LON_STA_TYP = 'CP'
		AND AC_LON_STA_REA IN (
			'BC','BO','BH'
			)
	) B
	ON A.DF_PRS_ID_BR = B.DF_PRS_ID_BR
LEFT OUTER JOIN (
	SELECT DF_PRS_ID_BR
		,'X' AS CAT3
	FROM MPPR
	WHERE AC_LON_STA_TYP = 'CP'
		AND AC_LON_STA_REA IN (
			'DB','DF','DQ'
			)
	) C
	ON A.DF_PRS_ID_BR = C.DF_PRS_ID_BR
LEFT OUTER JOIN (
	SELECT DF_PRS_ID_BR
		,'X' AS CAT4 
	FROM MPPR
	WHERE AC_LON_STA_TYP = 'DA'
	) D
	ON A.DF_PRS_ID_BR = D.DF_PRS_ID_BR
LEFT OUTER JOIN (
	SELECT DF_PRS_ID_BR
		,'X' AS CAT5 
	FROM MPPR
	WHERE AC_LON_STA_TYP = 'FB'
	) E
	ON A.DF_PRS_ID_BR = E.DF_PRS_ID_BR
LEFT OUTER JOIN (
	SELECT DF_PRS_ID_BR
		,'X' AS CAT6 
	FROM MPPR
	WHERE AC_LON_STA_TYP IN (
		'PC','PN'
		)
	) F
	ON A.DF_PRS_ID_BR = F.DF_PRS_ID_BR
LEFT OUTER JOIN (
	SELECT DF_PRS_ID_BR
		,'X' AS CAT7 
	FROM MPPR
	WHERE AC_LON_STA_TYP = 'PF'
	) G
	ON A.DF_PRS_ID_BR = G.DF_PRS_ID_BR
LEFT OUTER JOIN (
	SELECT DF_PRS_ID_BR
		,'X' AS CAT8 
	FROM MPPR
	WHERE AC_LON_STA_TYP IN (
		'AL','CA','DN','IA','ID','IG',
		'IM','PM','RF','RP','UA','UB',
		'UC','UD','UI'
		)
	) H
	ON A.DF_PRS_ID_BR = H.DF_PRS_ID_BR
/*DETERMINE COHORT YEAR*/
LEFT OUTER JOIN (
	SELECT DF_PRS_ID_BR
		,'C' AS CHRT_YR
	FROM MPPR
	WHERE &iCurChrtBeg <= AD_NDS_CLC_ENT_RPD <= &iCurChrtEnd
	) I
	ON A.DF_PRS_ID_BR = I.DF_PRS_ID_BR
LEFT OUTER JOIN (
	SELECT DF_PRS_ID_BR
		,'F' AS CHRT_YR
	FROM MPPR
	WHERE &iNxtChrtBeg <= AD_NDS_CLC_ENT_RPD <= &iNxtChrtEnd
	) J
	ON A.DF_PRS_ID_BR = J.DF_PRS_ID_BR
;
QUIT;
/*CATEGORY ASSIGNMENT CONTINUED*/
DATA STAT (KEEP=DF_PRS_ID_BR CAT CHRT_YR);
SET STAT;
IF CAT2 = 'X' THEN CAT=2;
ELSE IF CAT2 = '' 
	AND CAT3 = 'X' THEN CAT=3;
ELSE IF CAT2 = '' 
	AND CAT3 = '' 
	AND CAT4 = 'X' THEN CAT=4;
ELSE IF CAT2 = '' 
	AND CAT3 = '' 
	AND CAT4 = '' 
	AND CAT5 = 'X' THEN CAT=5;
ELSE IF CAT2 = '' 
	AND CAT3 = '' 
	AND CAT4 = '' 
	AND CAT5 = '' 
	AND CAT6 = 'X' THEN CAT=6;
ELSE IF CAT2 = '' 
	AND CAT3 = '' 
	AND CAT4 = '' 
	AND CAT5 = '' 
	AND CAT6 = '' 
	AND CAT7 = 'X' THEN CAT=7;
ELSE IF CAT2 = '' 
	AND CAT3 = '' 
	AND CAT4 = '' 
	AND CAT5 = '' 
	AND CAT6 = '' 
	AND CAT7 = '' 
	AND CAT8 = 'X' THEN CAT=8;
ELSE CAT = .;
RUN;
/***************************************
* CREATE MASTER AND SSN RANGE DATA SETS
****************************************/
%MACRO PRCDPDAT(DS,CRT_STR,YR);
PROC SQL;
CREATE TABLE &DS AS 
SELECT A.CAT
	,A.CSRT
	,COALESCE(C.BSLN_COUNT,0) AS BSLN_COUNT
	,COALESCE(B.CUR_COUNT,0) AS CUR_COUNT
FROM SCAT A
LEFT OUTER JOIN (
		SELECT CAT
			,COUNT(*) AS CUR_COUNT
		FROM STAT 
		WHERE &CRT_STR
			AND CHRT_YR = "&YR"
		GROUP BY CAT
	UNION 
		SELECT 1 AS CAT
			,COUNT(DISTINCT DF_PRS_ID_BR) AS CUR_COUNT
		FROM STAT 
		WHERE CAT ^= .
			AND CHRT_YR = "&YR"
			AND (&CRT_STR)
	) B
	ON A.CSRT = B.CAT
LEFT OUTER JOIN (
	SELECT COUNT(DISTINCT DF_PRS_ID_BR) AS BSLN_COUNT
		,1 AS CAT
	FROM HLDIR.BSLN
	WHERE &CRT_STR
	) C
	ON A.CSRT = C.CAT
;

CREATE TABLE &DS._DET AS 
SELECT DISTINCT A.DF_SPE_ACC_ID
	,A.DM_PRS_LST
	,MAX(A.DAYS_DELQ) AS DAYS_DELQ
FROM MPPR A
INNER JOIN (
	SELECT DF_PRS_ID_BR
	FROM HLDIR.BSLN
	WHERE &CRT_STR
	) B
	ON A.DF_PRS_ID_BR = B.DF_PRS_ID_BR
WHERE A.AC_LON_STA_TYP = 'CR'
	AND A.AC_LON_STA_REA IN ('DF','DB','DQ')
GROUP BY A.DF_SPE_ACC_ID
	,A.DM_PRS_LST
;
QUIT;

PROC SQL NOPRINT;
SELECT BSLN_COUNT AS BSLN_COUNT
INTO: BSLN_COUNT
FROM &DS
WHERE CSRT=1;
QUIT;

DATA &DS;
SET &DS;
	PCNG = ROUND(CUR_COUNT/&BSLN_COUNT,.0001);
	IF CSRT = 1 THEN 
		CHNG = ABS(CUR_COUNT-BSLN_COUNT);
	ELSE CHNG = 0;
RUN;
%MEND PRCDPDAT;
/*SSN RANGE ASSIGNMENT*/
%PRCDPDAT(PDPR_C,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,9,1),BEST12.) BETWEEN 0 AND 9 
	),C);
%PRCDPDAT(PDPR_F,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,9,1),BEST12.) BETWEEN 0 AND 9 
	),F);

%PRCDPDAT(RNG1_C,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 0 AND 9 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 63 AND 65 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 66 AND 69 
	),C);
%PRCDPDAT(RNG1_F,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 0 AND 9 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 63 AND 65 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 66 AND 69 
	),F);

%PRCDPDAT(RNG2_C,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 10 AND 19 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 73 AND 75 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 76 AND 79 
	),C);
%PRCDPDAT(RNG2_F,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 10 AND 19 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 73 AND 75 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 76 AND 79 
	),F);

%PRCDPDAT(RNG3_C,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 20 AND 29 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 83 AND 85 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 86 AND 89 
	),C);
%PRCDPDAT(RNG3_F,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 20 AND 29 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 83 AND 85 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 86 AND 89 
	),F);

%PRCDPDAT(RNG4_C,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 30 AND 39 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 70 AND 72 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 80 AND 82 
	),C);
%PRCDPDAT(RNG4_F,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 30 AND 39 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 70 AND 72 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 80 AND 82 
	),F);

%PRCDPDAT(RNG5_C,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 40 AND 49 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 93 AND 95 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 96 AND 99 
	),C);
%PRCDPDAT(RNG5_F,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 40 AND 49 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 93 AND 95 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 96 AND 99 
	),F);

%PRCDPDAT(RNG6_C,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 50 AND 59 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 60 AND 62 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 90 AND 92 
	),C);
%PRCDPDAT(RNG6_F,%STR(
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 50 AND 59 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 60 AND 62 OR
	INPUT(SUBSTR(DF_PRS_ID_BR,8,2),BEST12.) BETWEEN 90 AND 92 
	),F);

/***************************************
* REPORT MACROS
****************************************/
%MACRO PRNT_REPSA(DS,RPNO,NEWI,TITLE,TITLE2);
%IF &NEWI = 1 %THEN %DO;
	PROC PRINTTO PRINT=REPORT&RPNO NEW;
	RUN;
	OPTIONS ORIENTATION = LANDSCAPE CENTER NODATE PAGENO=1;
	OPTIONS PS=39 LS=127;
%END;
%ELSE %DO;
	PROC PRINTTO PRINT=REPORT&RPNO;
	RUN;
	OPTIONS ORIENTATION = LANDSCAPE CENTER NODATE;
	OPTIONS PS=39 LS=127;
%END;
TITLE "&TITLE";
TITLE2 "&TITLE2";
FOOTNOTE "JOB = UTLWM23  	 REPORT = ULWM23.LWM23R&RPNO";

PROC PRINT NOOBS SPLIT='/' DATA=&DS WIDTH=UNIFORM WIDTH=MIN;
FORMAT BSLN_COUNT CUR_COUNT CHNG COMMA7. PCNG PERCENT10.2;
VAR CAT
BSLN_COUNT
CHNG
CUR_COUNT
PCNG;
LABEL CAT = 'CATEGORY'
BSLN_COUNT = 'PRECLAIM BASELINE'
CHNG = 'PRECLAIM REMAINING'
CUR_COUNT = 'CURED MTD'
PCNG = 'PERCENT CHANGE';
RUN;

PROC PRINTTO;
RUN;
%MEND PRNT_REPSA;
%MACRO PRNT_REPSB(DS,RPNO,NEWI,TITLE,TITLE2);
OPTIONS SPOOL;
PROC SORT DATA=&DS;BY DAYS_DELQ DF_SPE_ACC_ID;RUN;
%IF &NEWI = 1 %THEN %DO;
	PROC PRINTTO PRINT=REPORT&RPNO NEW;
	RUN;
	OPTIONS ORIENTATION = LANDSCAPE CENTER NODATE PAGENO=1;
	OPTIONS PS=39 LS=127;
%END;
%ELSE %DO;
	PROC PRINTTO PRINT=REPORT&RPNO;
	RUN;
	OPTIONS ORIENTATION = LANDSCAPE CENTER NODATE;
	OPTIONS PS=39 LS=127;
%END;
TITLE "&TITLE";
TITLE2 "&TITLE2";
FOOTNOTE "JOB = UTLWM23  	 REPORT = ULWM23.LWM23R&RPNO";

PROC PRINT NOOBS SPLIT='/' DATA=&DS WIDTH=UNIFORM WIDTH=MIN N='TOTAL BORROWERS IN PRECLAIM = ';
VAR DF_SPE_ACC_ID
	DM_PRS_LST
	DAYS_DELQ;
LABEL DF_SPE_ACC_ID = 'ACCOUNT #'
	DM_PRS_LST = 'LAST NAME'
	DAYS_DELQ = 'DAYS DELINQUENT';
RUN;

PROC PRINTTO;
RUN;
%MEND PRNT_REPSB;
/********************************
* CREATE REPORTS
*********************************/
/*SUMMARY REPORT*/
%PRNT_REPSA(PDPR_C,2,1,TEAM PERFORMANCE CURRENT COHORT DEFAULT AVERSION,&RUNDATE - &RUNTIME);
%PRNT_REPSA(PDPR_F,2,0,TEAM PERFORMANCE FUTURE COHORT DEFAULT AVERSION,&RUNDATE - &RUNTIME);
/*DETAIL REPORTS*/
%PRNT_REPSB(RNG1_C_DET,3,1,BORROWERS STILL IN PRECLAIM CURRENT COHORT - RANGE 1,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG1_F_DET,3,0,BORROWERS STILL IN PRECLAIM FUTURE COHORT - RANGE 1,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG2_C_DET,3,0,BORROWERS STILL IN PRECLAIM CURRENT COHORT - RANGE 2,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG2_F_DET,3,0,BORROWERS STILL IN PRECLAIM FUTURE COHORT - RANGE 2,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG3_C_DET,3,0,BORROWERS STILL IN PRECLAIM CURRENT COHORT - RANGE 3,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG3_F_DET,3,0,BORROWERS STILL IN PRECLAIM FUTURE COHORT - RANGE 3,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG4_C_DET,3,0,BORROWERS STILL IN PRECLAIM CURRENT COHORT - RANGE 4,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG4_F_DET,3,0,BORROWERS STILL IN PRECLAIM FUTURE COHORT - RANGE 4,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG5_C_DET,3,0,BORROWERS STILL IN PRECLAIM CURRENT COHORT - RANGE 5,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG5_F_DET,3,0,BORROWERS STILL IN PRECLAIM FUTURE COHORT - RANGE 5,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG6_C_DET,3,0,BORROWERS STILL IN PRECLAIM CURRENT COHORT - RANGE 6,&RUNDATE - &RUNTIME);
%PRNT_REPSB(RNG6_F_DET,3,0,BORROWERS STILL IN PRECLAIM FUTURE COHORT - RANGE 6,&RUNDATE - &RUNTIME);
/*AGENT SUMMARY REPORTS*/
%PRNT_REPSA(RNG1_C,4,1,AGENT PERFORMANCE CURRENT COHORT DEFAULT AVERSION - RANGE 1,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG1_F,4,0,AGENT PERFORMANCE FUTURE COHORT DEFAULT AVERSION - RANGE 1,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG2_C,4,0,AGENT PERFORMANCE CURRENT COHORT DEFAULT AVERSION - RANGE 2,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG2_F,4,0,AGENT PERFORMANCE FUTURE COHORT DEFAULT AVERSION - RANGE 2,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG3_C,4,0,AGENT PERFORMANCE CURRENT COHORT DEFAULT AVERSION - RANGE 3,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG3_F,4,0,AGENT PERFORMANCE FUTURE COHORT DEFAULT AVERSION - RANGE 3,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG4_C,4,0,AGENT PERFORMANCE CURRENT COHORT DEFAULT AVERSION - RANGE 4,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG4_F,4,0,AGENT PERFORMANCE FUTURE COHORT DEFAULT AVERSION - RANGE 4,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG5_C,4,0,AGENT PERFORMANCE CURRENT COHORT DEFAULT AVERSION - RANGE 5,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG5_F,4,0,AGENT PERFORMANCE FUTURE COHORT DEFAULT AVERSION - RANGE 5,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG6_C,4,0,AGENT PERFORMANCE CURRENT COHORT DEFAULT AVERSION - RANGE 6,&RUNDATE - &RUNTIME);
%PRNT_REPSA(RNG6_F,4,0,AGENT PERFORMANCE FUTURE COHORT DEFAULT AVERSION - RANGE 6,&RUNDATE - &RUNTIME);
/*ERROR REPORT*/
PROC SQL;
CREATE TABLE ERR AS 
SELECT DISTINCT A.DF_SPE_ACC_ID
	,A.DM_PRS_LST
	,A.AC_LON_STA_TYP
	,A.AC_LON_STA_REA
FROM MPPR A
INNER JOIN STAT B
	ON A.DF_PRS_ID_BR = B.DF_PRS_ID_BR
WHERE B.CAT = .
	AND A.AC_LON_STA_TYP ^= 'CR'
	AND A.AC_LON_STA_REA NOT IN ('DF','DB','DQ')
ORDER BY A.DF_SPE_ACC_ID
;
QUIT;
PROC PRINTTO PRINT=REPORT5 NEW;
RUN;
OPTIONS ORIENTATION = LANDSCAPE CENTER NODATE PAGENO=1;
OPTIONS PS=39 LS=127;
TITLE "PRECLAIM DAILY PERFORMANCE REPORT - ERROR REPORT";
TITLE2 "&RUNDATE - &RUNTIME";
FOOTNOTE "JOB = UTLWM23  	 REPORT = ULWM23.LWM23R5";
PROC CONTENTS DATA=ERR OUT=EMPTYSET NOPRINT;
DATA _NULL_;
SET EMPTYSET;
FILE PRINT;
IF  NOBS=0 AND _N_ =1 THEN DO;
	PUT // 126*'-';
	PUT      //////
		@51 '**** NO OBSERVATIONS FOUND ****';
	PUT //////
		@57 '-- END OF REPORT --';
	PUT //////////////
		@46 "JOB = UTLWM23  	 REPORT = ULWM23.LWM23R5";
	END;
RETURN;
RUN;
PROC PRINT NOOBS SPLIT='/' DATA=ERR WIDTH=UNIFORM WIDTH=MIN LABEL;
VAR DF_SPE_ACC_ID DM_PRS_LST AC_LON_STA_TYP AC_LON_STA_REA;
LABEL DF_SPE_ACC_ID = 'ACCT #'
	DM_PRS_LST = 'BORROWER LAST NAME'
	AC_LON_STA_TYP = 'LOAN STATUS TYPE CODE'
	AC_LON_STA_REA = 'LOAN STATUS REASON';
RUN;
PROC PRINTTO;
RUN;
/*******************************************************
* DETERMINE IF BASELINE DATA SET NEEDS TO BE OVERWRITEN
********************************************************/
%MACRO FIRST_BASE;
DATA _NULL_;
SET LGFL;
IF MONTH(LR_DATE) = MONTH(TODAY()) THEN DO; /*SAME MONTH*/
	CALL SYMPUT('NWBS',0);
END;
ELSE DO;
	CALL SYMPUT('NWBS',1); /*NEW MONTH*/
END;
RUN;
/*IF THIS IS THE FIRST TIME THIS IS RUN FOR THE MONTH OVERWRITE THE BASELINE DATASET*/
%IF &NWBS = 1 %THEN %DO;
	RSUBMIT;
	%BaseLineSQL;
	ENDRSUBMIT;
	DATA MPPR;
	SET WORKLOCL.MPPR;
	RUN;
	PROC SORT DATA=MPPR OUT=HLDIR.BSLN (KEEP=DF_PRS_ID_BR CLUID) NODUPKEY; 
		BY DF_PRS_ID_BR CLUID;
	RUN;
	%PUT %STR(===========================);
	%PUT %STR(BASELINE DATASET OVERWRITEN);
	%PUT %STR(===========================);
%END;
%MEND FIRST_BASE;
%FIRST_BASE;
/********************************
* WRITE NEW RUN DATE TO LOG FILE
*********************************/
DATA _NULL_;
SET  WORK.LGFL;
FILE RUNLOG DELIMITER=',' DSD DROPOVER LRECL=32767;
DO;
	PUT "&RUNDATE" ;
END;
RUN;
